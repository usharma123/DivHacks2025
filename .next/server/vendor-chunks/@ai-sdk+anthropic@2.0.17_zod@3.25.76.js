"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk+anthropic@2.0.17_zod@3.25.76";
exports.ids = ["vendor-chunks/@ai-sdk+anthropic@2.0.17_zod@3.25.76"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@ai-sdk+anthropic@2.0.17_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+anthropic@2.0.17_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anthropic: () => (/* binding */ anthropic),\n/* harmony export */   createAnthropic: () => (/* binding */ createAnthropic)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.9_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/index.js\");\n// src/anthropic-provider.ts\n\n\n\n// src/anthropic-messages-language-model.ts\n\n\n\n\n// src/anthropic-error.ts\n\n\nvar anthropicErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\nvar anthropicFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/anthropic-messages-options.ts\n\nvar anthropicFilePartProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Enable citations for this document\n     */\n    enabled: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()\n  }).optional(),\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar anthropicProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  sendReasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"enabled\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"disabled\")]),\n    budgetTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n  }).optional(),\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Cache control settings for this message.\n   * See https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching\n   */\n  cacheControl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"ephemeral\"),\n    ttl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"5m\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"1h\")]).optional()\n  }).optional()\n});\n\n// src/anthropic-prepare-tools.ts\n\n\n// src/get-cache-control.ts\nfunction getCacheControl(providerMetadata) {\n  var _a;\n  const anthropic2 = providerMetadata == null ? void 0 : providerMetadata.anthropic;\n  const cacheControlValue = (_a = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a : anthropic2 == null ? void 0 : anthropic2.cache_control;\n  return cacheControlValue;\n}\n\n// src/tool/web-search_20250305.ts\n\n\nvar webSearch_20250305ArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearch_20250305OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    pageAge: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    encryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n);\nvar factory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.web_search_20250305\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: webSearch_20250305OutputSchema\n});\nvar webSearch_20250305 = (args = {}) => {\n  return factory(args);\n};\n\n// src/anthropic-prepare-tools.ts\nfunction isWebSearchTool(tool) {\n  return typeof tool === \"object\" && tool !== null && \"type\" in tool && tool.type === \"web_search_20250305\";\n}\nfunction prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const betas = /* @__PURE__ */ new Set();\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n  }\n  const anthropicTools2 = [];\n  for (const tool of tools) {\n    if (isWebSearchTool(tool)) {\n      anthropicTools2.push(tool);\n      continue;\n    }\n    switch (tool.type) {\n      case \"function\":\n        const cacheControl = getCacheControl(tool.providerOptions);\n        anthropicTools2.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"anthropic.computer_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20250124\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.computer_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20241022\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.text_editor_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20250124\"\n            });\n            break;\n          case \"anthropic.text_editor_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20241022\"\n            });\n            break;\n          case \"anthropic.text_editor_20250429\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_based_edit_tool\",\n              type: \"text_editor_20250429\"\n            });\n            break;\n          case \"anthropic.bash_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20250124\"\n            });\n            break;\n          case \"anthropic.bash_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20241022\"\n            });\n            break;\n          case \"anthropic.web_search_20250305\": {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools2.push({\n              type: \"web_search_20250305\",\n              name: \"web_search\",\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"anthropic.code_execution_20250522\": {\n            betas.add(\"code-execution-2025-05-22\");\n            anthropicTools2.push({\n              type: \"code_execution_20250522\",\n              name: \"code_execution\"\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools2,\n      toolChoice: disableParallelToolUse ? { type: \"auto\", disable_parallel_tool_use: disableParallelToolUse } : void 0,\n      toolWarnings,\n      betas\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"auto\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"required\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"any\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"none\":\n      return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n    case \"tool\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"tool\",\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/convert-to-anthropic-messages-prompt.ts\n\n\n\n// src/tool/code-execution_20250522.ts\n\n\nvar codeExecution_20250522OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n  stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar factory2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.code_execution_20250522\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: codeExecution_20250522OutputSchema\n});\nvar codeExecution_20250522 = (args = {}) => {\n  return factory2(args);\n};\n\n// src/convert-to-anthropic-messages-prompt.ts\nfunction convertToString(data) {\n  if (typeof data === \"string\") {\n    return Buffer.from(data, \"base64\").toString(\"utf-8\");\n  }\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n  if (data instanceof URL) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: \"URL-based text documents are not supported for citations\"\n    });\n  }\n  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`\n  });\n}\nasync function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings\n}) {\n  var _a, _b, _c, _d, _e;\n  const betas = /* @__PURE__ */ new Set();\n  const blocks = groupIntoBlocks(prompt);\n  let system = void 0;\n  const messages = [];\n  async function shouldEnableCitations(providerMetadata) {\n    var _a2, _b2;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return (_b2 = (_a2 = anthropicOptions == null ? void 0 : anthropicOptions.citations) == null ? void 0 : _a2.enabled) != null ? _b2 : false;\n  }\n  async function getDocumentMetadata(providerMetadata) {\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return {\n      title: anthropicOptions == null ? void 0 : anthropicOptions.title,\n      context: anthropicOptions == null ? void 0 : anthropicOptions.context\n    };\n  }\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n    switch (type) {\n      case \"system\": {\n        if (system != null) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"Multiple system messages that are separated by user/assistant messages\"\n          });\n        }\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: \"text\",\n          text: content,\n          cache_control: getCacheControl(providerOptions)\n        }));\n        break;\n      }\n      case \"user\": {\n        const anthropicContent = [];\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case \"user\": {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n                const isLastPart = j === content.length - 1;\n                const cacheControl = (_a = getCacheControl(part.providerOptions)) != null ? _a : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                switch (part.type) {\n                  case \"text\": {\n                    anthropicContent.push({\n                      type: \"text\",\n                      text: part.text,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  case \"file\": {\n                    if (part.mediaType.startsWith(\"image/\")) {\n                      anthropicContent.push({\n                        type: \"image\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType,\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"application/pdf\") {\n                      betas.add(\"pdfs-2024-09-25\");\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: \"application/pdf\",\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        title: (_b = metadata.title) != null ? _b : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"text/plain\") {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"text\",\n                          media_type: \"text/plain\",\n                          data: convertToString(part.data)\n                        },\n                        title: (_c = metadata.title) != null ? _c : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`\n                      });\n                    }\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            case \"tool\": {\n              for (let i2 = 0; i2 < content.length; i2++) {\n                const part = content[i2];\n                const isLastPart = i2 === content.length - 1;\n                const cacheControl = (_d = getCacheControl(part.providerOptions)) != null ? _d : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                const output = part.output;\n                let contentValue;\n                switch (output.type) {\n                  case \"content\":\n                    contentValue = output.value.map((contentPart) => {\n                      switch (contentPart.type) {\n                        case \"text\":\n                          return {\n                            type: \"text\",\n                            text: contentPart.text,\n                            cache_control: void 0\n                          };\n                        case \"media\": {\n                          if (contentPart.mediaType.startsWith(\"image/\")) {\n                            return {\n                              type: \"image\",\n                              source: {\n                                type: \"base64\",\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data\n                              },\n                              cache_control: void 0\n                            };\n                          }\n                          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case \"text\":\n                  case \"error-text\":\n                    contentValue = output.value;\n                    break;\n                  case \"json\":\n                  case \"error-json\":\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n                anthropicContent.push({\n                  type: \"tool_result\",\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error: output.type === \"error-text\" || output.type === \"error-json\" ? true : void 0,\n                  cache_control: cacheControl\n                });\n              }\n              break;\n            }\n            default: {\n              const _exhaustiveCheck = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n        messages.push({ role: \"user\", content: anthropicContent });\n        break;\n      }\n      case \"assistant\": {\n        const anthropicContent = [];\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n            const cacheControl = (_e = getCacheControl(part.providerOptions)) != null ? _e : isLastContentPart ? getCacheControl(message.providerOptions) : void 0;\n            switch (part.type) {\n              case \"text\": {\n                anthropicContent.push({\n                  type: \"text\",\n                  text: (\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text\n                  ),\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"reasoning\": {\n                if (sendReasoning) {\n                  const reasoningMetadata = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                    provider: \"anthropic\",\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema\n                  });\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: \"thinking\",\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: \"redacted_thinking\",\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      warnings.push({\n                        type: \"other\",\n                        message: \"unsupported reasoning metadata\"\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: \"other\",\n                      message: \"unsupported reasoning metadata\"\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: \"other\",\n                    message: \"sending reasoning content is disabled for this model\"\n                  });\n                }\n                break;\n              }\n              case \"tool-call\": {\n                if (part.providerExecuted) {\n                  if (part.toolName === \"web_search\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"web_search\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  if (part.toolName === \"code_execution\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"code_execution\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  warnings.push({\n                    type: \"other\",\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`\n                  });\n                  break;\n                }\n                anthropicContent.push({\n                  type: \"tool_use\",\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"tool-result\": {\n                if (part.toolName === \"web_search\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value\n                  );\n                  anthropicContent.push({\n                    type: \"web_search_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map((result) => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type\n                    })),\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                if (part.toolName === \"code_execution\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const codeExecutionOutput = codeExecution_20250522OutputSchema.parse(output.value);\n                  anthropicContent.push({\n                    type: \"code_execution_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code\n                    },\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                warnings.push({\n                  type: \"other\",\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`\n                });\n                break;\n              }\n            }\n          }\n        }\n        messages.push({ role: \"assistant\", content: anthropicContent });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return {\n    prompt: { system, messages },\n    betas\n  };\n}\nfunction groupIntoBlocks(prompt) {\n  const blocks = [];\n  let currentBlock = void 0;\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case \"system\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"system\") {\n          currentBlock = { type: \"system\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"assistant\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"assistant\") {\n          currentBlock = { type: \"assistant\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"user\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"tool\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return blocks;\n}\n\n// src/map-anthropic-stop-reason.ts\nfunction mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool\n}) {\n  switch (finishReason) {\n    case \"pause_turn\":\n    case \"end_turn\":\n    case \"stop_sequence\":\n      return \"stop\";\n    case \"refusal\":\n      return \"content-filter\";\n    case \"tool_use\":\n      return isJsonResponseFromTool ? \"stop\" : \"tool-calls\";\n    case \"max_tokens\":\n      return \"length\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/anthropic-messages-language-model.ts\nvar citationSchemas = {\n  webSearchResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    encrypted_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  pageLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"page_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  charLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"char_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  })\n};\nvar citationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nvar documentCitationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nfunction processCitation(citation, citationDocuments, generateId3, onSource) {\n  if (citation.type === \"page_location\" || citation.type === \"char_location\") {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId3\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\nfunction createCitationSource(citation, citationDocuments, generateId3) {\n  var _a;\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n  const providerMetadata = citation.type === \"page_location\" ? {\n    citedText: citation.cited_text,\n    startPageNumber: citation.start_page_number,\n    endPageNumber: citation.end_page_number\n  } : {\n    citedText: citation.cited_text,\n    startCharIndex: citation.start_char_index,\n    endCharIndex: citation.end_char_index\n  };\n  return {\n    type: \"source\",\n    sourceType: \"document\",\n    id: generateId3(),\n    mediaType: documentInfo.mediaType,\n    title: (_a = citation.document_title) != null ? _a : documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata\n    }\n  };\n}\nvar AnthropicMessagesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  supportsUrl(url) {\n    return url.protocol === \"https:\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens = 4096,\n    // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\") {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"responseFormat\",\n          details: \"JSON response format requires a schema. The response format is ignored.\"\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"tools\",\n          details: \"JSON response format does not support tools. The provided tools are ignored.\"\n        });\n      }\n    }\n    const jsonResponseTool = (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null ? {\n      type: \"function\",\n      name: \"json\",\n      description: \"Respond with a JSON object.\",\n      inputSchema: responseFormat.schema\n    } : void 0;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions,\n      schema: anthropicProviderOptions\n    });\n    const { prompt: messagesPrompt, betas: messagesBetas } = await convertToAnthropicMessagesPrompt({\n      prompt,\n      sendReasoning: (_a = anthropicOptions == null ? void 0 : anthropicOptions.sendReasoning) != null ? _a : true,\n      warnings\n    });\n    const isThinking = ((_b = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _b.type) === \"enabled\";\n    const thinkingBudget = (_c = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _c.budgetTokens;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n      // provider specific settings:\n      ...isThinking && {\n        thinking: { type: \"enabled\", budget_tokens: thinkingBudget }\n      },\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages\n    };\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"thinking requires a budget\"\n        });\n      }\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported when thinking is enabled\"\n        });\n      }\n      if (topK != null) {\n        baseArgs.top_k = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topK\",\n          details: \"topK is not supported when thinking is enabled\"\n        });\n      }\n      if (topP != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported when thinking is enabled\"\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n    const {\n      tools: anthropicTools2,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas\n    } = prepareTools(\n      jsonResponseTool != null ? {\n        tools: [jsonResponseTool],\n        toolChoice: { type: \"tool\", toolName: jsonResponseTool.name },\n        disableParallelToolUse: true\n      } : {\n        tools: tools != null ? tools : [],\n        toolChoice,\n        disableParallelToolUse: anthropicOptions == null ? void 0 : anthropicOptions.disableParallelToolUse\n      }\n    );\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools2,\n        tool_choice: anthropicToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null\n    };\n  }\n  async getHeaders({\n    betas,\n    headers\n  }) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      betas.size > 0 ? { \"anthropic-beta\": Array.from(betas).join(\",\") } : {},\n      headers\n    );\n  }\n  buildRequestUrl(isStreaming) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;\n  }\n  transformRequestBody(args) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).transformRequestBody) == null ? void 0 : _b.call(_a, args)) != null ? _c : args;\n  }\n  extractCitationDocuments(prompt) {\n    const isCitationPart = (part) => {\n      var _a, _b;\n      if (part.type !== \"file\") {\n        return false;\n      }\n      if (part.mediaType !== \"application/pdf\" && part.mediaType !== \"text/plain\") {\n        return false;\n      }\n      const anthropic2 = (_a = part.providerOptions) == null ? void 0 : _a.anthropic;\n      const citationsConfig = anthropic2 == null ? void 0 : anthropic2.citations;\n      return (_b = citationsConfig == null ? void 0 : citationsConfig.enabled) != null ? _b : false;\n    };\n    return prompt.filter((message) => message.role === \"user\").flatMap((message) => message.content).filter(isCitationPart).map((part) => {\n      var _a;\n      const filePart = part;\n      return {\n        title: (_a = filePart.filename) != null ? _a : \"Untitled Document\",\n        filename: filePart.filename,\n        mediaType: filePart.mediaType\n      };\n    });\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e;\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        anthropicMessagesResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const content = [];\n    for (const part of response.content) {\n      switch (part.type) {\n        case \"text\": {\n          if (!usesJsonResponseTool) {\n            content.push({ type: \"text\", text: part.text });\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  (source) => content.push(source)\n                );\n              }\n            }\n          }\n          break;\n        }\n        case \"thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature\n              }\n            }\n          });\n          break;\n        }\n        case \"redacted_thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: \"\",\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data\n              }\n            }\n          });\n          break;\n        }\n        case \"tool_use\": {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool ? {\n              type: \"text\",\n              text: JSON.stringify(part.input)\n            } : {\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input)\n            }\n          );\n          break;\n        }\n        case \"server_tool_use\": {\n          if (part.name === \"web_search\" || part.name === \"code_execution\") {\n            content.push({\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"web_search_tool_result\": {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              result: part.content.map((result) => {\n                var _a2;\n                return {\n                  url: result.url,\n                  title: result.title,\n                  pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                  encryptedContent: result.encrypted_content,\n                  type: result.type\n                };\n              }),\n              providerExecuted: true\n            });\n            for (const result of part.content) {\n              content.push({\n                type: \"source\",\n                sourceType: \"url\",\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: (_a = result.page_age) != null ? _a : null\n                  }\n                }\n              });\n            }\n          } else {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              isError: true,\n              result: {\n                type: \"web_search_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"code_execution_tool_result\": {\n          if (part.content.type === \"code_execution_result\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code\n              },\n              providerExecuted: true\n            });\n          } else if (part.content.type === \"code_execution_tool_result_error\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              isError: true,\n              result: {\n                type: \"code_execution_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n      }\n    }\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: (_b = response.usage.cache_read_input_tokens) != null ? _b : void 0\n      },\n      request: { body: args },\n      response: {\n        id: (_c = response.id) != null ? _c : void 0,\n        modelId: (_d = response.model) != null ? _d : void 0,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage,\n          cacheCreationInputTokens: (_e = response.usage.cache_creation_input_tokens) != null ? _e : null\n        }\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const body = { ...args, stream: true };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        anthropicMessagesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const contentBlocks = {};\n    let providerMetadata = void 0;\n    let blockType = void 0;\n    const generateId3 = this.generateId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            switch (value.type) {\n              case \"ping\": {\n                return;\n              }\n              case \"content_block_start\": {\n                const contentBlockType = value.content_block.type;\n                blockType = contentBlockType;\n                switch (contentBlockType) {\n                  case \"text\": {\n                    contentBlocks[value.index] = { type: \"text\" };\n                    controller.enqueue({\n                      type: \"text-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"redacted_thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data\n                        }\n                      }\n                    });\n                    return;\n                  }\n                  case \"tool_use\": {\n                    contentBlocks[value.index] = usesJsonResponseTool ? { type: \"text\" } : {\n                      type: \"tool-call\",\n                      toolCallId: value.content_block.id,\n                      toolName: value.content_block.name,\n                      input: \"\"\n                    };\n                    controller.enqueue(\n                      usesJsonResponseTool ? { type: \"text-start\", id: String(value.index) } : {\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name\n                      }\n                    );\n                    return;\n                  }\n                  case \"server_tool_use\": {\n                    if (value.content_block.name === \"web_search\" || value.content_block.name === \"code_execution\") {\n                      contentBlocks[value.index] = {\n                        type: \"tool-call\",\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: \"\",\n                        providerExecuted: true\n                      };\n                      controller.enqueue({\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"web_search_tool_result\": {\n                    const part = value.content_block;\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        result: part.content.map((result) => {\n                          var _a2;\n                          return {\n                            url: result.url,\n                            title: result.title,\n                            pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                            encryptedContent: result.encrypted_content,\n                            type: result.type\n                          };\n                        }),\n                        providerExecuted: true\n                      });\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: \"source\",\n                          sourceType: \"url\",\n                          id: generateId3(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: (_a = result.page_age) != null ? _a : null\n                            }\n                          }\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        isError: true,\n                        result: {\n                          type: \"web_search_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"code_execution_tool_result\": {\n                    const part = value.content_block;\n                    if (part.content.type === \"code_execution_result\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code\n                        },\n                        providerExecuted: true\n                      });\n                    } else if (part.content.type === \"code_execution_tool_result_error\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        isError: true,\n                        result: {\n                          type: \"code_execution_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"content_block_stop\": {\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n                  switch (contentBlock.type) {\n                    case \"text\": {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"reasoning\": {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"tool-call\":\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: \"tool-input-end\",\n                          id: contentBlock.toolCallId\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n                  delete contentBlocks[value.index];\n                }\n                blockType = void 0;\n                return;\n              }\n              case \"content_block_delta\": {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case \"text_delta\": {\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: String(value.index),\n                      delta: value.delta.text\n                    });\n                    return;\n                  }\n                  case \"thinking_delta\": {\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: String(value.index),\n                      delta: value.delta.thinking\n                    });\n                    return;\n                  }\n                  case \"signature_delta\": {\n                    if (blockType === \"thinking\") {\n                      controller.enqueue({\n                        type: \"reasoning-delta\",\n                        id: String(value.index),\n                        delta: \"\",\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature\n                          }\n                        }\n                      });\n                    }\n                    return;\n                  }\n                  case \"input_json_delta\": {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n                    if (usesJsonResponseTool) {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"text\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"text-delta\",\n                        id: String(value.index),\n                        delta\n                      });\n                    } else {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"tool-call\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: contentBlock.toolCallId,\n                        delta\n                      });\n                      contentBlock.input += delta;\n                    }\n                    return;\n                  }\n                  case \"citations_delta\": {\n                    const citation = value.delta.citation;\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId3,\n                      (source) => controller.enqueue(source)\n                    );\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"message_start\": {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens = (_b = value.message.usage.cache_read_input_tokens) != null ? _b : void 0;\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage,\n                    cacheCreationInputTokens: (_c = value.message.usage.cache_creation_input_tokens) != null ? _c : null\n                  }\n                };\n                controller.enqueue({\n                  type: \"response-metadata\",\n                  id: (_d = value.message.id) != null ? _d : void 0,\n                  modelId: (_e = value.message.model) != null ? _e : void 0\n                });\n                return;\n              }\n              case \"message_delta\": {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens = ((_f = usage.inputTokens) != null ? _f : 0) + ((_g = value.usage.output_tokens) != null ? _g : 0);\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool\n                });\n                return;\n              }\n              case \"message_stop\": {\n                controller.enqueue({\n                  type: \"finish\",\n                  finishReason,\n                  usage,\n                  providerMetadata\n                });\n                return;\n              }\n              case \"error\": {\n                controller.enqueue({ type: \"error\", error: value.error });\n                return;\n              }\n              default: {\n                const _exhaustiveCheck = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar anthropicMessagesResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(citationSchema).optional()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  ),\n  stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n    input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  })\n});\nvar anthropicMessagesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_start\"),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n        input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n      })\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_start\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    content_block: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_delta\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"input_json_delta\"),\n        partial_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text_delta\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking_delta\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"signature_delta\"),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"citations_delta\"),\n        citation: citationSchema\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_stop\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n    error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_delta\"),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish() }),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_stop\")\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"ping\")\n  })\n]);\nvar anthropicReasoningMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  redactedData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/tool/bash_20241022.ts\n\n\nvar bash_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20241022\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/bash_20250124.ts\n\n\nvar bash_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20250124\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/computer_20241022.ts\n\n\nvar computer_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20241022\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"type\",\n      \"mouse_move\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"screenshot\",\n      \"cursor_position\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/computer_20250124.ts\n\n\nvar computer_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20250124\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"hold_key\",\n      \"type\",\n      \"cursor_position\",\n      \"mouse_move\",\n      \"left_mouse_down\",\n      \"left_mouse_up\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"triple_click\",\n      \"scroll\",\n      \"wait\",\n      \"screenshot\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_amount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_direction: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"up\", \"down\", \"left\", \"right\"]).optional(),\n    start_coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/text-editor_20241022.ts\n\n\nvar textEditor_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20241022\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250124.ts\n\n\nvar textEditor_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250124\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250429.ts\n\n\nvar textEditor_20250429 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250429\",\n  name: \"str_replace_based_edit_tool\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/anthropic-tools.ts\nvar anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   */\n  textEditor_20250429,\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305\n};\n\n// src/anthropic-provider.ts\nfunction createAnthropic(options = {}) {\n  var _a;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.anthropic.com/v1\";\n  const getHeaders = () => ({\n    \"anthropic-version\": \"2023-06-01\",\n    \"x-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"ANTHROPIC_API_KEY\",\n      description: \"Anthropic\"\n    }),\n    ...options.headers\n  });\n  const createChatModel = (modelId) => {\n    var _a2;\n    return new AnthropicMessagesLanguageModel(modelId, {\n      provider: \"anthropic.messages\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n      supportedUrls: () => ({\n        \"image/*\": [/^https?:\\/\\/.*$/]\n      })\n    });\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Anthropic model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n  provider.textEmbeddingModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"textEmbeddingModel\" });\n  };\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.tools = anthropicTools;\n  return provider;\n}\nvar anthropic = createAnthropic();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@ai-sdk+anthropic@2.0.17_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@ai-sdk+anthropic@2.0.17_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+anthropic@2.0.17_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anthropic: () => (/* binding */ anthropic),\n/* harmony export */   createAnthropic: () => (/* binding */ createAnthropic)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.9_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/index.js\");\n// src/anthropic-provider.ts\n\n\n\n// src/anthropic-messages-language-model.ts\n\n\n\n\n// src/anthropic-error.ts\n\n\nvar anthropicErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n});\nvar anthropicFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/anthropic-messages-options.ts\n\nvar anthropicFilePartProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Enable citations for this document\n     */\n    enabled: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()\n  }).optional(),\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nvar anthropicProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  sendReasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"enabled\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"disabled\")]),\n    budgetTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n  }).optional(),\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Cache control settings for this message.\n   * See https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching\n   */\n  cacheControl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"ephemeral\"),\n    ttl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"5m\"), zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"1h\")]).optional()\n  }).optional()\n});\n\n// src/anthropic-prepare-tools.ts\n\n\n// src/get-cache-control.ts\nfunction getCacheControl(providerMetadata) {\n  var _a;\n  const anthropic2 = providerMetadata == null ? void 0 : providerMetadata.anthropic;\n  const cacheControlValue = (_a = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a : anthropic2 == null ? void 0 : anthropic2.cache_control;\n  return cacheControlValue;\n}\n\n// src/tool/web-search_20250305.ts\n\n\nvar webSearch_20250305ArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearch_20250305OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    pageAge: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    encryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  })\n);\nvar factory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.web_search_20250305\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: webSearch_20250305OutputSchema\n});\nvar webSearch_20250305 = (args = {}) => {\n  return factory(args);\n};\n\n// src/anthropic-prepare-tools.ts\nfunction isWebSearchTool(tool) {\n  return typeof tool === \"object\" && tool !== null && \"type\" in tool && tool.type === \"web_search_20250305\";\n}\nfunction prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  const betas = /* @__PURE__ */ new Set();\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n  }\n  const anthropicTools2 = [];\n  for (const tool of tools) {\n    if (isWebSearchTool(tool)) {\n      anthropicTools2.push(tool);\n      continue;\n    }\n    switch (tool.type) {\n      case \"function\":\n        const cacheControl = getCacheControl(tool.providerOptions);\n        anthropicTools2.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl\n        });\n        break;\n      case \"provider-defined\":\n        switch (tool.id) {\n          case \"anthropic.computer_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20250124\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.computer_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"computer\",\n              type: \"computer_20241022\",\n              display_width_px: tool.args.displayWidthPx,\n              display_height_px: tool.args.displayHeightPx,\n              display_number: tool.args.displayNumber\n            });\n            break;\n          case \"anthropic.text_editor_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20250124\"\n            });\n            break;\n          case \"anthropic.text_editor_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"str_replace_editor\",\n              type: \"text_editor_20241022\"\n            });\n            break;\n          case \"anthropic.text_editor_20250429\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"str_replace_based_edit_tool\",\n              type: \"text_editor_20250429\"\n            });\n            break;\n          case \"anthropic.bash_20250124\":\n            betas.add(\"computer-use-2025-01-24\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20250124\"\n            });\n            break;\n          case \"anthropic.bash_20241022\":\n            betas.add(\"computer-use-2024-10-22\");\n            anthropicTools2.push({\n              name: \"bash\",\n              type: \"bash_20241022\"\n            });\n            break;\n          case \"anthropic.web_search_20250305\": {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools2.push({\n              type: \"web_search_20250305\",\n              name: \"web_search\",\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"anthropic.code_execution_20250522\": {\n            betas.add(\"code-execution-2025-05-22\");\n            anthropicTools2.push({\n              type: \"code_execution_20250522\",\n              name: \"code_execution\"\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: \"unsupported-tool\", tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools2,\n      toolChoice: disableParallelToolUse ? { type: \"auto\", disable_parallel_tool_use: disableParallelToolUse } : void 0,\n      toolWarnings,\n      betas\n    };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"auto\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"required\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"any\",\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    case \"none\":\n      return { tools: void 0, toolChoice: void 0, toolWarnings, betas };\n    case \"tool\":\n      return {\n        tools: anthropicTools2,\n        toolChoice: {\n          type: \"tool\",\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse\n        },\n        toolWarnings,\n        betas\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/convert-to-anthropic-messages-prompt.ts\n\n\n\n// src/tool/code-execution_20250522.ts\n\n\nvar codeExecution_20250522OutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n  stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar factory2 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"anthropic.code_execution_20250522\",\n  name: \"code_execution\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  outputSchema: codeExecution_20250522OutputSchema\n});\nvar codeExecution_20250522 = (args = {}) => {\n  return factory2(args);\n};\n\n// src/convert-to-anthropic-messages-prompt.ts\nfunction convertToString(data) {\n  if (typeof data === \"string\") {\n    return Buffer.from(data, \"base64\").toString(\"utf-8\");\n  }\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n  if (data instanceof URL) {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n      functionality: \"URL-based text documents are not supported for citations\"\n    });\n  }\n  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`\n  });\n}\nasync function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings\n}) {\n  var _a, _b, _c, _d, _e;\n  const betas = /* @__PURE__ */ new Set();\n  const blocks = groupIntoBlocks(prompt);\n  let system = void 0;\n  const messages = [];\n  async function shouldEnableCitations(providerMetadata) {\n    var _a2, _b2;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return (_b2 = (_a2 = anthropicOptions == null ? void 0 : anthropicOptions.citations) == null ? void 0 : _a2.enabled) != null ? _b2 : false;\n  }\n  async function getDocumentMetadata(providerMetadata) {\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions\n    });\n    return {\n      title: anthropicOptions == null ? void 0 : anthropicOptions.title,\n      context: anthropicOptions == null ? void 0 : anthropicOptions.context\n    };\n  }\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n    switch (type) {\n      case \"system\": {\n        if (system != null) {\n          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n            functionality: \"Multiple system messages that are separated by user/assistant messages\"\n          });\n        }\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: \"text\",\n          text: content,\n          cache_control: getCacheControl(providerOptions)\n        }));\n        break;\n      }\n      case \"user\": {\n        const anthropicContent = [];\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case \"user\": {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n                const isLastPart = j === content.length - 1;\n                const cacheControl = (_a = getCacheControl(part.providerOptions)) != null ? _a : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                switch (part.type) {\n                  case \"text\": {\n                    anthropicContent.push({\n                      type: \"text\",\n                      text: part.text,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  case \"file\": {\n                    if (part.mediaType.startsWith(\"image/\")) {\n                      anthropicContent.push({\n                        type: \"image\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType,\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"application/pdf\") {\n                      betas.add(\"pdfs-2024-09-25\");\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"base64\",\n                          media_type: \"application/pdf\",\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)\n                        },\n                        title: (_b = metadata.title) != null ? _b : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else if (part.mediaType === \"text/plain\") {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions\n                      );\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions\n                      );\n                      anthropicContent.push({\n                        type: \"document\",\n                        source: part.data instanceof URL ? {\n                          type: \"url\",\n                          url: part.data.toString()\n                        } : {\n                          type: \"text\",\n                          media_type: \"text/plain\",\n                          data: convertToString(part.data)\n                        },\n                        title: (_c = metadata.title) != null ? _c : part.filename,\n                        ...metadata.context && { context: metadata.context },\n                        ...enableCitations && {\n                          citations: { enabled: true }\n                        },\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`\n                      });\n                    }\n                    break;\n                  }\n                }\n              }\n              break;\n            }\n            case \"tool\": {\n              for (let i2 = 0; i2 < content.length; i2++) {\n                const part = content[i2];\n                const isLastPart = i2 === content.length - 1;\n                const cacheControl = (_d = getCacheControl(part.providerOptions)) != null ? _d : isLastPart ? getCacheControl(message.providerOptions) : void 0;\n                const output = part.output;\n                let contentValue;\n                switch (output.type) {\n                  case \"content\":\n                    contentValue = output.value.map((contentPart) => {\n                      switch (contentPart.type) {\n                        case \"text\":\n                          return {\n                            type: \"text\",\n                            text: contentPart.text,\n                            cache_control: void 0\n                          };\n                        case \"media\": {\n                          if (contentPart.mediaType.startsWith(\"image/\")) {\n                            return {\n                              type: \"image\",\n                              source: {\n                                type: \"base64\",\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data\n                              },\n                              cache_control: void 0\n                            };\n                          }\n                          throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case \"text\":\n                  case \"error-text\":\n                    contentValue = output.value;\n                    break;\n                  case \"json\":\n                  case \"error-json\":\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n                anthropicContent.push({\n                  type: \"tool_result\",\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error: output.type === \"error-text\" || output.type === \"error-json\" ? true : void 0,\n                  cache_control: cacheControl\n                });\n              }\n              break;\n            }\n            default: {\n              const _exhaustiveCheck = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n        messages.push({ role: \"user\", content: anthropicContent });\n        break;\n      }\n      case \"assistant\": {\n        const anthropicContent = [];\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n            const cacheControl = (_e = getCacheControl(part.providerOptions)) != null ? _e : isLastContentPart ? getCacheControl(message.providerOptions) : void 0;\n            switch (part.type) {\n              case \"text\": {\n                anthropicContent.push({\n                  type: \"text\",\n                  text: (\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text\n                  ),\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"reasoning\": {\n                if (sendReasoning) {\n                  const reasoningMetadata = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                    provider: \"anthropic\",\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema\n                  });\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: \"thinking\",\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: \"redacted_thinking\",\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl\n                      });\n                    } else {\n                      warnings.push({\n                        type: \"other\",\n                        message: \"unsupported reasoning metadata\"\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: \"other\",\n                      message: \"unsupported reasoning metadata\"\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: \"other\",\n                    message: \"sending reasoning content is disabled for this model\"\n                  });\n                }\n                break;\n              }\n              case \"tool-call\": {\n                if (part.providerExecuted) {\n                  if (part.toolName === \"web_search\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"web_search\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  if (part.toolName === \"code_execution\") {\n                    anthropicContent.push({\n                      type: \"server_tool_use\",\n                      id: part.toolCallId,\n                      name: \"code_execution\",\n                      input: part.input,\n                      cache_control: cacheControl\n                    });\n                    break;\n                  }\n                  warnings.push({\n                    type: \"other\",\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`\n                  });\n                  break;\n                }\n                anthropicContent.push({\n                  type: \"tool_use\",\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl\n                });\n                break;\n              }\n              case \"tool-result\": {\n                if (part.toolName === \"web_search\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value\n                  );\n                  anthropicContent.push({\n                    type: \"web_search_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map((result) => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type\n                    })),\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                if (part.toolName === \"code_execution\") {\n                  const output = part.output;\n                  if (output.type !== \"json\") {\n                    warnings.push({\n                      type: \"other\",\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`\n                    });\n                    break;\n                  }\n                  const codeExecutionOutput = codeExecution_20250522OutputSchema.parse(output.value);\n                  anthropicContent.push({\n                    type: \"code_execution_tool_result\",\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code\n                    },\n                    cache_control: cacheControl\n                  });\n                  break;\n                }\n                warnings.push({\n                  type: \"other\",\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`\n                });\n                break;\n              }\n            }\n          }\n        }\n        messages.push({ role: \"assistant\", content: anthropicContent });\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return {\n    prompt: { system, messages },\n    betas\n  };\n}\nfunction groupIntoBlocks(prompt) {\n  const blocks = [];\n  let currentBlock = void 0;\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case \"system\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"system\") {\n          currentBlock = { type: \"system\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"assistant\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"assistant\") {\n          currentBlock = { type: \"assistant\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"user\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      case \"tool\": {\n        if ((currentBlock == null ? void 0 : currentBlock.type) !== \"user\") {\n          currentBlock = { type: \"user\", messages: [] };\n          blocks.push(currentBlock);\n        }\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return blocks;\n}\n\n// src/map-anthropic-stop-reason.ts\nfunction mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool\n}) {\n  switch (finishReason) {\n    case \"pause_turn\":\n    case \"end_turn\":\n    case \"stop_sequence\":\n      return \"stop\";\n    case \"refusal\":\n      return \"content-filter\";\n    case \"tool_use\":\n      return isJsonResponseFromTool ? \"stop\" : \"tool-calls\";\n    case \"max_tokens\":\n      return \"length\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/anthropic-messages-language-model.ts\nvar citationSchemas = {\n  webSearchResult: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    encrypted_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n  }),\n  pageLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"page_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_page_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  charLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"char_location\"),\n    cited_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    document_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    document_title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    start_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    end_char_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  })\n};\nvar citationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nvar documentCitationSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation\n]);\nfunction processCitation(citation, citationDocuments, generateId3, onSource) {\n  if (citation.type === \"page_location\" || citation.type === \"char_location\") {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId3\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\nfunction createCitationSource(citation, citationDocuments, generateId3) {\n  var _a;\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n  const providerMetadata = citation.type === \"page_location\" ? {\n    citedText: citation.cited_text,\n    startPageNumber: citation.start_page_number,\n    endPageNumber: citation.end_page_number\n  } : {\n    citedText: citation.cited_text,\n    startCharIndex: citation.start_char_index,\n    endCharIndex: citation.end_char_index\n  };\n  return {\n    type: \"source\",\n    sourceType: \"document\",\n    id: generateId3(),\n    mediaType: documentInfo.mediaType,\n    title: (_a = citation.document_title) != null ? _a : documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata\n    }\n  };\n}\nvar AnthropicMessagesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    var _a;\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = (_a = config.generateId) != null ? _a : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId;\n  }\n  supportsUrl(url) {\n    return url.protocol === \"https:\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  get supportedUrls() {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).supportedUrls) == null ? void 0 : _b.call(_a)) != null ? _c : {};\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens = 4096,\n    // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c;\n    const warnings = [];\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"seed\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\") {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"responseFormat\",\n          details: \"JSON response format requires a schema. The response format is ignored.\"\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"tools\",\n          details: \"JSON response format does not support tools. The provided tools are ignored.\"\n        });\n      }\n    }\n    const jsonResponseTool = (responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null ? {\n      type: \"function\",\n      name: \"json\",\n      description: \"Respond with a JSON object.\",\n      inputSchema: responseFormat.schema\n    } : void 0;\n    const anthropicOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"anthropic\",\n      providerOptions,\n      schema: anthropicProviderOptions\n    });\n    const { prompt: messagesPrompt, betas: messagesBetas } = await convertToAnthropicMessagesPrompt({\n      prompt,\n      sendReasoning: (_a = anthropicOptions == null ? void 0 : anthropicOptions.sendReasoning) != null ? _a : true,\n      warnings\n    });\n    const isThinking = ((_b = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _b.type) === \"enabled\";\n    const thinkingBudget = (_c = anthropicOptions == null ? void 0 : anthropicOptions.thinking) == null ? void 0 : _c.budgetTokens;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n      // provider specific settings:\n      ...isThinking && {\n        thinking: { type: \"enabled\", budget_tokens: thinkingBudget }\n      },\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages\n    };\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"thinking requires a budget\"\n        });\n      }\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported when thinking is enabled\"\n        });\n      }\n      if (topK != null) {\n        baseArgs.top_k = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topK\",\n          details: \"topK is not supported when thinking is enabled\"\n        });\n      }\n      if (topP != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported when thinking is enabled\"\n        });\n      }\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n    const {\n      tools: anthropicTools2,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas\n    } = prepareTools(\n      jsonResponseTool != null ? {\n        tools: [jsonResponseTool],\n        toolChoice: { type: \"tool\", toolName: jsonResponseTool.name },\n        disableParallelToolUse: true\n      } : {\n        tools: tools != null ? tools : [],\n        toolChoice,\n        disableParallelToolUse: anthropicOptions == null ? void 0 : anthropicOptions.disableParallelToolUse\n      }\n    );\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools2,\n        tool_choice: anthropicToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null\n    };\n  }\n  async getHeaders({\n    betas,\n    headers\n  }) {\n    return (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(\n      await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.config.headers),\n      betas.size > 0 ? { \"anthropic-beta\": Array.from(betas).join(\",\") } : {},\n      headers\n    );\n  }\n  buildRequestUrl(isStreaming) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;\n  }\n  transformRequestBody(args) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this.config).transformRequestBody) == null ? void 0 : _b.call(_a, args)) != null ? _c : args;\n  }\n  extractCitationDocuments(prompt) {\n    const isCitationPart = (part) => {\n      var _a, _b;\n      if (part.type !== \"file\") {\n        return false;\n      }\n      if (part.mediaType !== \"application/pdf\" && part.mediaType !== \"text/plain\") {\n        return false;\n      }\n      const anthropic2 = (_a = part.providerOptions) == null ? void 0 : _a.anthropic;\n      const citationsConfig = anthropic2 == null ? void 0 : anthropic2.citations;\n      return (_b = citationsConfig == null ? void 0 : citationsConfig.enabled) != null ? _b : false;\n    };\n    return prompt.filter((message) => message.role === \"user\").flatMap((message) => message.content).filter(isCitationPart).map((part) => {\n      var _a;\n      const filePart = part;\n      return {\n        title: (_a = filePart.filename) != null ? _a : \"Untitled Document\",\n        filename: filePart.filename,\n        mediaType: filePart.mediaType\n      };\n    });\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e;\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        anthropicMessagesResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const content = [];\n    for (const part of response.content) {\n      switch (part.type) {\n        case \"text\": {\n          if (!usesJsonResponseTool) {\n            content.push({ type: \"text\", text: part.text });\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  (source) => content.push(source)\n                );\n              }\n            }\n          }\n          break;\n        }\n        case \"thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature\n              }\n            }\n          });\n          break;\n        }\n        case \"redacted_thinking\": {\n          content.push({\n            type: \"reasoning\",\n            text: \"\",\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data\n              }\n            }\n          });\n          break;\n        }\n        case \"tool_use\": {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool ? {\n              type: \"text\",\n              text: JSON.stringify(part.input)\n            } : {\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input)\n            }\n          );\n          break;\n        }\n        case \"server_tool_use\": {\n          if (part.name === \"web_search\" || part.name === \"code_execution\") {\n            content.push({\n              type: \"tool-call\",\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"web_search_tool_result\": {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              result: part.content.map((result) => {\n                var _a2;\n                return {\n                  url: result.url,\n                  title: result.title,\n                  pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                  encryptedContent: result.encrypted_content,\n                  type: result.type\n                };\n              }),\n              providerExecuted: true\n            });\n            for (const result of part.content) {\n              content.push({\n                type: \"source\",\n                sourceType: \"url\",\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: (_a = result.page_age) != null ? _a : null\n                  }\n                }\n              });\n            }\n          } else {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"web_search\",\n              isError: true,\n              result: {\n                type: \"web_search_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n        case \"code_execution_tool_result\": {\n          if (part.content.type === \"code_execution_result\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code\n              },\n              providerExecuted: true\n            });\n          } else if (part.content.type === \"code_execution_tool_result_error\") {\n            content.push({\n              type: \"tool-result\",\n              toolCallId: part.tool_use_id,\n              toolName: \"code_execution\",\n              isError: true,\n              result: {\n                type: \"code_execution_tool_result_error\",\n                errorCode: part.content.error_code\n              },\n              providerExecuted: true\n            });\n          }\n          break;\n        }\n      }\n    }\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: (_b = response.usage.cache_read_input_tokens) != null ? _b : void 0\n      },\n      request: { body: args },\n      response: {\n        id: (_c = response.id) != null ? _c : void 0,\n        modelId: (_d = response.model) != null ? _d : void 0,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage,\n          cacheCreationInputTokens: (_e = response.usage.cache_creation_input_tokens) != null ? _e : null\n        }\n      }\n    };\n  }\n  async doStream(options) {\n    const { args, warnings, betas, usesJsonResponseTool } = await this.getArgs(options);\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n    const body = { ...args, stream: true };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        anthropicMessagesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const contentBlocks = {};\n    let providerMetadata = void 0;\n    let blockType = void 0;\n    const generateId3 = this.generateId;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            switch (value.type) {\n              case \"ping\": {\n                return;\n              }\n              case \"content_block_start\": {\n                const contentBlockType = value.content_block.type;\n                blockType = contentBlockType;\n                switch (contentBlockType) {\n                  case \"text\": {\n                    contentBlocks[value.index] = { type: \"text\" };\n                    controller.enqueue({\n                      type: \"text-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index)\n                    });\n                    return;\n                  }\n                  case \"redacted_thinking\": {\n                    contentBlocks[value.index] = { type: \"reasoning\" };\n                    controller.enqueue({\n                      type: \"reasoning-start\",\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data\n                        }\n                      }\n                    });\n                    return;\n                  }\n                  case \"tool_use\": {\n                    contentBlocks[value.index] = usesJsonResponseTool ? { type: \"text\" } : {\n                      type: \"tool-call\",\n                      toolCallId: value.content_block.id,\n                      toolName: value.content_block.name,\n                      input: \"\"\n                    };\n                    controller.enqueue(\n                      usesJsonResponseTool ? { type: \"text-start\", id: String(value.index) } : {\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name\n                      }\n                    );\n                    return;\n                  }\n                  case \"server_tool_use\": {\n                    if (value.content_block.name === \"web_search\" || value.content_block.name === \"code_execution\") {\n                      contentBlocks[value.index] = {\n                        type: \"tool-call\",\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: \"\",\n                        providerExecuted: true\n                      };\n                      controller.enqueue({\n                        type: \"tool-input-start\",\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"web_search_tool_result\": {\n                    const part = value.content_block;\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        result: part.content.map((result) => {\n                          var _a2;\n                          return {\n                            url: result.url,\n                            title: result.title,\n                            pageAge: (_a2 = result.page_age) != null ? _a2 : null,\n                            encryptedContent: result.encrypted_content,\n                            type: result.type\n                          };\n                        }),\n                        providerExecuted: true\n                      });\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: \"source\",\n                          sourceType: \"url\",\n                          id: generateId3(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: (_a = result.page_age) != null ? _a : null\n                            }\n                          }\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"web_search\",\n                        isError: true,\n                        result: {\n                          type: \"web_search_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  case \"code_execution_tool_result\": {\n                    const part = value.content_block;\n                    if (part.content.type === \"code_execution_result\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code\n                        },\n                        providerExecuted: true\n                      });\n                    } else if (part.content.type === \"code_execution_tool_result_error\") {\n                      controller.enqueue({\n                        type: \"tool-result\",\n                        toolCallId: part.tool_use_id,\n                        toolName: \"code_execution\",\n                        isError: true,\n                        result: {\n                          type: \"code_execution_tool_result_error\",\n                          errorCode: part.content.error_code\n                        },\n                        providerExecuted: true\n                      });\n                    }\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"content_block_stop\": {\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n                  switch (contentBlock.type) {\n                    case \"text\": {\n                      controller.enqueue({\n                        type: \"text-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"reasoning\": {\n                      controller.enqueue({\n                        type: \"reasoning-end\",\n                        id: String(value.index)\n                      });\n                      break;\n                    }\n                    case \"tool-call\":\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: \"tool-input-end\",\n                          id: contentBlock.toolCallId\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n                  delete contentBlocks[value.index];\n                }\n                blockType = void 0;\n                return;\n              }\n              case \"content_block_delta\": {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case \"text_delta\": {\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n                    controller.enqueue({\n                      type: \"text-delta\",\n                      id: String(value.index),\n                      delta: value.delta.text\n                    });\n                    return;\n                  }\n                  case \"thinking_delta\": {\n                    controller.enqueue({\n                      type: \"reasoning-delta\",\n                      id: String(value.index),\n                      delta: value.delta.thinking\n                    });\n                    return;\n                  }\n                  case \"signature_delta\": {\n                    if (blockType === \"thinking\") {\n                      controller.enqueue({\n                        type: \"reasoning-delta\",\n                        id: String(value.index),\n                        delta: \"\",\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature\n                          }\n                        }\n                      });\n                    }\n                    return;\n                  }\n                  case \"input_json_delta\": {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n                    if (usesJsonResponseTool) {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"text\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"text-delta\",\n                        id: String(value.index),\n                        delta\n                      });\n                    } else {\n                      if ((contentBlock == null ? void 0 : contentBlock.type) !== \"tool-call\") {\n                        return;\n                      }\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: contentBlock.toolCallId,\n                        delta\n                      });\n                      contentBlock.input += delta;\n                    }\n                    return;\n                  }\n                  case \"citations_delta\": {\n                    const citation = value.delta.citation;\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId3,\n                      (source) => controller.enqueue(source)\n                    );\n                    return;\n                  }\n                  default: {\n                    const _exhaustiveCheck = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`\n                    );\n                  }\n                }\n              }\n              case \"message_start\": {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens = (_b = value.message.usage.cache_read_input_tokens) != null ? _b : void 0;\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage,\n                    cacheCreationInputTokens: (_c = value.message.usage.cache_creation_input_tokens) != null ? _c : null\n                  }\n                };\n                controller.enqueue({\n                  type: \"response-metadata\",\n                  id: (_d = value.message.id) != null ? _d : void 0,\n                  modelId: (_e = value.message.model) != null ? _e : void 0\n                });\n                return;\n              }\n              case \"message_delta\": {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens = ((_f = usage.inputTokens) != null ? _f : 0) + ((_g = value.usage.output_tokens) != null ? _g : 0);\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool\n                });\n                return;\n              }\n              case \"message_stop\": {\n                controller.enqueue({\n                  type: \"finish\",\n                  finishReason,\n                  usage,\n                  providerMetadata\n                });\n                return;\n              }\n              case \"error\": {\n                controller.enqueue({ type: \"error\", error: value.error });\n                return;\n              }\n              default: {\n                const _exhaustiveCheck = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar anthropicMessagesResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        citations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(citationSchema).optional()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  ),\n  stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n    input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  })\n});\nvar anthropicMessagesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_start\"),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.looseObject({\n        input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        cache_creation_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        cache_read_input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n      })\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_start\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    content_block: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"redacted_thinking\"),\n        data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"server_tool_use\"),\n        id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        input: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()).nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_result\"),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              page_age: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n            })\n          ),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result\"),\n        tool_use_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_result\"),\n            stdout: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            stderr: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            return_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n          }),\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_execution_tool_result_error\"),\n            error_code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ])\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_delta\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"input_json_delta\"),\n        partial_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"text_delta\"),\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"thinking_delta\"),\n        thinking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"signature_delta\"),\n        signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"citations_delta\"),\n        citation: citationSchema\n      })\n    ])\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"content_block_stop\"),\n    index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n    error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_delta\"),\n    delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ stop_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish() }),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() })\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message_stop\")\n  }),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"ping\")\n  })\n]);\nvar anthropicReasoningMetadataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  redactedData: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/tool/bash_20241022.ts\n\n\nvar bash_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20241022\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/bash_20250124.ts\n\n\nvar bash_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.bash_20250124\",\n  name: \"bash\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].string(),\n    restart: zod_v4__WEBPACK_IMPORTED_MODULE_3__[\"default\"].boolean().optional()\n  })\n});\n\n// src/tool/computer_20241022.ts\n\n\nvar computer_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20241022\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"type\",\n      \"mouse_move\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"screenshot\",\n      \"cursor_position\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/computer_20250124.ts\n\n\nvar computer_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.computer_20250124\",\n  name: \"computer\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"key\",\n      \"hold_key\",\n      \"type\",\n      \"cursor_position\",\n      \"mouse_move\",\n      \"left_mouse_down\",\n      \"left_mouse_up\",\n      \"left_click\",\n      \"left_click_drag\",\n      \"right_click\",\n      \"middle_click\",\n      \"double_click\",\n      \"triple_click\",\n      \"scroll\",\n      \"wait\",\n      \"screenshot\"\n    ]),\n    coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_amount: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scroll_direction: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"up\", \"down\", \"left\", \"right\"]).optional(),\n    start_coordinate: zod_v4__WEBPACK_IMPORTED_MODULE_0__.tuple([zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()]).optional(),\n    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  })\n});\n\n// src/tool/text-editor_20241022.ts\n\n\nvar textEditor_20241022 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20241022\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250124.ts\n\n\nvar textEditor_20250124 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250124\",\n  name: \"str_replace_editor\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\", \"undo_edit\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/tool/text-editor_20250429.ts\n\n\nvar textEditor_20250429 = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"anthropic.text_editor_20250429\",\n  name: \"str_replace_based_edit_tool\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    command: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"view\", \"create\", \"str_replace\", \"insert\"]),\n    path: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file_text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    insert_line: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().optional(),\n    new_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    old_str: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    view_range: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int()).optional()\n  })\n});\n\n// src/anthropic-tools.ts\nvar anthropicTools = {\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20241022,\n  /**\n   * The bash tool enables Claude to execute shell commands in a persistent bash session,\n   * allowing system operations, script execution, and command-line automation.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `bash`.\n   */\n  bash_20250124,\n  /**\n   * Claude can analyze data, create visualizations, perform complex calculations,\n   * run system commands, create and edit files, and process uploaded files directly within\n   * the API conversation.\n   *\n   * The code execution tool allows Claude to run Bash commands and manipulate files,\n   * including writing code, in a secure, sandboxed environment.\n   *\n   * Tool name must be `code_execution`.\n   */\n  codeExecution_20250522,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n  /**\n   * Claude can interact with computer environments through the computer use tool, which\n   * provides screenshot capabilities and mouse/keyboard control for autonomous desktop interaction.\n   *\n   * Image results are supported.\n   *\n   * Tool name must be `computer`.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20241022,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Tool name must be `str_replace_editor`.\n   */\n  textEditor_20250124,\n  /**\n   * Claude can use an Anthropic-defined text editor tool to view and modify text files,\n   * helping you debug, fix, and improve your code or other text documents. This allows Claude\n   * to directly interact with your files, providing hands-on assistance rather than just suggesting changes.\n   *\n   * Note: This version does not support the \"undo_edit\" command.\n   *\n   * Tool name must be `str_replace_based_edit_tool`.\n   */\n  textEditor_20250429,\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   *\n   * Tool name must be `web_search`.\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305\n};\n\n// src/anthropic-provider.ts\nfunction createAnthropic(options = {}) {\n  var _a;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.anthropic.com/v1\";\n  const getHeaders = () => ({\n    \"anthropic-version\": \"2023-06-01\",\n    \"x-api-key\": (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"ANTHROPIC_API_KEY\",\n      description: \"Anthropic\"\n    }),\n    ...options.headers\n  });\n  const createChatModel = (modelId) => {\n    var _a2;\n    return new AnthropicMessagesLanguageModel(modelId, {\n      provider: \"anthropic.messages\",\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: (_a2 = options.generateId) != null ? _a2 : _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId,\n      supportedUrls: () => ({\n        \"image/*\": [/^https?:\\/\\/.*$/]\n      })\n    });\n  };\n  const provider = function(modelId) {\n    if (new.target) {\n      throw new Error(\n        \"The Anthropic model function cannot be called with the new keyword.\"\n      );\n    }\n    return createChatModel(modelId);\n  };\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n  provider.textEmbeddingModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"textEmbeddingModel\" });\n  };\n  provider.imageModel = (modelId) => {\n    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.NoSuchModelError({ modelId, modelType: \"imageModel\" });\n  };\n  provider.tools = anthropicTools;\n  return provider;\n}\nvar anthropic = createAnthropic();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@ai-sdk+anthropic@2.0.17_zod@3.25.76/node_modules/@ai-sdk/anthropic/dist/index.mjs\n");

/***/ })

};
;