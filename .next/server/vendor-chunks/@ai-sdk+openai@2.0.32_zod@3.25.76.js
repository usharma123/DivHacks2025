"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ai-sdk+openai@2.0.32_zod@3.25.76";
exports.ids = ["vendor-chunks/@ai-sdk+openai@2.0.32_zod@3.25.76"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@ai-sdk+openai@2.0.32_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+openai@2.0.32_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.9_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(rsc)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/coerce.js\");\n// src/openai-provider.ts\n\n\n// src/chat/openai-chat-language-model.ts\n\n\n\n\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/chat/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = \"system\"\n}) {\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && content[0].type === \"text\") {\n          messages.push({ role: \"user\", content: content[0].text });\n          break;\n        }\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a, _b, _c;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url: part.data instanceof URL ? part.data.toString() : `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`,\n                      // OpenAI specific extension: image detail\n                      detail: (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.imageDetail\n                    }\n                  };\n                } else if (part.mediaType.startsWith(\"audio/\")) {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"audio file parts with URLs\"\n                    });\n                  }\n                  switch (part.mediaType) {\n                    case \"audio/wav\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"wav\"\n                        }\n                      };\n                    }\n                    case \"audio/mp3\":\n                    case \"audio/mpeg\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"mp3\"\n                        }\n                      };\n                    }\n                    default: {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`\n                      });\n                    }\n                  }\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"PDF file parts with URLs\"\n                    });\n                  }\n                  return {\n                    type: \"file\",\n                    file: typeof part.data === \"string\" && part.data.startsWith(\"file-\") ? { file_id: part.data } : {\n                      filename: (_c = part.filename) != null ? _c : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\n\n// src/chat/get-response-metadata.ts\nfunction getResponseMetadata({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/chat/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/openai-chat-options.ts\n\nvar openaiProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in\n   * the GPT tokenizer) to an associated bias value from -100 to 100.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_3__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional(),\n  /**\n   * Whether to enable parallel function calling during tool use. Default to true.\n   */\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to\n   * monitor and detect abuse.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Reasoning effort for reasoning models. Defaults to `medium`.\n   */\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"minimal\", \"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * Maximum number of completion tokens to generate. Useful for reasoning models.\n   */\n  maxCompletionTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Whether to enable persistence in responses API.\n   */\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Metadata to associate with the request.\n   */\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(64), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(512)).optional(),\n  /**\n   * Parameters for prediction mode.\n   */\n  prediction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()).optional(),\n  /**\n   * Whether to use structured outputs.\n   *\n   * @default true\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Service tier for the request.\n   * - 'auto': Default service tier\n   * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n   * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n   *\n   * @default 'auto'\n   */\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).optional(),\n  /**\n   * Whether to use strict JSON schema validation.\n   *\n   * @default false\n   */\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Controls the verbosity of the model's responses.\n   * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n   */\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n   * Useful for improving cache hit rates and working around automatic caching issues.\n   */\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * A stable identifier used to help detect users of your application\n   * that may be violating OpenAI's usage policies. The IDs should be a\n   * string that uniquely identifies each user. We recommend hashing their\n   * username or email address, in order to avoid sending us any identifying\n   * information.\n   */\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/chat/openai-chat-prepare-tools.ts\n\nfunction prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : void 0\n          }\n        });\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: {\n          type: \"function\",\n          function: {\n            name: toolChoice.toolName\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/chat/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiProviderOptions\n    })) != null ? _a : {};\n    const structuredOutputs = (_b = openaiOptions.structuredOutputs) != null ? _b : true;\n    if (topK != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !structuredOutputs) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format schema is only supported with structuredOutputs\"\n      });\n    }\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId)\n      }\n    );\n    warnings.push(...messageWarnings);\n    const strictJsonSchema = (_c = openaiOptions.strictJsonSchema) != null ? _c : false;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs: openaiOptions.logprobs === true || typeof openaiOptions.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof openaiOptions.logprobs === \"number\" ? openaiOptions.logprobs : typeof openaiOptions.logprobs === \"boolean\" ? openaiOptions.logprobs ? 0 : void 0 : void 0,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? structuredOutputs && responseFormat.schema != null ? {\n        type: \"json_schema\",\n        json_schema: {\n          schema: responseFormat.schema,\n          strict: strictJsonSchema,\n          name: (_d = responseFormat.name) != null ? _d : \"response\",\n          description: responseFormat.description\n        }\n      } : { type: \"json_object\" } : void 0,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n      // messages:\n      messages\n    };\n    if (isReasoningModel(this.modelId)) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"frequencyPenalty\",\n          details: \"frequencyPenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"presencePenalty\",\n          details: \"presencePenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logitBias is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"topLogprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = void 0;\n      }\n    } else if (this.modelId.startsWith(\"gpt-4o-search-preview\") || this.modelId.startsWith(\"gpt-4o-mini-search-preview\")) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for the search preview models and has been removed.\"\n        });\n      }\n    }\n    if (openaiOptions.serviceTier === \"flex\" && !supportsFlexProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    if (openaiOptions.serviceTier === \"priority\" && !supportsPriorityProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema\n    });\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const { args: body, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiChatResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const content = [];\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: \"text\", text });\n    }\n    for (const toolCall of (_a = choice.message.tool_calls) != null ? _a : []) {\n      content.push({\n        type: \"tool-call\",\n        toolCallId: (_b = toolCall.id) != null ? _b : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments\n      });\n    }\n    for (const annotation of (_c = choice.message.annotations) != null ? _c : []) {\n      content.push({\n        type: \"source\",\n        sourceType: \"url\",\n        id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        url: annotation.url,\n        title: annotation.title\n      });\n    }\n    const completionTokenDetails = (_d = response.usage) == null ? void 0 : _d.completion_tokens_details;\n    const promptTokenDetails = (_e = response.usage) == null ? void 0 : _e.prompt_tokens_details;\n    const providerMetadata = { openai: {} };\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n    }\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n    }\n    if (((_f = choice.logprobs) == null ? void 0 : _f.content) != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_h = (_g = response.usage) == null ? void 0 : _g.prompt_tokens) != null ? _h : void 0,\n        outputTokens: (_j = (_i = response.usage) == null ? void 0 : _i.completion_tokens) != null ? _j : void 0,\n        totalTokens: (_l = (_k = response.usage) == null ? void 0 : _k.total_tokens) != null ? _l : void 0,\n        reasoningTokens: (_m = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null ? _m : void 0,\n        cachedInputTokens: (_n = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null ? _n : void 0\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiChatChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n    const providerMetadata = { openai: {} };\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata(value)\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = (_a = value.usage.prompt_tokens) != null ? _a : void 0;\n              usage.outputTokens = (_b = value.usage.completion_tokens) != null ? _b : void 0;\n              usage.totalTokens = (_c = value.usage.total_tokens) != null ? _c : void 0;\n              usage.reasoningTokens = (_e = (_d = value.usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : void 0;\n              usage.cachedInputTokens = (_g = (_f = value.usage.prompt_tokens_details) == null ? void 0 : _f.cached_tokens) != null ? _g : void 0;\n              if (((_h = value.usage.completion_tokens_details) == null ? void 0 : _h.accepted_prediction_tokens) != null) {\n                providerMetadata.openai.acceptedPredictionTokens = (_i = value.usage.completion_tokens_details) == null ? void 0 : _i.accepted_prediction_tokens;\n              }\n              if (((_j = value.usage.completion_tokens_details) == null ? void 0 : _j.rejected_prediction_tokens) != null) {\n                providerMetadata.openai.rejectedPredictionTokens = (_k = value.usage.completion_tokens_details) == null ? void 0 : _k.rejected_prediction_tokens;\n              }\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n            if (((_l = choice == null ? void 0 : choice.logprobs) == null ? void 0 : _l.content) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: \"text-start\", id: \"0\" });\n                isActiveText = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: delta.content\n              });\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_m = toolCallDelta.function) == null ? void 0 : _m.name) == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name\n                  });\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_n = toolCallDelta.function.arguments) != null ? _n : \"\"\n                    },\n                    hasFinished: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (((_o = toolCall2.function) == null ? void 0 : _o.name) != null && ((_p = toolCall2.function) == null ? void 0 : _p.arguments) != null) {\n                    if (toolCall2.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: toolCall2.id,\n                        delta: toolCall2.function.arguments\n                      });\n                    }\n                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall2.function.arguments)) {\n                      controller.enqueue({\n                        type: \"tool-input-end\",\n                        id: toolCall2.id\n                      });\n                      controller.enqueue({\n                        type: \"tool-call\",\n                        toolCallId: (_q = toolCall2.id) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                        toolName: toolCall2.function.name,\n                        input: toolCall2.function.arguments\n                      });\n                      toolCall2.hasFinished = true;\n                    }\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n                if (((_r = toolCallDelta.function) == null ? void 0 : _r.arguments) != null) {\n                  toolCall.function.arguments += (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_u = toolCallDelta.function.arguments) != null ? _u : \"\"\n                });\n                if (((_v = toolCall.function) == null ? void 0 : _v.name) != null && ((_w = toolCall.function) == null ? void 0 : _w.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.id\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_x = toolCall.id) != null ? _x : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              }\n            }\n          },\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata != null ? { providerMetadata } : {}\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar openaiTokenUsageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish(),\n  completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish()\n}).nullish();\nvar openaiChatResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\").nullish(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n            function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          })\n        ).nullish(),\n        annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n            start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ).nullish()\n      }),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n              })\n            )\n          })\n        ).nullish()\n      }).nullish(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ),\n  usage: openaiTokenUsageSchema\n});\nvar openaiChatChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          role: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"assistant\"]).nullish(),\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\").nullish(),\n              function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              })\n            })\n          ).nullish(),\n          annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n              start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          ).nullish()\n        }).nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                })\n              )\n            })\n          ).nullish()\n        }).nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    ),\n    usage: openaiTokenUsageSchema\n  }),\n  openaiErrorDataSchema\n]);\nfunction isReasoningModel(modelId) {\n  return (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\")) && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsFlexProcessing(modelId) {\n  return modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsPriorityProcessing(modelId) {\n  return modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n}\nfunction getSystemMessageMode(modelId) {\n  var _a, _b;\n  if (!isReasoningModel(modelId)) {\n    return \"system\";\n  }\n  return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n  \"o1-mini\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-mini-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  o3: {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini-2025-01-31\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  }\n};\n\n// src/completion/openai-completion-language-model.ts\n\n\n\n// src/completion/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({\n  prompt,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  let text = \"\";\n  if (prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidPromptError({\n          message: \"Unexpected system message in prompt: ${content}\",\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n          }\n        }).filter(Boolean).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"tool-call\": {\n              throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                functionality: \"tool-call messages\"\n              });\n            }\n          }\n        }).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text,\n    stopSequences: [`\n${user}:`]\n  };\n}\n\n// src/completion/get-response-metadata.ts\nfunction getResponseMetadata2({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/completion/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason2(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/completion/openai-completion-options.ts\n\nvar openaiCompletionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  Echo back the prompt in addition to the completion.\n     */\n  echo: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n  Modify the likelihood of specified tokens appearing in the completion.\n  \n  Accepts a JSON object that maps tokens (specified by their token ID in\n  the GPT tokenizer) to an associated bias value from -100 to 100. You\n  can use this tokenizer tool to convert text to token IDs. Mathematically,\n  the bias is added to the logits generated by the model prior to sampling.\n  The exact effect will vary per model, but values between -1 and 1 should\n  decrease or increase likelihood of selection; values like -100 or 100\n  should result in a ban or exclusive selection of the relevant token.\n  \n  As an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\n  token from being generated.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n  The suffix that comes after a completion of inserted text.\n   */\n  suffix: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  Return the log probabilities of the tokens. Including logprobs will increase\n  the response size and can slow down response times. However, it can\n  be useful to better understand how the model is behaving.\n  Setting to true will return the log probabilities of the tokens that\n  were generated.\n  Setting to a number will return the log probabilities of the top n\n  tokens that were generated.\n     */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional()\n});\n\n// src/completion/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      // No URLs are supported for completion models.\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get providerOptionsName() {\n    return this.config.provider.split(\".\")[0].trim();\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openaiOptions = {\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: \"openai\",\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      }),\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      })\n    };\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (tools == null ? void 0 : tools.length) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"tools\" });\n    }\n    if (toolChoice != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"toolChoice\" });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format is not supported.\"\n      });\n    }\n    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt });\n    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs: (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? 0 : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === false ? void 0 : openaiOptions == null ? void 0 : openaiOptions.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n        // prompt:\n        prompt: completionPrompt,\n        // stop sequences:\n        stop: stop.length > 0 ? stop : void 0\n      },\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const { args, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const providerMetadata = { openai: {} };\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n    return {\n      content: [{ type: \"text\", text: choice.text }],\n      usage: {\n        inputTokens: (_a = response.usage) == null ? void 0 : _a.prompt_tokens,\n        outputTokens: (_b = response.usage) == null ? void 0 : _b.completion_tokens,\n        totalTokens: (_c = response.usage) == null ? void 0 : _c.total_tokens\n      },\n      finishReason: mapOpenAIFinishReason2(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata2(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const providerMetadata = { openai: {} };\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata2(value)\n              });\n              controller.enqueue({ type: \"text-start\", id: \"0\" });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason2(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.logprobs) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n            if ((choice == null ? void 0 : choice.text) != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: choice.text\n              });\n            }\n          },\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              providerMetadata,\n              usage\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar openaiCompletionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n        token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n        top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n      }).nullish()\n    })\n  ),\n  usage: usageSchema.nullish()\n});\nvar openaiCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n          token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n          top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n        }).nullish()\n      })\n    ),\n    usage: usageSchema.nullish()\n  }),\n  openaiErrorDataSchema\n]);\n\n// src/embedding/openai-embedding-model.ts\n\n\n\n\n// src/embedding/openai-embedding-options.ts\n\nvar openaiEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  The number of dimensions the resulting output embeddings should have.\n  Only supported in text-embedding-3 and later models.\n     */\n  dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n  */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/embedding/openai-embedding-model.ts\nvar OpenAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/embeddings\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: \"float\",\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.data.map((item) => item.embedding),\n      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar openaiTextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish()\n});\n\n// src/image/openai-image-model.ts\n\n\n\n// src/image/openai-image-options.ts\nvar modelMaxImagesPerCall = {\n  \"dall-e-3\": 1,\n  \"dall-e-2\": 10,\n  \"gpt-image-1\": 10\n};\nvar hasDefaultResponseFormat = /* @__PURE__ */ new Set([\"gpt-image-1\"]);\n\n// src/image/openai-image-model.ts\nvar OpenAIImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    if (aspectRatio != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/images/generations\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(_d = providerOptions.openai) != null ? _d : {},\n        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: \"b64_json\" } : {}\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.data.map((item) => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(\n            (item) => item.revised_prompt ? {\n              revisedPrompt: item.revised_prompt\n            } : null\n          )\n        }\n      }\n    };\n  }\n};\nvar openaiImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ b64_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), revised_prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional() })\n  )\n});\n\n// src/tool/code-interpreter.ts\n\n\nvar codeInterpreterInputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  containerId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar codeInterpreterOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n    ])\n  ).nullish()\n});\nvar codeInterpreterArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  container: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      fileIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n    })\n  ]).optional()\n});\nvar codeInterpreterToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.code_interpreter\",\n  name: \"code_interpreter\",\n  inputSchema: codeInterpreterInputSchema,\n  outputSchema: codeInterpreterOutputSchema\n});\nvar codeInterpreter = (args = {}) => {\n  return codeInterpreterToolFactory(args);\n};\n\n// src/tool/file-search.ts\n\n\nvar comparisonFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"eq\", \"ne\", \"gt\", \"gte\", \"lt\", \"lte\"]),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()])\n});\nvar compoundFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"and\", \"or\"]),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, zod_v4__WEBPACK_IMPORTED_MODULE_0__.lazy(() => compoundFilterSchema)])\n  )\n});\nvar fileSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  vectorStoreIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n  maxNumResults: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  ranking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    ranker: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    scoreThreshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n  }).optional(),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, compoundFilterSchema]).optional()\n});\nvar fileSearchOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n  results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n      fileId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ).nullable()\n});\nvar fileSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.file_search\",\n  name: \"file_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}),\n  outputSchema: fileSearchOutputSchema\n});\n\n// src/tool/image-generation.ts\n\n\nvar imageGenerationArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  background: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"opaque\", \"transparent\"]).optional(),\n  inputFidelity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"high\"]).optional(),\n  inputImageMask: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    fileId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    imageUrl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  moderation: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\"]).optional(),\n  outputCompression: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().min(0).max(100).optional(),\n  outputFormat: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"png\", \"jpeg\", \"webp\"]).optional(),\n  quality: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"low\", \"medium\", \"high\"]).optional(),\n  size: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"1024x1024\", \"1024x1536\", \"1536x1024\", \"auto\"]).optional()\n}).strict();\nvar imageGenerationOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar imageGenerationToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.image_generation\",\n  name: \"image_generation\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}),\n  outputSchema: imageGenerationOutputSchema\n});\nvar imageGeneration = (args = {}) => {\n  return imageGenerationToolFactory(args);\n};\n\n// src/tool/web-search.ts\n\n\nvar webSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n  }).optional(),\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\nvar webSearch = (args = {}) => {\n  return webSearchToolFactory(args);\n};\n\n// src/tool/web-search-preview.ts\n\n\nvar webSearchPreviewArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Search context size to use for the web search.\n   * - high: Most comprehensive context, highest cost, slower response\n   * - medium: Balanced context, cost, and latency (default)\n   * - low: Least context, lowest cost, fastest response\n   */\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * User location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Type of location (always 'approximate')\n     */\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    /**\n     * Two-letter ISO country code (e.g., 'US', 'GB')\n     */\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * City name (free text, e.g., 'Minneapolis')\n     */\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * Region name (free text, e.g., 'Minnesota')\n     */\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * IANA timezone (e.g., 'America/Chicago')\n     */\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchPreview = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search_preview\",\n  name: \"web_search_preview\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\n\n// src/openai-tools.ts\nvar openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n  /**\n   * The image generation tool allows you to generate images using a text prompt,\n   * and optionally image inputs. It leverages the GPT Image model,\n   * and automatically optimizes text inputs for improved performance.\n   *\n   * Must have name `image_generation`.\n   *\n   * @param size - Image dimensions (e.g., 1024x1024, 1024x1536)\n   * @param quality - Rendering quality (e.g. low, medium, high)\n   * @param format - File output format\n   * @param compression - Compression level (0-100%) for JPEG and WebP formats\n   * @param background - Transparent or opaque\n   */\n  imageGeneration,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch\n};\n\n// src/responses/openai-responses-language-model.ts\n\n\n\n\n// src/responses/convert-to-openai-responses-input.ts\n\n\n\nfunction isFileId(data, prefixes) {\n  if (!prefixes) return false;\n  return prefixes.some((prefix) => data.startsWith(prefix));\n}\nasync function convertToOpenAIResponsesInput({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes,\n  store\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const input = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            input.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            input.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        input.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a2, _b2, _c2;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"input_text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"input_image\",\n                    ...part.data instanceof URL ? { image_url: part.data.toString() } : typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      image_url: `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    },\n                    detail: (_b2 = (_a2 = part.providerOptions) == null ? void 0 : _a2.openai) == null ? void 0 : _b2.imageDetail\n                  };\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: \"input_file\",\n                      file_url: part.data.toString()\n                    };\n                  }\n                  return {\n                    type: \"input_file\",\n                    ...typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      filename: (_c2 = part.filename) != null ? _c2 : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        const reasoningMessages = {};\n        const toolCallParts = {};\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              input.push({\n                role: \"assistant\",\n                content: [{ type: \"output_text\", text: part.text }],\n                id: (_c = (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.itemId) != null ? _c : void 0\n              });\n              break;\n            }\n            case \"tool-call\": {\n              toolCallParts[part.toolCallId] = part;\n              if (part.providerExecuted) {\n                break;\n              }\n              input.push({\n                type: \"function_call\",\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id: (_f = (_e = (_d = part.providerOptions) == null ? void 0 : _d.openai) == null ? void 0 : _e.itemId) != null ? _f : void 0\n              });\n              break;\n            }\n            case \"tool-result\": {\n              if (store) {\n                input.push({ type: \"item_reference\", id: part.toolCallId });\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Results for OpenAI tool ${part.toolName} are not sent to the API when store is false`\n                });\n              }\n              break;\n            }\n            case \"reasoning\": {\n              const providerOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                provider: \"openai\",\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema\n              });\n              const reasoningId = providerOptions == null ? void 0 : providerOptions.itemId;\n              if (reasoningId != null) {\n                const existingReasoningMessage = reasoningMessages[reasoningId];\n                const summaryParts = [];\n                if (part.text.length > 0) {\n                  summaryParts.push({ type: \"summary_text\", text: part.text });\n                } else if (existingReasoningMessage !== void 0) {\n                  warnings.push({\n                    type: \"other\",\n                    message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`\n                  });\n                }\n                if (existingReasoningMessage === void 0) {\n                  reasoningMessages[reasoningId] = {\n                    type: \"reasoning\",\n                    id: reasoningId,\n                    encrypted_content: providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent,\n                    summary: summaryParts\n                  };\n                  input.push(reasoningMessages[reasoningId]);\n                } else {\n                  existingReasoningMessage.summary.push(...summaryParts);\n                }\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`\n                });\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case \"tool\": {\n        for (const part of content) {\n          const output = part.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          input.push({\n            type: \"function_call_output\",\n            call_id: part.toolCallId,\n            output: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { input, warnings };\n}\nvar openaiResponsesReasoningProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  itemId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEncryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall\n}) {\n  switch (finishReason) {\n    case void 0:\n    case null:\n      return hasFunctionCall ? \"tool-calls\" : \"stop\";\n    case \"max_output_tokens\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    default:\n      return hasFunctionCall ? \"tool-calls\" : \"unknown\";\n  }\n}\n\n// src/responses/openai-responses-prepare-tools.ts\n\nfunction prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema\n        });\n        break;\n      case \"provider-defined\": {\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? {\n                ranker: args.ranking.ranker,\n                score_threshold: args.ranking.scoreThreshold\n              } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.web_search\": {\n            const args = webSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search\",\n              filters: args.filters != null ? { allowed_domains: args.filters.allowedDomains } : void 0,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.code_interpreter\": {\n            const args = codeInterpreterArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"code_interpreter\",\n              container: args.container == null ? { type: \"auto\", file_ids: void 0 } : typeof args.container === \"string\" ? args.container : { type: \"auto\", file_ids: args.container.fileIds }\n            });\n            break;\n          }\n          case \"openai.image_generation\": {\n            const args = imageGenerationArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"image_generation\",\n              background: args.background,\n              input_fidelity: args.inputFidelity,\n              input_image_mask: args.inputImageMask ? {\n                file_id: args.inputImageMask.fileId,\n                image_url: args.inputImageMask.imageUrl\n              } : void 0,\n              model: args.model,\n              size: args.size,\n              quality: args.quality,\n              moderation: args.moderation,\n              output_format: args.outputFormat,\n              output_compression: args.outputCompression\n            });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: toolChoice.toolName === \"code_interpreter\" || toolChoice.toolName === \"file_search\" || toolChoice.toolName === \"image_generation\" || toolChoice.toolName === \"web_search_preview\" || toolChoice.toolName === \"web_search\" ? { type: toolChoice.toolName } : { type: \"function\", name: toolChoice.toolName },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/responses/openai-responses-language-model.ts\nvar webSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n      query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ]).nullish()\n});\nvar fileSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n  results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ).nullish()\n});\nvar codeInterpreterCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n  container_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n    ])\n  ).nullable()\n});\nvar imageGenerationCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar TOP_LOGPROBS_MAX = 20;\nvar LOGPROBS_SCHEMA = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    )\n  })\n);\nvar OpenAIResponsesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/],\n      \"application/pdf\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (stopSequences != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"stopSequences\" });\n    }\n    const openaiOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema\n    });\n    const { input, warnings: inputWarnings } = await convertToOpenAIResponsesInput({\n      prompt,\n      systemMessageMode: modelConfig.systemMessageMode,\n      fileIdPrefixes: this.config.fileIdPrefixes,\n      store: (_a = openaiOptions == null ? void 0 : openaiOptions.store) != null ? _a : true\n    });\n    warnings.push(...inputWarnings);\n    const strictJsonSchema = (_b = openaiOptions == null ? void 0 : openaiOptions.strictJsonSchema) != null ? _b : false;\n    let include = openaiOptions == null ? void 0 : openaiOptions.include;\n    function addInclude(key) {\n      include = include != null ? [...include, key] : [key];\n    }\n    function hasOpenAITool(id) {\n      return (tools == null ? void 0 : tools.find(\n        (tool) => tool.type === \"provider-defined\" && tool.id === id\n      )) != null;\n    }\n    const topLogprobs = typeof (openaiOptions == null ? void 0 : openaiOptions.logprobs) === \"number\" ? openaiOptions == null ? void 0 : openaiOptions.logprobs : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? TOP_LOGPROBS_MAX : void 0;\n    if (topLogprobs) {\n      addInclude(\"message.output_text.logprobs\");\n    }\n    const webSearchToolName = (_c = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && (tool.id === \"openai.web_search\" || tool.id === \"openai.web_search_preview\")\n    )) == null ? void 0 : _c.name;\n    if (webSearchToolName) {\n      addInclude(\"web_search_call.action.sources\");\n    }\n    if (hasOpenAITool(\"openai.code_interpreter\")) {\n      addInclude(\"code_interpreter_call.outputs\");\n    }\n    const baseArgs = {\n      model: this.modelId,\n      input,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n      ...((responseFormat == null ? void 0 : responseFormat.type) === \"json\" || (openaiOptions == null ? void 0 : openaiOptions.textVerbosity)) && {\n        text: {\n          ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n            format: responseFormat.schema != null ? {\n              type: \"json_schema\",\n              strict: strictJsonSchema,\n              name: (_d = responseFormat.name) != null ? _d : \"response\",\n              description: responseFormat.description,\n              schema: responseFormat.schema\n            } : { type: \"json_object\" }\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.textVerbosity) && {\n            verbosity: openaiOptions.textVerbosity\n          }\n        }\n      },\n      // provider options:\n      max_tool_calls: openaiOptions == null ? void 0 : openaiOptions.maxToolCalls,\n      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n      store: openaiOptions == null ? void 0 : openaiOptions.store,\n      user: openaiOptions == null ? void 0 : openaiOptions.user,\n      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n      service_tier: openaiOptions == null ? void 0 : openaiOptions.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions == null ? void 0 : openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions == null ? void 0 : openaiOptions.safetyIdentifier,\n      top_logprobs: topLogprobs,\n      // model-specific settings:\n      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {\n        reasoning: {\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n            effort: openaiOptions.reasoningEffort\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {\n            summary: openaiOptions.reasoningSummary\n          }\n        }\n      },\n      ...modelConfig.requiredAutoTruncation && {\n        truncation: \"auto\"\n      }\n    };\n    if (modelConfig.isReasoningModel) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n    } else {\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningEffort\",\n          details: \"reasoningEffort is not supported for non-reasoning models\"\n        });\n      }\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningSummary\",\n          details: \"reasoningSummary is not supported for non-reasoning models\"\n        });\n      }\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"flex\" && !modelConfig.supportsFlexProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      delete baseArgs.service_tier;\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"priority\" && !modelConfig.supportsPriorityProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      delete baseArgs.service_tier;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema\n    });\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: \"/responses\",\n      modelId: this.modelId\n    });\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }).nullish(),\n          model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n                role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"output_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                    logprobs: LOGPROBS_SCHEMA.nullish(),\n                    annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                      zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n                          file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                          index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"container_file_citation\")\n                        })\n                      ])\n                    )\n                  })\n                )\n              }),\n              webSearchCallItem,\n              fileSearchCallItem,\n              codeInterpreterCallItem,\n              imageGenerationCallItem,\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n                call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"summary_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                  })\n                )\n              })\n            ])\n          ),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullable(),\n          usage: usageSchema2\n        })\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (response.error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse,\n        isRetryable: false\n      });\n    }\n    const content = [];\n    const logprobs = [];\n    let hasFunctionCall = false;\n    for (const part of response.output) {\n      switch (part.type) {\n        case \"reasoning\": {\n          if (part.summary.length === 0) {\n            part.summary.push({ type: \"summary_text\", text: \"\" });\n          }\n          for (const summary of part.summary) {\n            content.push({\n              type: \"reasoning\",\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: (_a = part.encrypted_content) != null ? _a : null\n                }\n              }\n            });\n          }\n          break;\n        }\n        case \"image_generation_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"image_generation\",\n            input: \"{}\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"image_generation\",\n            result: {\n              result: part.result\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"message\": {\n          for (const contentPart of part.content) {\n            if (((_c = (_b = options.providerOptions) == null ? void 0 : _b.openai) == null ? void 0 : _c.logprobs) && contentPart.logprobs) {\n              logprobs.push(contentPart.logprobs);\n            }\n            content.push({\n              type: \"text\",\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id\n                }\n              }\n            });\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === \"url_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_f = (_e = (_d = this.config).generateId) == null ? void 0 : _e.call(_d)) != null ? _f : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              } else if (annotation.type === \"file_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_i = (_h = (_g = this.config).generateId) == null ? void 0 : _h.call(_g)) != null ? _i : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_k = (_j = annotation.quote) != null ? _j : annotation.filename) != null ? _k : \"Document\",\n                  filename: (_l = annotation.filename) != null ? _l : annotation.file_id\n                });\n              }\n            }\n          }\n          break;\n        }\n        case \"function_call\": {\n          hasFunctionCall = true;\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"web_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            input: JSON.stringify({ action: part.action }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            result: { status: part.status },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"computer_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            result: {\n              type: \"computer_use_tool_result\",\n              status: part.status || \"completed\"\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"file_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            input: \"{}\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            result: {\n              queries: part.queries,\n              results: (_n = (_m = part.results) == null ? void 0 : _m.map((result) => ({\n                attributes: result.attributes,\n                fileId: result.file_id,\n                filename: result.filename,\n                score: result.score,\n                text: result.text\n              }))) != null ? _n : null\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"code_interpreter_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            input: JSON.stringify({\n              code: part.code,\n              containerId: part.container_id\n            }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            result: {\n              outputs: part.outputs\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n      }\n    }\n    const providerMetadata = {\n      openai: { responseId: response.id }\n    };\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n    if (typeof response.service_tier === \"string\") {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: (_o = response.incomplete_details) == null ? void 0 : _o.reason,\n        hasFunctionCall\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens: (_q = (_p = response.usage.output_tokens_details) == null ? void 0 : _p.reasoning_tokens) != null ? _q : void 0,\n        cachedInputTokens: (_s = (_r = response.usage.input_tokens_details) == null ? void 0 : _r.cached_tokens) != null ? _s : void 0\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1e3),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/responses\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiResponsesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const self = this;\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const logprobs = [];\n    let responseId = null;\n    const ongoingToolCalls = {};\n    let hasFunctionCall = false;\n    const activeReasoning = {};\n    let serviceTier;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.call_id,\n                  toolName: value.item.name\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\"\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"computer_use\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"computer_use\"\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  input: \"{}\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"image_generation_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"image_generation\",\n                  input: \"{}\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (isResponseOutputItemAddedReasoningChunk(value)) {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: [0]\n                };\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent: (_a = value.item.encrypted_content) != null ? _a : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                hasFunctionCall = true;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.call_id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  input: JSON.stringify({ action: value.item.action }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  result: { status: value.item.status },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  result: {\n                    type: \"computer_use_tool_result\",\n                    status: value.item.status || \"completed\"\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  result: {\n                    queries: value.item.queries,\n                    results: (_c = (_b = value.item.results) == null ? void 0 : _b.map((result) => ({\n                      attributes: result.attributes,\n                      fileId: result.file_id,\n                      filename: result.filename,\n                      score: result.score,\n                      text: result.text\n                    }))) != null ? _c : null\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"code_interpreter_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  input: JSON.stringify({\n                    code: value.item.code,\n                    containerId: value.item.container_id\n                  }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  result: {\n                    outputs: value.item.outputs\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"image_generation_call\") {\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"image_generation\",\n                  result: {\n                    result: value.item.result\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-end\",\n                  id: value.item.id\n                });\n              } else if (isResponseOutputItemDoneReasoningChunk(value)) {\n                const activeReasoningPart = activeReasoning[value.item.id];\n                for (const summaryIndex of activeReasoningPart.summaryParts) {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent: (_d = value.item.encrypted_content) != null ? _d : null\n                      }\n                    }\n                  });\n                }\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: value.delta\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1e3),\n                modelId: value.response.model\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: value.item_id,\n                delta: value.delta\n              });\n              if (((_f = (_e = options.providerOptions) == null ? void 0 : _e.openai) == null ? void 0 : _f.logprobs) && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (isResponseReasoningSummaryPartAddedChunk(value)) {\n              if (value.summary_index > 0) {\n                (_g = activeReasoning[value.item_id]) == null ? void 0 : _g.summaryParts.push(\n                  value.summary_index\n                );\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent: (_i = (_h = activeReasoning[value.item_id]) == null ? void 0 : _h.encryptedContent) != null ? _i : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseReasoningSummaryTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id\n                  }\n                }\n              });\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: (_j = value.response.incomplete_details) == null ? void 0 : _j.reason,\n                hasFunctionCall\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens = value.response.usage.input_tokens + value.response.usage.output_tokens;\n              usage.reasoningTokens = (_l = (_k = value.response.usage.output_tokens_details) == null ? void 0 : _k.reasoning_tokens) != null ? _l : void 0;\n              usage.cachedInputTokens = (_n = (_m = value.response.usage.input_tokens_details) == null ? void 0 : _m.cached_tokens) != null ? _n : void 0;\n              if (typeof value.response.service_tier === \"string\") {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === \"url_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_q = (_p = (_o = self.config).generateId) == null ? void 0 : _p.call(_o)) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: value.annotation.url,\n                  title: value.annotation.title\n                });\n              } else if (value.annotation.type === \"file_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_t = (_s = (_r = self.config).generateId) == null ? void 0 : _s.call(_r)) != null ? _t : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_v = (_u = value.annotation.quote) != null ? _u : value.annotation.filename) != null ? _v : \"Document\",\n                  filename: (_w = value.annotation.filename) != null ? _w : value.annotation.file_id\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: \"error\", error: value });\n            }\n          },\n          flush(controller) {\n            const providerMetadata = {\n              openai: {\n                responseId\n              }\n            };\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n            if (serviceTier !== void 0) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema2 = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish(),\n  output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish()\n});\nvar textDeltaChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  logprobs: LOGPROBS_SCHEMA.nullish()\n});\nvar errorChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  sequence_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseFinishedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"response.completed\", \"response.incomplete\"]),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n    usage: usageSchema2,\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseCreatedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.created\"),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseOutputItemAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.added\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ])\n});\nvar responseOutputItemDoneSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.done\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    }),\n    codeInterpreterCallItem,\n    imageGenerationCallItem,\n    webSearchCallItem,\n    fileSearchCallItem,\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    })\n  ])\n});\nvar responseFunctionCallArgumentsDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.function_call_arguments.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar responseAnnotationAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.annotation.added\"),\n  annotation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ])\n});\nvar responseReasoningSummaryPartAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_part.added\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseReasoningSummaryTextDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar openaiResponsesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  textDeltaChunkSchema,\n  responseFinishedChunkSchema,\n  responseCreatedChunkSchema,\n  responseOutputItemAddedSchema,\n  responseOutputItemDoneSchema,\n  responseFunctionCallArgumentsDeltaSchema,\n  responseAnnotationAddedSchema,\n  responseReasoningSummaryPartAddedSchema,\n  responseReasoningSummaryTextDeltaSchema,\n  errorChunkSchema,\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).loose()\n  // fallback for unknown chunks\n]);\nfunction isTextDeltaChunk(chunk) {\n  return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n  return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseOutputItemDoneReasoningChunk(chunk) {\n  return isResponseOutputItemDoneChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseFinishedChunk(chunk) {\n  return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n  return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n  return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n  return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseOutputItemAddedReasoningChunk(chunk) {\n  return isResponseOutputItemAddedChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n  return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction isResponseReasoningSummaryPartAddedChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_part.added\";\n}\nfunction isResponseReasoningSummaryTextDeltaChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_text.delta\";\n}\nfunction isErrorChunk(chunk) {\n  return chunk.type === \"error\";\n}\nfunction getResponsesModelConfig(modelId) {\n  const supportsFlexProcessing2 = modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n  const supportsPriorityProcessing2 = modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n  const defaults = {\n    requiredAutoTruncation: false,\n    systemMessageMode: \"system\",\n    supportsFlexProcessing: supportsFlexProcessing2,\n    supportsPriorityProcessing: supportsPriorityProcessing2\n  };\n  if (modelId.startsWith(\"gpt-5-chat\")) {\n    return {\n      ...defaults,\n      isReasoningModel: false\n    };\n  }\n  if (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\") || modelId.startsWith(\"codex-\") || modelId.startsWith(\"computer-use\")) {\n    if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: \"remove\"\n      };\n    }\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: \"developer\"\n    };\n  }\n  return {\n    ...defaults,\n    isReasoningModel: false\n  };\n}\nvar openaiResponsesProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"reasoning.encrypted_content\",\n      \"file_search_call.results\",\n      \"message.output_text.logprobs\"\n    ])\n  ).nullish(),\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   *\n   * @see https://platform.openai.com/docs/api-reference/responses/create\n   * @see https://cookbook.openai.com/examples/using_logprobs\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(TOP_LOGPROBS_MAX)]).optional(),\n  /**\n   * The maximum number of total calls to built-in tools that can be processed in a response.\n   * This maximum number applies across all built-in tool calls, not per individual tool.\n   * Any further attempts to call a tool by the model will be ignored.\n   */\n  maxToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  previousResponseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningSummary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).nullish(),\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).nullish(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/speech/openai-speech-model.ts\n\n\nvar OpenAIProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  speed: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0.25).max(4).default(1).nullish()\n});\nvar OpenAISpeechModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    text,\n    voice = \"alloy\",\n    outputFormat = \"mp3\",\n    speed,\n    instructions,\n    language,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: OpenAIProviderOptionsSchema\n    });\n    const requestBody = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: \"mp3\",\n      speed,\n      instructions\n    };\n    if (outputFormat) {\n      if ([\"mp3\", \"opus\", \"aac\", \"flac\", \"wav\", \"pcm\"].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"outputFormat\",\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`\n        });\n      }\n    }\n    if (openAIOptions) {\n      const speechModelOptions = {};\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key];\n        if (value !== void 0) {\n          requestBody[key] = value;\n        }\n      }\n    }\n    if (language) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"language\",\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`\n      });\n    }\n    return {\n      requestBody,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/audio/speech\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createBinaryResponseHandler)(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody)\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/transcription/openai-transcription-model.ts\n\n\n\n// src/transcription/openai-transcription-options.ts\n\nvar openAITranscriptionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Additional information to include in the transcription response.\n   */\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * The language of the input audio in ISO-639-1 format.\n   */\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * An optional text to guide the model's style or continue a previous audio segment.\n   */\n  prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * The sampling temperature, between 0 and 1.\n   * @default 0\n   */\n  temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1).default(0).optional(),\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * @default ['segment']\n   */\n  timestampGranularities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"word\", \"segment\"])).default([\"segment\"]).optional()\n});\n\n// src/transcription/openai-transcription-model.ts\nvar languageMap = {\n  afrikaans: \"af\",\n  arabic: \"ar\",\n  armenian: \"hy\",\n  azerbaijani: \"az\",\n  belarusian: \"be\",\n  bosnian: \"bs\",\n  bulgarian: \"bg\",\n  catalan: \"ca\",\n  chinese: \"zh\",\n  croatian: \"hr\",\n  czech: \"cs\",\n  danish: \"da\",\n  dutch: \"nl\",\n  english: \"en\",\n  estonian: \"et\",\n  finnish: \"fi\",\n  french: \"fr\",\n  galician: \"gl\",\n  german: \"de\",\n  greek: \"el\",\n  hebrew: \"he\",\n  hindi: \"hi\",\n  hungarian: \"hu\",\n  icelandic: \"is\",\n  indonesian: \"id\",\n  italian: \"it\",\n  japanese: \"ja\",\n  kannada: \"kn\",\n  kazakh: \"kk\",\n  korean: \"ko\",\n  latvian: \"lv\",\n  lithuanian: \"lt\",\n  macedonian: \"mk\",\n  malay: \"ms\",\n  marathi: \"mr\",\n  maori: \"mi\",\n  nepali: \"ne\",\n  norwegian: \"no\",\n  persian: \"fa\",\n  polish: \"pl\",\n  portuguese: \"pt\",\n  romanian: \"ro\",\n  russian: \"ru\",\n  serbian: \"sr\",\n  slovak: \"sk\",\n  slovenian: \"sl\",\n  spanish: \"es\",\n  swahili: \"sw\",\n  swedish: \"sv\",\n  tagalog: \"tl\",\n  tamil: \"ta\",\n  thai: \"th\",\n  turkish: \"tr\",\n  ukrainian: \"uk\",\n  urdu: \"ur\",\n  vietnamese: \"vi\",\n  welsh: \"cy\"\n};\nvar OpenAITranscriptionModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    audio,\n    mediaType,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openAITranscriptionProviderOptions\n    });\n    const formData = new FormData();\n    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(audio)]);\n    formData.append(\"model\", this.modelId);\n    const fileExtension = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.mediaTypeToExtension)(mediaType);\n    formData.append(\n      \"file\",\n      new File([blob], \"audio\", { type: mediaType }),\n      `audio.${fileExtension}`\n    );\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          \"gpt-4o-transcribe\",\n          \"gpt-4o-mini-transcribe\"\n        ].includes(this.modelId) ? \"json\" : \"verbose_json\",\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities\n      };\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n    return {\n      formData,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { formData, warnings } = await this.getArgs(options);\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postFormDataToApi)({\n      url: this.config.url({\n        path: \"/audio/transcriptions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTranscriptionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;\n    return {\n      text: response.text,\n      segments: (_g = (_f = (_d = response.segments) == null ? void 0 : _d.map((segment) => ({\n        text: segment.text,\n        startSecond: segment.start,\n        endSecond: segment.end\n      }))) != null ? _f : (_e = response.words) == null ? void 0 : _e.map((word) => ({\n        text: word.word,\n        startSecond: word.start,\n        endSecond: word.end\n      }))) != null ? _g : [],\n      language,\n      durationInSeconds: (_h = response.duration) != null ? _h : void 0,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\nvar openaiTranscriptionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  words: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      word: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish(),\n  segments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      seek: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n      temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      avg_logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      compression_ratio: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      no_speech_prob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish()\n});\n\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n  var _a, _b;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.openai.com/v1\";\n  const providerName = (_b = options.name) != null ? _b : \"openai\";\n  const getHeaders = () => ({\n    Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"OPENAI_API_KEY\",\n      description: \"OpenAI\"\n    })}`,\n    \"OpenAI-Organization\": options.organization,\n    \"OpenAI-Project\": options.project,\n    ...options.headers\n  });\n  const createChatModel = (modelId) => new OpenAIChatLanguageModel(modelId, {\n    provider: `${providerName}.chat`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createCompletionModel = (modelId) => new OpenAICompletionLanguageModel(modelId, {\n    provider: `${providerName}.completion`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createEmbeddingModel = (modelId) => new OpenAIEmbeddingModel(modelId, {\n    provider: `${providerName}.embedding`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId) => new OpenAIImageModel(modelId, {\n    provider: `${providerName}.image`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {\n    provider: `${providerName}.transcription`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {\n    provider: `${providerName}.speech`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createLanguageModel = (modelId) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenAI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createResponsesModel(modelId);\n  };\n  const createResponsesModel = (modelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: [\"file-\"]\n    });\n  };\n  const provider = function(modelId) {\n    return createLanguageModel(modelId);\n  };\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n  provider.tools = openaiTools;\n  return provider;\n}\nvar openai = createOpenAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@ai-sdk+openai@2.0.32_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@ai-sdk+openai@2.0.32_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@ai-sdk+openai@2.0.32_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOpenAI: () => (/* binding */ createOpenAI),\n/* harmony export */   openai: () => (/* binding */ openai)\n/* harmony export */ });\n/* harmony import */ var _ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ai-sdk/provider-utils */ \"(ssr)/./node_modules/.pnpm/@ai-sdk+provider-utils@3.0.9_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\");\n/* harmony import */ var _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ai-sdk/provider */ \"(ssr)/./node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/schemas.js\");\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod/v4 */ \"(ssr)/./node_modules/.pnpm/zod@3.25.76/node_modules/zod/v4/classic/coerce.js\");\n// src/openai-provider.ts\n\n\n// src/chat/openai-chat-language-model.ts\n\n\n\n\n// src/openai-error.ts\n\n\nvar openaiErrorDataSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    // The additional information below is handled loosely to support\n    // OpenAI-compatible providers that have slightly different error\n    // responses:\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullish()\n  })\n});\nvar openaiFailedResponseHandler = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonErrorResponseHandler)({\n  errorSchema: openaiErrorDataSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/chat/convert-to-openai-chat-messages.ts\n\n\nfunction convertToOpenAIChatMessages({\n  prompt,\n  systemMessageMode = \"system\"\n}) {\n  const messages = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            messages.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            messages.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && content[0].type === \"text\") {\n          messages.push({ role: \"user\", content: content[0].text });\n          break;\n        }\n        messages.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a, _b, _c;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url: part.data instanceof URL ? part.data.toString() : `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`,\n                      // OpenAI specific extension: image detail\n                      detail: (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.imageDetail\n                    }\n                  };\n                } else if (part.mediaType.startsWith(\"audio/\")) {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"audio file parts with URLs\"\n                    });\n                  }\n                  switch (part.mediaType) {\n                    case \"audio/wav\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"wav\"\n                        }\n                      };\n                    }\n                    case \"audio/mp3\":\n                    case \"audio/mpeg\": {\n                      return {\n                        type: \"input_audio\",\n                        input_audio: {\n                          data: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data),\n                          format: \"mp3\"\n                        }\n                      };\n                    }\n                    default: {\n                      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                        functionality: `audio content parts with media type ${part.mediaType}`\n                      });\n                    }\n                  }\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                      functionality: \"PDF file parts with URLs\"\n                    });\n                  }\n                  return {\n                    type: \"file\",\n                    file: typeof part.data === \"string\" && part.data.startsWith(\"file-\") ? { file_id: part.data } : {\n                      filename: (_c = part.filename) != null ? _c : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const output = toolResponse.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { messages, warnings };\n}\n\n// src/chat/get-response-metadata.ts\nfunction getResponseMetadata({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/chat/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/openai-chat-options.ts\n\nvar openaiProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Modify the likelihood of specified tokens appearing in the completion.\n   *\n   * Accepts a JSON object that maps tokens (specified by their token ID in\n   * the GPT tokenizer) to an associated bias value from -100 to 100.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_3__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional(),\n  /**\n   * Whether to enable parallel function calling during tool use. Default to true.\n   */\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * A unique identifier representing your end-user, which can help OpenAI to\n   * monitor and detect abuse.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * Reasoning effort for reasoning models. Defaults to `medium`.\n   */\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"minimal\", \"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * Maximum number of completion tokens to generate. Useful for reasoning models.\n   */\n  maxCompletionTokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n   * Whether to enable persistence in responses API.\n   */\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Metadata to associate with the request.\n   */\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(64), zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().max(512)).optional(),\n  /**\n   * Parameters for prediction mode.\n   */\n  prediction: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.any()).optional(),\n  /**\n   * Whether to use structured outputs.\n   *\n   * @default true\n   */\n  structuredOutputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Service tier for the request.\n   * - 'auto': Default service tier\n   * - 'flex': 50% cheaper processing at the cost of increased latency. Only available for o3 and o4-mini models.\n   * - 'priority': Higher-speed processing with predictably low latency at premium cost. Available for Enterprise customers.\n   *\n   * @default 'auto'\n   */\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).optional(),\n  /**\n   * Whether to use strict JSON schema validation.\n   *\n   * @default false\n   */\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n   * Controls the verbosity of the model's responses.\n   * Lower values will result in more concise responses, while higher values will result in more verbose responses.\n   */\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * A cache key for prompt caching. Allows manual control over prompt caching behavior.\n   * Useful for improving cache hit rates and working around automatic caching issues.\n   */\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * A stable identifier used to help detect users of your application\n   * that may be violating OpenAI's usage policies. The IDs should be a\n   * string that uniquely identifies each user. We recommend hashing their\n   * username or email address, in order to avoid sending us any identifying\n   * information.\n   */\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/chat/openai-chat-prepare-tools.ts\n\nfunction prepareChatTools({\n  tools,\n  toolChoice,\n  structuredOutputs,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: tool.inputSchema,\n            strict: structuredOutputs ? strictJsonSchema : void 0\n          }\n        });\n        break;\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: {\n          type: \"function\",\n          function: {\n            name: toolChoice.toolName\n          }\n        },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/chat/openai-chat-language-model.ts\nvar OpenAIChatLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiProviderOptions\n    })) != null ? _a : {};\n    const structuredOutputs = (_b = openaiOptions.structuredOutputs) != null ? _b : true;\n    if (topK != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"topK\"\n      });\n    }\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null && !structuredOutputs) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format schema is only supported with structuredOutputs\"\n      });\n    }\n    const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(\n      {\n        prompt,\n        systemMessageMode: getSystemMessageMode(this.modelId)\n      }\n    );\n    warnings.push(...messageWarnings);\n    const strictJsonSchema = (_c = openaiOptions.strictJsonSchema) != null ? _c : false;\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n      // model specific settings:\n      logit_bias: openaiOptions.logitBias,\n      logprobs: openaiOptions.logprobs === true || typeof openaiOptions.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof openaiOptions.logprobs === \"number\" ? openaiOptions.logprobs : typeof openaiOptions.logprobs === \"boolean\" ? openaiOptions.logprobs ? 0 : void 0 : void 0,\n      user: openaiOptions.user,\n      parallel_tool_calls: openaiOptions.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      response_format: (responseFormat == null ? void 0 : responseFormat.type) === \"json\" ? structuredOutputs && responseFormat.schema != null ? {\n        type: \"json_schema\",\n        json_schema: {\n          schema: responseFormat.schema,\n          strict: strictJsonSchema,\n          name: (_d = responseFormat.name) != null ? _d : \"response\",\n          description: responseFormat.description\n        }\n      } : { type: \"json_object\" } : void 0,\n      stop: stopSequences,\n      seed,\n      verbosity: openaiOptions.textVerbosity,\n      // openai specific settings:\n      // TODO AI SDK 6: remove, we auto-map maxOutputTokens now\n      max_completion_tokens: openaiOptions.maxCompletionTokens,\n      store: openaiOptions.store,\n      metadata: openaiOptions.metadata,\n      prediction: openaiOptions.prediction,\n      reasoning_effort: openaiOptions.reasoningEffort,\n      service_tier: openaiOptions.serviceTier,\n      prompt_cache_key: openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions.safetyIdentifier,\n      // messages:\n      messages\n    };\n    if (isReasoningModel(this.modelId)) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.frequency_penalty != null) {\n        baseArgs.frequency_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"frequencyPenalty\",\n          details: \"frequencyPenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.presence_penalty != null) {\n        baseArgs.presence_penalty = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"presencePenalty\",\n          details: \"presencePenalty is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logit_bias != null) {\n        baseArgs.logit_bias = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logitBias is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.logprobs != null) {\n        baseArgs.logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"logprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_logprobs != null) {\n        baseArgs.top_logprobs = void 0;\n        warnings.push({\n          type: \"other\",\n          message: \"topLogprobs is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.max_tokens != null) {\n        if (baseArgs.max_completion_tokens == null) {\n          baseArgs.max_completion_tokens = baseArgs.max_tokens;\n        }\n        baseArgs.max_tokens = void 0;\n      }\n    } else if (this.modelId.startsWith(\"gpt-4o-search-preview\") || this.modelId.startsWith(\"gpt-4o-mini-search-preview\")) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for the search preview models and has been removed.\"\n        });\n      }\n    }\n    if (openaiOptions.serviceTier === \"flex\" && !supportsFlexProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    if (openaiOptions.serviceTier === \"priority\" && !supportsPriorityProcessing(this.modelId)) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      baseArgs.service_tier = void 0;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareChatTools({\n      tools,\n      toolChoice,\n      structuredOutputs,\n      strictJsonSchema\n    });\n    return {\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n    const { args: body, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiChatResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const content = [];\n    const text = choice.message.content;\n    if (text != null && text.length > 0) {\n      content.push({ type: \"text\", text });\n    }\n    for (const toolCall of (_a = choice.message.tool_calls) != null ? _a : []) {\n      content.push({\n        type: \"tool-call\",\n        toolCallId: (_b = toolCall.id) != null ? _b : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        toolName: toolCall.function.name,\n        input: toolCall.function.arguments\n      });\n    }\n    for (const annotation of (_c = choice.message.annotations) != null ? _c : []) {\n      content.push({\n        type: \"source\",\n        sourceType: \"url\",\n        id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n        url: annotation.url,\n        title: annotation.title\n      });\n    }\n    const completionTokenDetails = (_d = response.usage) == null ? void 0 : _d.completion_tokens_details;\n    const promptTokenDetails = (_e = response.usage) == null ? void 0 : _e.prompt_tokens_details;\n    const providerMetadata = { openai: {} };\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {\n      providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;\n    }\n    if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {\n      providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;\n    }\n    if (((_f = choice.logprobs) == null ? void 0 : _f.content) != null) {\n      providerMetadata.openai.logprobs = choice.logprobs.content;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_h = (_g = response.usage) == null ? void 0 : _g.prompt_tokens) != null ? _h : void 0,\n        outputTokens: (_j = (_i = response.usage) == null ? void 0 : _i.completion_tokens) != null ? _j : void 0,\n        totalTokens: (_l = (_k = response.usage) == null ? void 0 : _k.total_tokens) != null ? _l : void 0,\n        reasoningTokens: (_m = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null ? _m : void 0,\n        cachedInputTokens: (_n = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null ? _n : void 0\n      },\n      request: { body },\n      response: {\n        ...getResponseMetadata(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      warnings,\n      providerMetadata\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiChatChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    let isActiveText = false;\n    const providerMetadata = { openai: {} };\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata(value)\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = (_a = value.usage.prompt_tokens) != null ? _a : void 0;\n              usage.outputTokens = (_b = value.usage.completion_tokens) != null ? _b : void 0;\n              usage.totalTokens = (_c = value.usage.total_tokens) != null ? _c : void 0;\n              usage.reasoningTokens = (_e = (_d = value.usage.completion_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : void 0;\n              usage.cachedInputTokens = (_g = (_f = value.usage.prompt_tokens_details) == null ? void 0 : _f.cached_tokens) != null ? _g : void 0;\n              if (((_h = value.usage.completion_tokens_details) == null ? void 0 : _h.accepted_prediction_tokens) != null) {\n                providerMetadata.openai.acceptedPredictionTokens = (_i = value.usage.completion_tokens_details) == null ? void 0 : _i.accepted_prediction_tokens;\n              }\n              if (((_j = value.usage.completion_tokens_details) == null ? void 0 : _j.rejected_prediction_tokens) != null) {\n                providerMetadata.openai.rejectedPredictionTokens = (_k = value.usage.completion_tokens_details) == null ? void 0 : _k.rejected_prediction_tokens;\n              }\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason(choice.finish_reason);\n            }\n            if (((_l = choice == null ? void 0 : choice.logprobs) == null ? void 0 : _l.content) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs.content;\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            if (delta.content != null) {\n              if (!isActiveText) {\n                controller.enqueue({ type: \"text-start\", id: \"0\" });\n                isActiveText = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: delta.content\n              });\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = toolCallDelta.index;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_m = toolCallDelta.function) == null ? void 0 : _m.name) == null) {\n                    throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCallDelta.id,\n                    toolName: toolCallDelta.function.name\n                  });\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_n = toolCallDelta.function.arguments) != null ? _n : \"\"\n                    },\n                    hasFinished: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (((_o = toolCall2.function) == null ? void 0 : _o.name) != null && ((_p = toolCall2.function) == null ? void 0 : _p.arguments) != null) {\n                    if (toolCall2.function.arguments.length > 0) {\n                      controller.enqueue({\n                        type: \"tool-input-delta\",\n                        id: toolCall2.id,\n                        delta: toolCall2.function.arguments\n                      });\n                    }\n                    if ((0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall2.function.arguments)) {\n                      controller.enqueue({\n                        type: \"tool-input-end\",\n                        id: toolCall2.id\n                      });\n                      controller.enqueue({\n                        type: \"tool-call\",\n                        toolCallId: (_q = toolCall2.id) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                        toolName: toolCall2.function.name,\n                        input: toolCall2.function.arguments\n                      });\n                      toolCall2.hasFinished = true;\n                    }\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall.hasFinished) {\n                  continue;\n                }\n                if (((_r = toolCallDelta.function) == null ? void 0 : _r.arguments) != null) {\n                  toolCall.function.arguments += (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_u = toolCallDelta.function.arguments) != null ? _u : \"\"\n                });\n                if (((_v = toolCall.function) == null ? void 0 : _v.name) != null && ((_w = toolCall.function) == null ? void 0 : _w.arguments) != null && (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.isParsableJson)(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-input-end\",\n                    id: toolCall.id\n                  });\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_x = toolCall.id) != null ? _x : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.hasFinished = true;\n                }\n              }\n            }\n            if (delta.annotations != null) {\n              for (const annotation of delta.annotations) {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              }\n            }\n          },\n          flush(controller) {\n            if (isActiveText) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              ...providerMetadata != null ? { providerMetadata } : {}\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar openaiTokenUsageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish(),\n  completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    accepted_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    rejected_prediction_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n  }).nullish()\n}).nullish();\nvar openaiChatResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\").nullish(),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n            function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          })\n        ).nullish(),\n        annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n            start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          })\n        ).nullish()\n      }),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n              })\n            )\n          })\n        ).nullish()\n      }).nullish(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ),\n  usage: openaiTokenUsageSchema\n});\nvar openaiChatChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          role: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"assistant\"]).nullish(),\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\").nullish(),\n              function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              })\n            })\n          ).nullish(),\n          annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n              start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          ).nullish()\n        }).nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                })\n              )\n            })\n          ).nullish()\n        }).nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    ),\n    usage: openaiTokenUsageSchema\n  }),\n  openaiErrorDataSchema\n]);\nfunction isReasoningModel(modelId) {\n  return (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\")) && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsFlexProcessing(modelId) {\n  return modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n}\nfunction supportsPriorityProcessing(modelId) {\n  return modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n}\nfunction getSystemMessageMode(modelId) {\n  var _a, _b;\n  if (!isReasoningModel(modelId)) {\n    return \"system\";\n  }\n  return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : \"developer\";\n}\nvar reasoningModels = {\n  \"o1-mini\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-mini-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview\": {\n    systemMessageMode: \"remove\"\n  },\n  \"o1-preview-2024-09-12\": {\n    systemMessageMode: \"remove\"\n  },\n  o3: {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o3-mini-2025-01-31\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini\": {\n    systemMessageMode: \"developer\"\n  },\n  \"o4-mini-2025-04-16\": {\n    systemMessageMode: \"developer\"\n  }\n};\n\n// src/completion/openai-completion-language-model.ts\n\n\n\n// src/completion/convert-to-openai-completion-prompt.ts\n\nfunction convertToOpenAICompletionPrompt({\n  prompt,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  let text = \"\";\n  if (prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.InvalidPromptError({\n          message: \"Unexpected system message in prompt: ${content}\",\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n          }\n        }).filter(Boolean).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"tool-call\": {\n              throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                functionality: \"tool-call messages\"\n              });\n            }\n          }\n        }).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text,\n    stopSequences: [`\n${user}:`]\n  };\n}\n\n// src/completion/get-response-metadata.ts\nfunction getResponseMetadata2({\n  id,\n  model,\n  created\n}) {\n  return {\n    id: id != null ? id : void 0,\n    modelId: model != null ? model : void 0,\n    timestamp: created != null ? new Date(created * 1e3) : void 0\n  };\n}\n\n// src/completion/map-openai-finish-reason.ts\nfunction mapOpenAIFinishReason2(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/completion/openai-completion-options.ts\n\nvar openaiCompletionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  Echo back the prompt in addition to the completion.\n     */\n  echo: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n  /**\n  Modify the likelihood of specified tokens appearing in the completion.\n  \n  Accepts a JSON object that maps tokens (specified by their token ID in\n  the GPT tokenizer) to an associated bias value from -100 to 100. You\n  can use this tokenizer tool to convert text to token IDs. Mathematically,\n  the bias is added to the logits generated by the model prior to sampling.\n  The exact effect will vary per model, but values between -1 and 1 should\n  decrease or increase likelihood of selection; values like -100 or 100\n  should result in a ban or exclusive selection of the relevant token.\n  \n  As an example, you can pass {\"50256\": -100} to prevent the <|endoftext|>\n  token from being generated.\n   */\n  logitBias: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()).optional(),\n  /**\n  The suffix that comes after a completion of inserted text.\n   */\n  suffix: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n   */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n  Return the log probabilities of the tokens. Including logprobs will increase\n  the response size and can slow down response times. However, it can\n  be useful to better understand how the model is behaving.\n  Setting to true will return the log probabilities of the tokens that\n  were generated.\n  Setting to a number will return the log probabilities of the top n\n  tokens that were generated.\n     */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).optional()\n});\n\n// src/completion/openai-completion-language-model.ts\nvar OpenAICompletionLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      // No URLs are supported for completion models.\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get providerOptionsName() {\n    return this.config.provider.split(\".\")[0].trim();\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences: userStopSequences,\n    responseFormat,\n    tools,\n    toolChoice,\n    seed,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openaiOptions = {\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: \"openai\",\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      }),\n      ...await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n        provider: this.providerOptionsName,\n        providerOptions,\n        schema: openaiCompletionProviderOptions\n      })\n    };\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (tools == null ? void 0 : tools.length) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"tools\" });\n    }\n    if (toolChoice != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"toolChoice\" });\n    }\n    if (responseFormat != null && responseFormat.type !== \"text\") {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"responseFormat\",\n        details: \"JSON response format is not supported.\"\n      });\n    }\n    const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt });\n    const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];\n    return {\n      args: {\n        // model id:\n        model: this.modelId,\n        // model specific settings:\n        echo: openaiOptions.echo,\n        logit_bias: openaiOptions.logitBias,\n        logprobs: (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? 0 : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === false ? void 0 : openaiOptions == null ? void 0 : openaiOptions.logprobs,\n        suffix: openaiOptions.suffix,\n        user: openaiOptions.user,\n        // standardized settings:\n        max_tokens: maxOutputTokens,\n        temperature,\n        top_p: topP,\n        frequency_penalty: frequencyPenalty,\n        presence_penalty: presencePenalty,\n        seed,\n        // prompt:\n        prompt: completionPrompt,\n        // stop sequences:\n        stop: stop.length > 0 ? stop : void 0\n      },\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const { args, warnings } = await this.getArgs(options);\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    const providerMetadata = { openai: {} };\n    if (choice.logprobs != null) {\n      providerMetadata.openai.logprobs = choice.logprobs;\n    }\n    return {\n      content: [{ type: \"text\", text: choice.text }],\n      usage: {\n        inputTokens: (_a = response.usage) == null ? void 0 : _a.prompt_tokens,\n        outputTokens: (_b = response.usage) == null ? void 0 : _b.completion_tokens,\n        totalTokens: (_c = response.usage) == null ? void 0 : _c.total_tokens\n      },\n      finishReason: mapOpenAIFinishReason2(choice.finish_reason),\n      request: { body: args },\n      response: {\n        ...getResponseMetadata2(response),\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const { args, warnings } = await this.getArgs(options);\n    const body = {\n      ...args,\n      stream: true,\n      stream_options: {\n        include_usage: true\n      }\n    };\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"unknown\";\n    const providerMetadata = { openai: {} };\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    let isFirstChunk = true;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (isFirstChunk) {\n              isFirstChunk = false;\n              controller.enqueue({\n                type: \"response-metadata\",\n                ...getResponseMetadata2(value)\n              });\n              controller.enqueue({ type: \"text-start\", id: \"0\" });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenAIFinishReason2(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.logprobs) != null) {\n              providerMetadata.openai.logprobs = choice.logprobs;\n            }\n            if ((choice == null ? void 0 : choice.text) != null && choice.text.length > 0) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: \"0\",\n                delta: choice.text\n              });\n            }\n          },\n          flush(controller) {\n            if (!isFirstChunk) {\n              controller.enqueue({ type: \"text-end\", id: \"0\" });\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              providerMetadata,\n              usage\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar openaiCompletionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n        token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n        top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n      }).nullish()\n    })\n  ),\n  usage: usageSchema.nullish()\n});\nvar openaiCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    created: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n          token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n          top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullish()\n        }).nullish()\n      })\n    ),\n    usage: usageSchema.nullish()\n  }),\n  openaiErrorDataSchema\n]);\n\n// src/embedding/openai-embedding-model.ts\n\n\n\n\n// src/embedding/openai-embedding-options.ts\n\nvar openaiEmbeddingProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n  The number of dimensions the resulting output embeddings should have.\n  Only supported in text-embedding-3 and later models.\n     */\n  dimensions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  /**\n  A unique identifier representing your end-user, which can help OpenAI to\n  monitor and detect abuse. Learn more.\n  */\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n\n// src/embedding/openai-embedding-model.ts\nvar OpenAIEmbeddingModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.maxEmbeddingsPerCall = 2048;\n    this.supportsParallelCalls = true;\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doEmbed({\n    values,\n    headers,\n    abortSignal,\n    providerOptions\n  }) {\n    var _a;\n    if (values.length > this.maxEmbeddingsPerCall) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.TooManyEmbeddingValuesForCallError({\n        provider: this.provider,\n        modelId: this.modelId,\n        maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n        values\n      });\n    }\n    const openaiOptions = (_a = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiEmbeddingProviderOptions\n    })) != null ? _a : {};\n    const {\n      responseHeaders,\n      value: response,\n      rawValue\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/embeddings\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        input: values,\n        encoding_format: \"float\",\n        dimensions: openaiOptions.dimensions,\n        user: openaiOptions.user\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTextEmbeddingResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      embeddings: response.data.map((item) => item.embedding),\n      usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,\n      response: { headers: responseHeaders, body: rawValue }\n    };\n  }\n};\nvar openaiTextEmbeddingResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ embedding: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()) })),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number() }).nullish()\n});\n\n// src/image/openai-image-model.ts\n\n\n\n// src/image/openai-image-options.ts\nvar modelMaxImagesPerCall = {\n  \"dall-e-3\": 1,\n  \"dall-e-2\": 10,\n  \"gpt-image-1\": 10\n};\nvar hasDefaultResponseFormat = /* @__PURE__ */ new Set([\"gpt-image-1\"]);\n\n// src/image/openai-image-model.ts\nvar OpenAIImageModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get maxImagesPerCall() {\n    var _a;\n    return (_a = modelMaxImagesPerCall[this.modelId]) != null ? _a : 1;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async doGenerate({\n    prompt,\n    n,\n    size,\n    aspectRatio,\n    seed,\n    providerOptions,\n    headers,\n    abortSignal\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    if (aspectRatio != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"aspectRatio\",\n        details: \"This model does not support aspect ratio. Use `size` instead.\"\n      });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { value: response, responseHeaders } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/images/generations\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), headers),\n      body: {\n        model: this.modelId,\n        prompt,\n        n,\n        size,\n        ...(_d = providerOptions.openai) != null ? _d : {},\n        ...!hasDefaultResponseFormat.has(this.modelId) ? { response_format: \"b64_json\" } : {}\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiImageResponseSchema\n      ),\n      abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      images: response.data.map((item) => item.b64_json),\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders\n      },\n      providerMetadata: {\n        openai: {\n          images: response.data.map(\n            (item) => item.revised_prompt ? {\n              revisedPrompt: item.revised_prompt\n            } : null\n          )\n        }\n      }\n    };\n  }\n};\nvar openaiImageResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ b64_json: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), revised_prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional() })\n  )\n});\n\n// src/tool/code-interpreter.ts\n\n\nvar codeInterpreterInputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  containerId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar codeInterpreterOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n    ])\n  ).nullish()\n});\nvar codeInterpreterArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  container: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      fileIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n    })\n  ]).optional()\n});\nvar codeInterpreterToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.code_interpreter\",\n  name: \"code_interpreter\",\n  inputSchema: codeInterpreterInputSchema,\n  outputSchema: codeInterpreterOutputSchema\n});\nvar codeInterpreter = (args = {}) => {\n  return codeInterpreterToolFactory(args);\n};\n\n// src/tool/file-search.ts\n\n\nvar comparisonFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  key: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"eq\", \"ne\", \"gt\", \"gte\", \"lt\", \"lte\"]),\n  value: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean()])\n});\nvar compoundFilterSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"and\", \"or\"]),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, zod_v4__WEBPACK_IMPORTED_MODULE_0__.lazy(() => compoundFilterSchema)])\n  )\n});\nvar fileSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  vectorStoreIds: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n  maxNumResults: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n  ranking: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    ranker: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    scoreThreshold: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n  }).optional(),\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([comparisonFilterSchema, compoundFilterSchema]).optional()\n});\nvar fileSearchOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n  results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n      fileId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ).nullable()\n});\nvar fileSearch = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.file_search\",\n  name: \"file_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}),\n  outputSchema: fileSearchOutputSchema\n});\n\n// src/tool/image-generation.ts\n\n\nvar imageGenerationArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  background: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"opaque\", \"transparent\"]).optional(),\n  inputFidelity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"high\"]).optional(),\n  inputImageMask: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    fileId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    imageUrl: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  moderation: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\"]).optional(),\n  outputCompression: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().int().min(0).max(100).optional(),\n  outputFormat: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"png\", \"jpeg\", \"webp\"]).optional(),\n  quality: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"low\", \"medium\", \"high\"]).optional(),\n  size: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"1024x1024\", \"1024x1536\", \"1536x1024\", \"auto\"]).optional()\n}).strict();\nvar imageGenerationOutputSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar imageGenerationToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactoryWithOutputSchema)({\n  id: \"openai.image_generation\",\n  name: \"image_generation\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({}),\n  outputSchema: imageGenerationOutputSchema\n});\nvar imageGeneration = (args = {}) => {\n  return imageGenerationToolFactory(args);\n};\n\n// src/tool/web-search.ts\n\n\nvar webSearchArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  filters: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    allowedDomains: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n  }).optional(),\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchToolFactory = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search\",\n  name: \"web_search\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\nvar webSearch = (args = {}) => {\n  return webSearchToolFactory(args);\n};\n\n// src/tool/web-search-preview.ts\n\n\nvar webSearchPreviewArgsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Search context size to use for the web search.\n   * - high: Most comprehensive context, highest cost, slower response\n   * - medium: Balanced context, cost, and latency (default)\n   * - low: Least context, lowest cost, fastest response\n   */\n  searchContextSize: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).optional(),\n  /**\n   * User location information to provide geographically relevant search results.\n   */\n  userLocation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Type of location (always 'approximate')\n     */\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"approximate\"),\n    /**\n     * Two-letter ISO country code (e.g., 'US', 'GB')\n     */\n    country: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * City name (free text, e.g., 'Minneapolis')\n     */\n    city: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * Region name (free text, e.g., 'Minnesota')\n     */\n    region: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    /**\n     * IANA timezone (e.g., 'America/Chicago')\n     */\n    timezone: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n  }).optional()\n});\nvar webSearchPreview = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createProviderDefinedToolFactory)({\n  id: \"openai.web_search_preview\",\n  name: \"web_search_preview\",\n  inputSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n        url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n      })\n    ]).nullish()\n  })\n});\n\n// src/openai-tools.ts\nvar openaiTools = {\n  /**\n   * The Code Interpreter tool allows models to write and run Python code in a\n   * sandboxed environment to solve complex problems in domains like data analysis,\n   * coding, and math.\n   *\n   * @param container - The container to use for the code interpreter.\n   *\n   * Must have name `code_interpreter`.\n   */\n  codeInterpreter,\n  /**\n   * File search is a tool available in the Responses API. It enables models to\n   * retrieve information in a knowledge base of previously uploaded files through\n   * semantic and keyword search.\n   *\n   * Must have name `file_search`.\n   *\n   * @param vectorStoreIds - The vector store IDs to use for the file search.\n   * @param maxNumResults - The maximum number of results to return.\n   * @param ranking - The ranking options to use for the file search.\n   * @param filters - The filters to use for the file search.\n   */\n  fileSearch,\n  /**\n   * The image generation tool allows you to generate images using a text prompt,\n   * and optionally image inputs. It leverages the GPT Image model,\n   * and automatically optimizes text inputs for improved performance.\n   *\n   * Must have name `image_generation`.\n   *\n   * @param size - Image dimensions (e.g., 1024x1024, 1024x1536)\n   * @param quality - Rendering quality (e.g. low, medium, high)\n   * @param format - File output format\n   * @param compression - Compression level (0-100%) for JPEG and WebP formats\n   * @param background - Transparent or opaque\n   */\n  imageGeneration,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search_preview`.\n   *\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   *\n   * @deprecated Use `webSearch` instead.\n   */\n  webSearchPreview,\n  /**\n   * Web search allows models to access up-to-date information from the internet\n   * and provide answers with sourced citations.\n   *\n   * Must have name `web_search`.\n   *\n   * @param filters - The filters to use for the web search.\n   * @param searchContextSize - The search context size to use for the web search.\n   * @param userLocation - The user location to use for the web search.\n   */\n  webSearch\n};\n\n// src/responses/openai-responses-language-model.ts\n\n\n\n\n// src/responses/convert-to-openai-responses-input.ts\n\n\n\nfunction isFileId(data, prefixes) {\n  if (!prefixes) return false;\n  return prefixes.some((prefix) => data.startsWith(prefix));\n}\nasync function convertToOpenAIResponsesInput({\n  prompt,\n  systemMessageMode,\n  fileIdPrefixes,\n  store\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const input = [];\n  const warnings = [];\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        switch (systemMessageMode) {\n          case \"system\": {\n            input.push({ role: \"system\", content });\n            break;\n          }\n          case \"developer\": {\n            input.push({ role: \"developer\", content });\n            break;\n          }\n          case \"remove\": {\n            warnings.push({\n              type: \"other\",\n              message: \"system messages are removed for this model\"\n            });\n            break;\n          }\n          default: {\n            const _exhaustiveCheck = systemMessageMode;\n            throw new Error(\n              `Unsupported system message mode: ${_exhaustiveCheck}`\n            );\n          }\n        }\n        break;\n      }\n      case \"user\": {\n        input.push({\n          role: \"user\",\n          content: content.map((part, index) => {\n            var _a2, _b2, _c2;\n            switch (part.type) {\n              case \"text\": {\n                return { type: \"input_text\", text: part.text };\n              }\n              case \"file\": {\n                if (part.mediaType.startsWith(\"image/\")) {\n                  const mediaType = part.mediaType === \"image/*\" ? \"image/jpeg\" : part.mediaType;\n                  return {\n                    type: \"input_image\",\n                    ...part.data instanceof URL ? { image_url: part.data.toString() } : typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      image_url: `data:${mediaType};base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    },\n                    detail: (_b2 = (_a2 = part.providerOptions) == null ? void 0 : _a2.openai) == null ? void 0 : _b2.imageDetail\n                  };\n                } else if (part.mediaType === \"application/pdf\") {\n                  if (part.data instanceof URL) {\n                    return {\n                      type: \"input_file\",\n                      file_url: part.data.toString()\n                    };\n                  }\n                  return {\n                    type: \"input_file\",\n                    ...typeof part.data === \"string\" && isFileId(part.data, fileIdPrefixes) ? { file_id: part.data } : {\n                      filename: (_c2 = part.filename) != null ? _c2 : `part-${index}.pdf`,\n                      file_data: `data:application/pdf;base64,${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertToBase64)(part.data)}`\n                    }\n                  };\n                } else {\n                  throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n                    functionality: `file part media type ${part.mediaType}`\n                  });\n                }\n              }\n            }\n          })\n        });\n        break;\n      }\n      case \"assistant\": {\n        const reasoningMessages = {};\n        const toolCallParts = {};\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              input.push({\n                role: \"assistant\",\n                content: [{ type: \"output_text\", text: part.text }],\n                id: (_c = (_b = (_a = part.providerOptions) == null ? void 0 : _a.openai) == null ? void 0 : _b.itemId) != null ? _c : void 0\n              });\n              break;\n            }\n            case \"tool-call\": {\n              toolCallParts[part.toolCallId] = part;\n              if (part.providerExecuted) {\n                break;\n              }\n              input.push({\n                type: \"function_call\",\n                call_id: part.toolCallId,\n                name: part.toolName,\n                arguments: JSON.stringify(part.input),\n                id: (_f = (_e = (_d = part.providerOptions) == null ? void 0 : _d.openai) == null ? void 0 : _e.itemId) != null ? _f : void 0\n              });\n              break;\n            }\n            case \"tool-result\": {\n              if (store) {\n                input.push({ type: \"item_reference\", id: part.toolCallId });\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Results for OpenAI tool ${part.toolName} are not sent to the API when store is false`\n                });\n              }\n              break;\n            }\n            case \"reasoning\": {\n              const providerOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n                provider: \"openai\",\n                providerOptions: part.providerOptions,\n                schema: openaiResponsesReasoningProviderOptionsSchema\n              });\n              const reasoningId = providerOptions == null ? void 0 : providerOptions.itemId;\n              if (reasoningId != null) {\n                const existingReasoningMessage = reasoningMessages[reasoningId];\n                const summaryParts = [];\n                if (part.text.length > 0) {\n                  summaryParts.push({ type: \"summary_text\", text: part.text });\n                } else if (existingReasoningMessage !== void 0) {\n                  warnings.push({\n                    type: \"other\",\n                    message: `Cannot append empty reasoning part to existing reasoning sequence. Skipping reasoning part: ${JSON.stringify(part)}.`\n                  });\n                }\n                if (existingReasoningMessage === void 0) {\n                  reasoningMessages[reasoningId] = {\n                    type: \"reasoning\",\n                    id: reasoningId,\n                    encrypted_content: providerOptions == null ? void 0 : providerOptions.reasoningEncryptedContent,\n                    summary: summaryParts\n                  };\n                  input.push(reasoningMessages[reasoningId]);\n                } else {\n                  existingReasoningMessage.summary.push(...summaryParts);\n                }\n              } else {\n                warnings.push({\n                  type: \"other\",\n                  message: `Non-OpenAI reasoning parts are not supported. Skipping reasoning part: ${JSON.stringify(part)}.`\n                });\n              }\n              break;\n            }\n          }\n        }\n        break;\n      }\n      case \"tool\": {\n        for (const part of content) {\n          const output = part.output;\n          let contentValue;\n          switch (output.type) {\n            case \"text\":\n            case \"error-text\":\n              contentValue = output.value;\n              break;\n            case \"content\":\n            case \"json\":\n            case \"error-json\":\n              contentValue = JSON.stringify(output.value);\n              break;\n          }\n          input.push({\n            type: \"function_call_output\",\n            call_id: part.toolCallId,\n            output: contentValue\n          });\n        }\n        break;\n      }\n      default: {\n        const _exhaustiveCheck = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n  return { input, warnings };\n}\nvar openaiResponsesReasoningProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  itemId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEncryptedContent: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/responses/map-openai-responses-finish-reason.ts\nfunction mapOpenAIResponseFinishReason({\n  finishReason,\n  hasFunctionCall\n}) {\n  switch (finishReason) {\n    case void 0:\n    case null:\n      return hasFunctionCall ? \"tool-calls\" : \"stop\";\n    case \"max_output_tokens\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    default:\n      return hasFunctionCall ? \"tool-calls\" : \"unknown\";\n  }\n}\n\n// src/responses/openai-responses-prepare-tools.ts\n\nfunction prepareResponsesTools({\n  tools,\n  toolChoice,\n  strictJsonSchema\n}) {\n  tools = (tools == null ? void 0 : tools.length) ? tools : void 0;\n  const toolWarnings = [];\n  if (tools == null) {\n    return { tools: void 0, toolChoice: void 0, toolWarnings };\n  }\n  const openaiTools2 = [];\n  for (const tool of tools) {\n    switch (tool.type) {\n      case \"function\":\n        openaiTools2.push({\n          type: \"function\",\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema,\n          strict: strictJsonSchema\n        });\n        break;\n      case \"provider-defined\": {\n        switch (tool.id) {\n          case \"openai.file_search\": {\n            const args = fileSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"file_search\",\n              vector_store_ids: args.vectorStoreIds,\n              max_num_results: args.maxNumResults,\n              ranking_options: args.ranking ? {\n                ranker: args.ranking.ranker,\n                score_threshold: args.ranking.scoreThreshold\n              } : void 0,\n              filters: args.filters\n            });\n            break;\n          }\n          case \"openai.web_search_preview\": {\n            const args = webSearchPreviewArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search_preview\",\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.web_search\": {\n            const args = webSearchArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"web_search\",\n              filters: args.filters != null ? { allowed_domains: args.filters.allowedDomains } : void 0,\n              search_context_size: args.searchContextSize,\n              user_location: args.userLocation\n            });\n            break;\n          }\n          case \"openai.code_interpreter\": {\n            const args = codeInterpreterArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"code_interpreter\",\n              container: args.container == null ? { type: \"auto\", file_ids: void 0 } : typeof args.container === \"string\" ? args.container : { type: \"auto\", file_ids: args.container.fileIds }\n            });\n            break;\n          }\n          case \"openai.image_generation\": {\n            const args = imageGenerationArgsSchema.parse(tool.args);\n            openaiTools2.push({\n              type: \"image_generation\",\n              background: args.background,\n              input_fidelity: args.inputFidelity,\n              input_image_mask: args.inputImageMask ? {\n                file_id: args.inputImageMask.fileId,\n                image_url: args.inputImageMask.imageUrl\n              } : void 0,\n              model: args.model,\n              size: args.size,\n              quality: args.quality,\n              moderation: args.moderation,\n              output_format: args.outputFormat,\n              output_compression: args.outputCompression\n            });\n            break;\n          }\n        }\n        break;\n      }\n      default:\n        toolWarnings.push({ type: \"unsupported-tool\", tool });\n        break;\n    }\n  }\n  if (toolChoice == null) {\n    return { tools: openaiTools2, toolChoice: void 0, toolWarnings };\n  }\n  const type = toolChoice.type;\n  switch (type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return { tools: openaiTools2, toolChoice: type, toolWarnings };\n    case \"tool\":\n      return {\n        tools: openaiTools2,\n        toolChoice: toolChoice.toolName === \"code_interpreter\" || toolChoice.toolName === \"file_search\" || toolChoice.toolName === \"image_generation\" || toolChoice.toolName === \"web_search_preview\" || toolChoice.toolName === \"web_search\" ? { type: toolChoice.toolName } : { type: \"function\", name: toolChoice.toolName },\n        toolWarnings\n      };\n    default: {\n      const _exhaustiveCheck = type;\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`\n      });\n    }\n  }\n}\n\n// src/responses/openai-responses-language-model.ts\nvar webSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n      query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"open_page\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"find\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      pattern: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ]).nullish()\n});\nvar fileSearchCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  queries: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n  results: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      attributes: zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      score: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ).nullish()\n});\nvar codeInterpreterCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"code_interpreter_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n  container_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  outputs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"logs\"), logs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }),\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"), url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() })\n    ])\n  ).nullable()\n});\nvar imageGenerationCallItem = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  result: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar TOP_LOGPROBS_MAX = 20;\nvar LOGPROBS_SCHEMA = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      })\n    )\n  })\n);\nvar OpenAIResponsesLanguageModel = class {\n  constructor(modelId, config) {\n    this.specificationVersion = \"v2\";\n    this.supportedUrls = {\n      \"image/*\": [/^https?:\\/\\/.*$/],\n      \"application/pdf\": [/^https?:\\/\\/.*$/]\n    };\n    this.modelId = modelId;\n    this.config = config;\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    maxOutputTokens,\n    temperature,\n    stopSequences,\n    topP,\n    topK,\n    presencePenalty,\n    frequencyPenalty,\n    seed,\n    prompt,\n    providerOptions,\n    tools,\n    toolChoice,\n    responseFormat\n  }) {\n    var _a, _b, _c, _d;\n    const warnings = [];\n    const modelConfig = getResponsesModelConfig(this.modelId);\n    if (topK != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"topK\" });\n    }\n    if (seed != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"seed\" });\n    }\n    if (presencePenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"presencePenalty\"\n      });\n    }\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"frequencyPenalty\"\n      });\n    }\n    if (stopSequences != null) {\n      warnings.push({ type: \"unsupported-setting\", setting: \"stopSequences\" });\n    }\n    const openaiOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openaiResponsesProviderOptionsSchema\n    });\n    const { input, warnings: inputWarnings } = await convertToOpenAIResponsesInput({\n      prompt,\n      systemMessageMode: modelConfig.systemMessageMode,\n      fileIdPrefixes: this.config.fileIdPrefixes,\n      store: (_a = openaiOptions == null ? void 0 : openaiOptions.store) != null ? _a : true\n    });\n    warnings.push(...inputWarnings);\n    const strictJsonSchema = (_b = openaiOptions == null ? void 0 : openaiOptions.strictJsonSchema) != null ? _b : false;\n    let include = openaiOptions == null ? void 0 : openaiOptions.include;\n    function addInclude(key) {\n      include = include != null ? [...include, key] : [key];\n    }\n    function hasOpenAITool(id) {\n      return (tools == null ? void 0 : tools.find(\n        (tool) => tool.type === \"provider-defined\" && tool.id === id\n      )) != null;\n    }\n    const topLogprobs = typeof (openaiOptions == null ? void 0 : openaiOptions.logprobs) === \"number\" ? openaiOptions == null ? void 0 : openaiOptions.logprobs : (openaiOptions == null ? void 0 : openaiOptions.logprobs) === true ? TOP_LOGPROBS_MAX : void 0;\n    if (topLogprobs) {\n      addInclude(\"message.output_text.logprobs\");\n    }\n    const webSearchToolName = (_c = tools == null ? void 0 : tools.find(\n      (tool) => tool.type === \"provider-defined\" && (tool.id === \"openai.web_search\" || tool.id === \"openai.web_search_preview\")\n    )) == null ? void 0 : _c.name;\n    if (webSearchToolName) {\n      addInclude(\"web_search_call.action.sources\");\n    }\n    if (hasOpenAITool(\"openai.code_interpreter\")) {\n      addInclude(\"code_interpreter_call.outputs\");\n    }\n    const baseArgs = {\n      model: this.modelId,\n      input,\n      temperature,\n      top_p: topP,\n      max_output_tokens: maxOutputTokens,\n      ...((responseFormat == null ? void 0 : responseFormat.type) === \"json\" || (openaiOptions == null ? void 0 : openaiOptions.textVerbosity)) && {\n        text: {\n          ...(responseFormat == null ? void 0 : responseFormat.type) === \"json\" && {\n            format: responseFormat.schema != null ? {\n              type: \"json_schema\",\n              strict: strictJsonSchema,\n              name: (_d = responseFormat.name) != null ? _d : \"response\",\n              description: responseFormat.description,\n              schema: responseFormat.schema\n            } : { type: \"json_object\" }\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.textVerbosity) && {\n            verbosity: openaiOptions.textVerbosity\n          }\n        }\n      },\n      // provider options:\n      max_tool_calls: openaiOptions == null ? void 0 : openaiOptions.maxToolCalls,\n      metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,\n      parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,\n      previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,\n      store: openaiOptions == null ? void 0 : openaiOptions.store,\n      user: openaiOptions == null ? void 0 : openaiOptions.user,\n      instructions: openaiOptions == null ? void 0 : openaiOptions.instructions,\n      service_tier: openaiOptions == null ? void 0 : openaiOptions.serviceTier,\n      include,\n      prompt_cache_key: openaiOptions == null ? void 0 : openaiOptions.promptCacheKey,\n      safety_identifier: openaiOptions == null ? void 0 : openaiOptions.safetyIdentifier,\n      top_logprobs: topLogprobs,\n      // model-specific settings:\n      ...modelConfig.isReasoningModel && ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null || (openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) && {\n        reasoning: {\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {\n            effort: openaiOptions.reasoningEffort\n          },\n          ...(openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null && {\n            summary: openaiOptions.reasoningSummary\n          }\n        }\n      },\n      ...modelConfig.requiredAutoTruncation && {\n        truncation: \"auto\"\n      }\n    };\n    if (modelConfig.isReasoningModel) {\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"temperature\",\n          details: \"temperature is not supported for reasoning models\"\n        });\n      }\n      if (baseArgs.top_p != null) {\n        baseArgs.top_p = void 0;\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"topP\",\n          details: \"topP is not supported for reasoning models\"\n        });\n      }\n    } else {\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningEffort\",\n          details: \"reasoningEffort is not supported for non-reasoning models\"\n        });\n      }\n      if ((openaiOptions == null ? void 0 : openaiOptions.reasoningSummary) != null) {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"reasoningSummary\",\n          details: \"reasoningSummary is not supported for non-reasoning models\"\n        });\n      }\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"flex\" && !modelConfig.supportsFlexProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"flex processing is only available for o3, o4-mini, and gpt-5 models\"\n      });\n      delete baseArgs.service_tier;\n    }\n    if ((openaiOptions == null ? void 0 : openaiOptions.serviceTier) === \"priority\" && !modelConfig.supportsPriorityProcessing) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"serviceTier\",\n        details: \"priority processing is only available for supported models (gpt-4, gpt-5, gpt-5-mini, o3, o4-mini) and requires Enterprise access. gpt-5-nano is not supported\"\n      });\n      delete baseArgs.service_tier;\n    }\n    const {\n      tools: openaiTools2,\n      toolChoice: openaiToolChoice,\n      toolWarnings\n    } = prepareResponsesTools({\n      tools,\n      toolChoice,\n      strictJsonSchema\n    });\n    return {\n      webSearchToolName,\n      args: {\n        ...baseArgs,\n        tools: openaiTools2,\n        tool_choice: openaiToolChoice\n      },\n      warnings: [...warnings, ...toolWarnings]\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const url = this.config.url({\n      path: \"/responses\",\n      modelId: this.modelId\n    });\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url,\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n          error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n          }).nullish(),\n          model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n          output: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n                role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"output_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                    logprobs: LOGPROBS_SCHEMA.nullish(),\n                    annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                      zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                          url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n                          file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                          filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                          index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n                          quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n                        }),\n                        zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                          type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"container_file_citation\")\n                        })\n                      ])\n                    )\n                  })\n                )\n              }),\n              webSearchCallItem,\n              fileSearchCallItem,\n              codeInterpreterCallItem,\n              imageGenerationCallItem,\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n                call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n              }),\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n                id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"summary_text\"),\n                    text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n                  })\n                )\n              })\n            ])\n          ),\n          service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullable(),\n          usage: usageSchema2\n        })\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (response.error) {\n      throw new _ai_sdk_provider__WEBPACK_IMPORTED_MODULE_2__.APICallError({\n        message: response.error.message,\n        url,\n        requestBodyValues: body,\n        statusCode: 400,\n        responseHeaders,\n        responseBody: rawResponse,\n        isRetryable: false\n      });\n    }\n    const content = [];\n    const logprobs = [];\n    let hasFunctionCall = false;\n    for (const part of response.output) {\n      switch (part.type) {\n        case \"reasoning\": {\n          if (part.summary.length === 0) {\n            part.summary.push({ type: \"summary_text\", text: \"\" });\n          }\n          for (const summary of part.summary) {\n            content.push({\n              type: \"reasoning\",\n              text: summary.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id,\n                  reasoningEncryptedContent: (_a = part.encrypted_content) != null ? _a : null\n                }\n              }\n            });\n          }\n          break;\n        }\n        case \"image_generation_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"image_generation\",\n            input: \"{}\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"image_generation\",\n            result: {\n              result: part.result\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"message\": {\n          for (const contentPart of part.content) {\n            if (((_c = (_b = options.providerOptions) == null ? void 0 : _b.openai) == null ? void 0 : _c.logprobs) && contentPart.logprobs) {\n              logprobs.push(contentPart.logprobs);\n            }\n            content.push({\n              type: \"text\",\n              text: contentPart.text,\n              providerMetadata: {\n                openai: {\n                  itemId: part.id\n                }\n              }\n            });\n            for (const annotation of contentPart.annotations) {\n              if (annotation.type === \"url_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_f = (_e = (_d = this.config).generateId) == null ? void 0 : _e.call(_d)) != null ? _f : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: annotation.url,\n                  title: annotation.title\n                });\n              } else if (annotation.type === \"file_citation\") {\n                content.push({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_i = (_h = (_g = this.config).generateId) == null ? void 0 : _h.call(_g)) != null ? _i : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_k = (_j = annotation.quote) != null ? _j : annotation.filename) != null ? _k : \"Document\",\n                  filename: (_l = annotation.filename) != null ? _l : annotation.file_id\n                });\n              }\n            }\n          }\n          break;\n        }\n        case \"function_call\": {\n          hasFunctionCall = true;\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.call_id,\n            toolName: part.name,\n            input: part.arguments,\n            providerMetadata: {\n              openai: {\n                itemId: part.id\n              }\n            }\n          });\n          break;\n        }\n        case \"web_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            input: JSON.stringify({ action: part.action }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n            result: { status: part.status },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"computer_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            input: \"\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"computer_use\",\n            result: {\n              type: \"computer_use_tool_result\",\n              status: part.status || \"completed\"\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"file_search_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            input: \"{}\",\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"file_search\",\n            result: {\n              queries: part.queries,\n              results: (_n = (_m = part.results) == null ? void 0 : _m.map((result) => ({\n                attributes: result.attributes,\n                fileId: result.file_id,\n                filename: result.filename,\n                score: result.score,\n                text: result.text\n              }))) != null ? _n : null\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n        case \"code_interpreter_call\": {\n          content.push({\n            type: \"tool-call\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            input: JSON.stringify({\n              code: part.code,\n              containerId: part.container_id\n            }),\n            providerExecuted: true\n          });\n          content.push({\n            type: \"tool-result\",\n            toolCallId: part.id,\n            toolName: \"code_interpreter\",\n            result: {\n              outputs: part.outputs\n            },\n            providerExecuted: true\n          });\n          break;\n        }\n      }\n    }\n    const providerMetadata = {\n      openai: { responseId: response.id }\n    };\n    if (logprobs.length > 0) {\n      providerMetadata.openai.logprobs = logprobs;\n    }\n    if (typeof response.service_tier === \"string\") {\n      providerMetadata.openai.serviceTier = response.service_tier;\n    }\n    return {\n      content,\n      finishReason: mapOpenAIResponseFinishReason({\n        finishReason: (_o = response.incomplete_details) == null ? void 0 : _o.reason,\n        hasFunctionCall\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        reasoningTokens: (_q = (_p = response.usage.output_tokens_details) == null ? void 0 : _p.reasoning_tokens) != null ? _q : void 0,\n        cachedInputTokens: (_s = (_r = response.usage.input_tokens_details) == null ? void 0 : _r.cached_tokens) != null ? _s : void 0\n      },\n      request: { body },\n      response: {\n        id: response.id,\n        timestamp: new Date(response.created_at * 1e3),\n        modelId: response.model,\n        headers: responseHeaders,\n        body: rawResponse\n      },\n      providerMetadata,\n      warnings\n    };\n  }\n  async doStream(options) {\n    const {\n      args: body,\n      warnings,\n      webSearchToolName\n    } = await this.getArgs(options);\n    const { responseHeaders, value: response } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/responses\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: {\n        ...body,\n        stream: true\n      },\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createEventSourceResponseHandler)(\n        openaiResponsesChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const self = this;\n    let finishReason = \"unknown\";\n    const usage = {\n      inputTokens: void 0,\n      outputTokens: void 0,\n      totalTokens: void 0\n    };\n    const logprobs = [];\n    let responseId = null;\n    const ongoingToolCalls = {};\n    let hasFunctionCall = false;\n    const activeReasoning = {};\n    let serviceTier;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          start(controller) {\n            controller.enqueue({ type: \"stream-start\", warnings });\n          },\n          transform(chunk, controller) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w;\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: \"raw\", rawValue: chunk.rawValue });\n            }\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (isResponseOutputItemAddedChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: value.item.name,\n                  toolCallId: value.item.call_id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.call_id,\n                  toolName: value.item.name\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: webSearchToolName != null ? webSearchToolName : \"web_search\"\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = {\n                  toolName: \"computer_use\",\n                  toolCallId: value.item.id\n                };\n                controller.enqueue({\n                  type: \"tool-input-start\",\n                  id: value.item.id,\n                  toolName: \"computer_use\"\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  input: \"{}\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"image_generation_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"image_generation\",\n                  input: \"{}\",\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: value.item.id,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (isResponseOutputItemAddedReasoningChunk(value)) {\n                activeReasoning[value.item.id] = {\n                  encryptedContent: value.item.encrypted_content,\n                  summaryParts: [0]\n                };\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item.id}:0`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id,\n                      reasoningEncryptedContent: (_a = value.item.encrypted_content) != null ? _a : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseOutputItemDoneChunk(value)) {\n              if (value.item.type === \"function_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                hasFunctionCall = true;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.call_id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.call_id,\n                  toolName: value.item.name,\n                  input: value.item.arguments,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item.id\n                    }\n                  }\n                });\n              } else if (value.item.type === \"web_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  input: JSON.stringify({ action: value.item.action }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"web_search\",\n                  result: { status: value.item.status },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"computer_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-input-end\",\n                  id: value.item.id\n                });\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  input: \"\",\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"computer_use\",\n                  result: {\n                    type: \"computer_use_tool_result\",\n                    status: value.item.status || \"completed\"\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"file_search_call\") {\n                ongoingToolCalls[value.output_index] = void 0;\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"file_search\",\n                  result: {\n                    queries: value.item.queries,\n                    results: (_c = (_b = value.item.results) == null ? void 0 : _b.map((result) => ({\n                      attributes: result.attributes,\n                      fileId: result.file_id,\n                      filename: result.filename,\n                      score: result.score,\n                      text: result.text\n                    }))) != null ? _c : null\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"code_interpreter_call\") {\n                controller.enqueue({\n                  type: \"tool-call\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  input: JSON.stringify({\n                    code: value.item.code,\n                    containerId: value.item.container_id\n                  }),\n                  providerExecuted: true\n                });\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"code_interpreter\",\n                  result: {\n                    outputs: value.item.outputs\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"image_generation_call\") {\n                controller.enqueue({\n                  type: \"tool-result\",\n                  toolCallId: value.item.id,\n                  toolName: \"image_generation\",\n                  result: {\n                    result: value.item.result\n                  },\n                  providerExecuted: true\n                });\n              } else if (value.item.type === \"message\") {\n                controller.enqueue({\n                  type: \"text-end\",\n                  id: value.item.id\n                });\n              } else if (isResponseOutputItemDoneReasoningChunk(value)) {\n                const activeReasoningPart = activeReasoning[value.item.id];\n                for (const summaryIndex of activeReasoningPart.summaryParts) {\n                  controller.enqueue({\n                    type: \"reasoning-end\",\n                    id: `${value.item.id}:${summaryIndex}`,\n                    providerMetadata: {\n                      openai: {\n                        itemId: value.item.id,\n                        reasoningEncryptedContent: (_d = value.item.encrypted_content) != null ? _d : null\n                      }\n                    }\n                  });\n                }\n                delete activeReasoning[value.item.id];\n              }\n            } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {\n              const toolCall = ongoingToolCalls[value.output_index];\n              if (toolCall != null) {\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.toolCallId,\n                  delta: value.delta\n                });\n              }\n            } else if (isResponseCreatedChunk(value)) {\n              responseId = value.response.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.response.id,\n                timestamp: new Date(value.response.created_at * 1e3),\n                modelId: value.response.model\n              });\n            } else if (isTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"text-delta\",\n                id: value.item_id,\n                delta: value.delta\n              });\n              if (((_f = (_e = options.providerOptions) == null ? void 0 : _e.openai) == null ? void 0 : _f.logprobs) && value.logprobs) {\n                logprobs.push(value.logprobs);\n              }\n            } else if (isResponseReasoningSummaryPartAddedChunk(value)) {\n              if (value.summary_index > 0) {\n                (_g = activeReasoning[value.item_id]) == null ? void 0 : _g.summaryParts.push(\n                  value.summary_index\n                );\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: `${value.item_id}:${value.summary_index}`,\n                  providerMetadata: {\n                    openai: {\n                      itemId: value.item_id,\n                      reasoningEncryptedContent: (_i = (_h = activeReasoning[value.item_id]) == null ? void 0 : _h.encryptedContent) != null ? _i : null\n                    }\n                  }\n                });\n              }\n            } else if (isResponseReasoningSummaryTextDeltaChunk(value)) {\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                id: `${value.item_id}:${value.summary_index}`,\n                delta: value.delta,\n                providerMetadata: {\n                  openai: {\n                    itemId: value.item_id\n                  }\n                }\n              });\n            } else if (isResponseFinishedChunk(value)) {\n              finishReason = mapOpenAIResponseFinishReason({\n                finishReason: (_j = value.response.incomplete_details) == null ? void 0 : _j.reason,\n                hasFunctionCall\n              });\n              usage.inputTokens = value.response.usage.input_tokens;\n              usage.outputTokens = value.response.usage.output_tokens;\n              usage.totalTokens = value.response.usage.input_tokens + value.response.usage.output_tokens;\n              usage.reasoningTokens = (_l = (_k = value.response.usage.output_tokens_details) == null ? void 0 : _k.reasoning_tokens) != null ? _l : void 0;\n              usage.cachedInputTokens = (_n = (_m = value.response.usage.input_tokens_details) == null ? void 0 : _m.cached_tokens) != null ? _n : void 0;\n              if (typeof value.response.service_tier === \"string\") {\n                serviceTier = value.response.service_tier;\n              }\n            } else if (isResponseAnnotationAddedChunk(value)) {\n              if (value.annotation.type === \"url_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"url\",\n                  id: (_q = (_p = (_o = self.config).generateId) == null ? void 0 : _p.call(_o)) != null ? _q : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  url: value.annotation.url,\n                  title: value.annotation.title\n                });\n              } else if (value.annotation.type === \"file_citation\") {\n                controller.enqueue({\n                  type: \"source\",\n                  sourceType: \"document\",\n                  id: (_t = (_s = (_r = self.config).generateId) == null ? void 0 : _s.call(_r)) != null ? _t : (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.generateId)(),\n                  mediaType: \"text/plain\",\n                  title: (_v = (_u = value.annotation.quote) != null ? _u : value.annotation.filename) != null ? _v : \"Document\",\n                  filename: (_w = value.annotation.filename) != null ? _w : value.annotation.file_id\n                });\n              }\n            } else if (isErrorChunk(value)) {\n              controller.enqueue({ type: \"error\", error: value });\n            }\n          },\n          flush(controller) {\n            const providerMetadata = {\n              openai: {\n                responseId\n              }\n            };\n            if (logprobs.length > 0) {\n              providerMetadata.openai.logprobs = logprobs;\n            }\n            if (serviceTier !== void 0) {\n              providerMetadata.openai.serviceTier = serviceTier;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata\n            });\n          }\n        })\n      ),\n      request: { body },\n      response: { headers: responseHeaders }\n    };\n  }\n};\nvar usageSchema2 = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  input_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  input_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish(),\n  output_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  output_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish() }).nullish()\n});\nvar textDeltaChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  logprobs: LOGPROBS_SCHEMA.nullish()\n});\nvar errorChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"error\"),\n  code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  sequence_number: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseFinishedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"response.completed\", \"response.incomplete\"]),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    incomplete_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).nullish(),\n    usage: usageSchema2,\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseCreatedChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.created\"),\n  response: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    created_at: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    service_tier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n  })\n});\nvar responseOutputItemAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.added\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"web_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      action: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"search\"),\n        query: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n      }).nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_search_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"image_generation_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  ])\n});\nvar responseOutputItemDoneSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_item.done\"),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  item: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"message\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      encrypted_content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      call_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    }),\n    codeInterpreterCallItem,\n    imageGenerationCallItem,\n    webSearchCallItem,\n    fileSearchCallItem,\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"computer_call\"),\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      status: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"completed\")\n    })\n  ])\n});\nvar responseFunctionCallArgumentsDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.function_call_arguments.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  output_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar responseAnnotationAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.output_text.annotation.added\"),\n  annotation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"url_citation\"),\n      url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"file_citation\"),\n      file_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      filename: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      quote: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n    })\n  ])\n});\nvar responseReasoningSummaryPartAddedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_part.added\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nvar responseReasoningSummaryTextDeltaSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"response.reasoning_summary_text.delta\"),\n  item_id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  summary_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n  delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar openaiResponsesChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  textDeltaChunkSchema,\n  responseFinishedChunkSchema,\n  responseCreatedChunkSchema,\n  responseOutputItemAddedSchema,\n  responseOutputItemDoneSchema,\n  responseFunctionCallArgumentsDeltaSchema,\n  responseAnnotationAddedSchema,\n  responseReasoningSummaryPartAddedSchema,\n  responseReasoningSummaryTextDeltaSchema,\n  errorChunkSchema,\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({ type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string() }).loose()\n  // fallback for unknown chunks\n]);\nfunction isTextDeltaChunk(chunk) {\n  return chunk.type === \"response.output_text.delta\";\n}\nfunction isResponseOutputItemDoneChunk(chunk) {\n  return chunk.type === \"response.output_item.done\";\n}\nfunction isResponseOutputItemDoneReasoningChunk(chunk) {\n  return isResponseOutputItemDoneChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseFinishedChunk(chunk) {\n  return chunk.type === \"response.completed\" || chunk.type === \"response.incomplete\";\n}\nfunction isResponseCreatedChunk(chunk) {\n  return chunk.type === \"response.created\";\n}\nfunction isResponseFunctionCallArgumentsDeltaChunk(chunk) {\n  return chunk.type === \"response.function_call_arguments.delta\";\n}\nfunction isResponseOutputItemAddedChunk(chunk) {\n  return chunk.type === \"response.output_item.added\";\n}\nfunction isResponseOutputItemAddedReasoningChunk(chunk) {\n  return isResponseOutputItemAddedChunk(chunk) && chunk.item.type === \"reasoning\";\n}\nfunction isResponseAnnotationAddedChunk(chunk) {\n  return chunk.type === \"response.output_text.annotation.added\";\n}\nfunction isResponseReasoningSummaryPartAddedChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_part.added\";\n}\nfunction isResponseReasoningSummaryTextDeltaChunk(chunk) {\n  return chunk.type === \"response.reasoning_summary_text.delta\";\n}\nfunction isErrorChunk(chunk) {\n  return chunk.type === \"error\";\n}\nfunction getResponsesModelConfig(modelId) {\n  const supportsFlexProcessing2 = modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-chat\");\n  const supportsPriorityProcessing2 = modelId.startsWith(\"gpt-4\") || modelId.startsWith(\"gpt-5-mini\") || modelId.startsWith(\"gpt-5\") && !modelId.startsWith(\"gpt-5-nano\") && !modelId.startsWith(\"gpt-5-chat\") || modelId.startsWith(\"o3\") || modelId.startsWith(\"o4-mini\");\n  const defaults = {\n    requiredAutoTruncation: false,\n    systemMessageMode: \"system\",\n    supportsFlexProcessing: supportsFlexProcessing2,\n    supportsPriorityProcessing: supportsPriorityProcessing2\n  };\n  if (modelId.startsWith(\"gpt-5-chat\")) {\n    return {\n      ...defaults,\n      isReasoningModel: false\n    };\n  }\n  if (modelId.startsWith(\"o\") || modelId.startsWith(\"gpt-5\") || modelId.startsWith(\"codex-\") || modelId.startsWith(\"computer-use\")) {\n    if (modelId.startsWith(\"o1-mini\") || modelId.startsWith(\"o1-preview\")) {\n      return {\n        ...defaults,\n        isReasoningModel: true,\n        systemMessageMode: \"remove\"\n      };\n    }\n    return {\n      ...defaults,\n      isReasoningModel: true,\n      systemMessageMode: \"developer\"\n    };\n  }\n  return {\n    ...defaults,\n    isReasoningModel: false\n  };\n}\nvar openaiResponsesProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n      \"reasoning.encrypted_content\",\n      \"file_search_call.results\",\n      \"message.output_text.logprobs\"\n    ])\n  ).nullish(),\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  /**\n   * Return the log probabilities of the tokens.\n   *\n   * Setting to true will return the log probabilities of the tokens that\n   * were generated.\n   *\n   * Setting to a number will return the log probabilities of the top n\n   * tokens that were generated.\n   *\n   * @see https://platform.openai.com/docs/api-reference/responses/create\n   * @see https://cookbook.openai.com/examples/using_logprobs\n   */\n  logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(1).max(TOP_LOGPROBS_MAX)]).optional(),\n  /**\n   * The maximum number of total calls to built-in tools that can be processed in a response.\n   * This maximum number applies across all built-in tool calls, not per individual tool.\n   * Any further attempts to call a tool by the model will be ignored.\n   */\n  maxToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  metadata: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullish(),\n  parallelToolCalls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  previousResponseId: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  promptCacheKey: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningEffort: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  reasoningSummary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  safetyIdentifier: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  serviceTier: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"auto\", \"flex\", \"priority\"]).nullish(),\n  store: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  strictJsonSchema: zod_v4__WEBPACK_IMPORTED_MODULE_0__.boolean().nullish(),\n  textVerbosity: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"low\", \"medium\", \"high\"]).nullish(),\n  user: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\n\n// src/speech/openai-speech-model.ts\n\n\nvar OpenAIProviderOptionsSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  instructions: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  speed: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0.25).max(4).default(1).nullish()\n});\nvar OpenAISpeechModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    text,\n    voice = \"alloy\",\n    outputFormat = \"mp3\",\n    speed,\n    instructions,\n    language,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: OpenAIProviderOptionsSchema\n    });\n    const requestBody = {\n      model: this.modelId,\n      input: text,\n      voice,\n      response_format: \"mp3\",\n      speed,\n      instructions\n    };\n    if (outputFormat) {\n      if ([\"mp3\", \"opus\", \"aac\", \"flac\", \"wav\", \"pcm\"].includes(outputFormat)) {\n        requestBody.response_format = outputFormat;\n      } else {\n        warnings.push({\n          type: \"unsupported-setting\",\n          setting: \"outputFormat\",\n          details: `Unsupported output format: ${outputFormat}. Using mp3 instead.`\n        });\n      }\n    }\n    if (openAIOptions) {\n      const speechModelOptions = {};\n      for (const key in speechModelOptions) {\n        const value = speechModelOptions[key];\n        if (value !== void 0) {\n          requestBody[key] = value;\n        }\n      }\n    }\n    if (language) {\n      warnings.push({\n        type: \"unsupported-setting\",\n        setting: \"language\",\n        details: `OpenAI speech models do not support language selection. Language parameter \"${language}\" was ignored.`\n      });\n    }\n    return {\n      requestBody,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { requestBody, warnings } = await this.getArgs(options);\n    const {\n      value: audio,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postJsonToApi)({\n      url: this.config.url({\n        path: \"/audio/speech\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      body: requestBody,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createBinaryResponseHandler)(),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    return {\n      audio,\n      warnings,\n      request: {\n        body: JSON.stringify(requestBody)\n      },\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\n\n// src/transcription/openai-transcription-model.ts\n\n\n\n// src/transcription/openai-transcription-options.ts\n\nvar openAITranscriptionProviderOptions = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  /**\n   * Additional information to include in the transcription response.\n   */\n  include: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n  /**\n   * The language of the input audio in ISO-639-1 format.\n   */\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * An optional text to guide the model's style or continue a previous audio segment.\n   */\n  prompt: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  /**\n   * The sampling temperature, between 0 and 1.\n   * @default 0\n   */\n  temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1).default(0).optional(),\n  /**\n   * The timestamp granularities to populate for this transcription.\n   * @default ['segment']\n   */\n  timestampGranularities: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"word\", \"segment\"])).default([\"segment\"]).optional()\n});\n\n// src/transcription/openai-transcription-model.ts\nvar languageMap = {\n  afrikaans: \"af\",\n  arabic: \"ar\",\n  armenian: \"hy\",\n  azerbaijani: \"az\",\n  belarusian: \"be\",\n  bosnian: \"bs\",\n  bulgarian: \"bg\",\n  catalan: \"ca\",\n  chinese: \"zh\",\n  croatian: \"hr\",\n  czech: \"cs\",\n  danish: \"da\",\n  dutch: \"nl\",\n  english: \"en\",\n  estonian: \"et\",\n  finnish: \"fi\",\n  french: \"fr\",\n  galician: \"gl\",\n  german: \"de\",\n  greek: \"el\",\n  hebrew: \"he\",\n  hindi: \"hi\",\n  hungarian: \"hu\",\n  icelandic: \"is\",\n  indonesian: \"id\",\n  italian: \"it\",\n  japanese: \"ja\",\n  kannada: \"kn\",\n  kazakh: \"kk\",\n  korean: \"ko\",\n  latvian: \"lv\",\n  lithuanian: \"lt\",\n  macedonian: \"mk\",\n  malay: \"ms\",\n  marathi: \"mr\",\n  maori: \"mi\",\n  nepali: \"ne\",\n  norwegian: \"no\",\n  persian: \"fa\",\n  polish: \"pl\",\n  portuguese: \"pt\",\n  romanian: \"ro\",\n  russian: \"ru\",\n  serbian: \"sr\",\n  slovak: \"sk\",\n  slovenian: \"sl\",\n  spanish: \"es\",\n  swahili: \"sw\",\n  swedish: \"sv\",\n  tagalog: \"tl\",\n  tamil: \"ta\",\n  thai: \"th\",\n  turkish: \"tr\",\n  ukrainian: \"uk\",\n  urdu: \"ur\",\n  vietnamese: \"vi\",\n  welsh: \"cy\"\n};\nvar OpenAITranscriptionModel = class {\n  constructor(modelId, config) {\n    this.modelId = modelId;\n    this.config = config;\n    this.specificationVersion = \"v2\";\n  }\n  get provider() {\n    return this.config.provider;\n  }\n  async getArgs({\n    audio,\n    mediaType,\n    providerOptions\n  }) {\n    const warnings = [];\n    const openAIOptions = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.parseProviderOptions)({\n      provider: \"openai\",\n      providerOptions,\n      schema: openAITranscriptionProviderOptions\n    });\n    const formData = new FormData();\n    const blob = audio instanceof Uint8Array ? new Blob([audio]) : new Blob([(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.convertBase64ToUint8Array)(audio)]);\n    formData.append(\"model\", this.modelId);\n    const fileExtension = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.mediaTypeToExtension)(mediaType);\n    formData.append(\n      \"file\",\n      new File([blob], \"audio\", { type: mediaType }),\n      `audio.${fileExtension}`\n    );\n    if (openAIOptions) {\n      const transcriptionModelOptions = {\n        include: openAIOptions.include,\n        language: openAIOptions.language,\n        prompt: openAIOptions.prompt,\n        // https://platform.openai.com/docs/api-reference/audio/createTranscription#audio_createtranscription-response_format\n        // prefer verbose_json to get segments for models that support it\n        response_format: [\n          \"gpt-4o-transcribe\",\n          \"gpt-4o-mini-transcribe\"\n        ].includes(this.modelId) ? \"json\" : \"verbose_json\",\n        temperature: openAIOptions.temperature,\n        timestamp_granularities: openAIOptions.timestampGranularities\n      };\n      for (const [key, value] of Object.entries(transcriptionModelOptions)) {\n        if (value != null) {\n          if (Array.isArray(value)) {\n            for (const item of value) {\n              formData.append(`${key}[]`, String(item));\n            }\n          } else {\n            formData.append(key, String(value));\n          }\n        }\n      }\n    }\n    return {\n      formData,\n      warnings\n    };\n  }\n  async doGenerate(options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();\n    const { formData, warnings } = await this.getArgs(options);\n    const {\n      value: response,\n      responseHeaders,\n      rawValue: rawResponse\n    } = await (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.postFormDataToApi)({\n      url: this.config.url({\n        path: \"/audio/transcriptions\",\n        modelId: this.modelId\n      }),\n      headers: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.combineHeaders)(this.config.headers(), options.headers),\n      formData,\n      failedResponseHandler: openaiFailedResponseHandler,\n      successfulResponseHandler: (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.createJsonResponseHandler)(\n        openaiTranscriptionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const language = response.language != null && response.language in languageMap ? languageMap[response.language] : void 0;\n    return {\n      text: response.text,\n      segments: (_g = (_f = (_d = response.segments) == null ? void 0 : _d.map((segment) => ({\n        text: segment.text,\n        startSecond: segment.start,\n        endSecond: segment.end\n      }))) != null ? _f : (_e = response.words) == null ? void 0 : _e.map((word) => ({\n        text: word.word,\n        startSecond: word.start,\n        endSecond: word.end\n      }))) != null ? _g : [],\n      language,\n      durationInSeconds: (_h = response.duration) != null ? _h : void 0,\n      warnings,\n      response: {\n        timestamp: currentDate,\n        modelId: this.modelId,\n        headers: responseHeaders,\n        body: rawResponse\n      }\n    };\n  }\n};\nvar openaiTranscriptionResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n  language: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  duration: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n  words: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      word: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish(),\n  segments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      seek: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      start: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      end: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n      tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n      temperature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      avg_logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      compression_ratio: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      no_speech_prob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    })\n  ).nullish()\n});\n\n// src/openai-provider.ts\nfunction createOpenAI(options = {}) {\n  var _a, _b;\n  const baseURL = (_a = (0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.withoutTrailingSlash)(options.baseURL)) != null ? _a : \"https://api.openai.com/v1\";\n  const providerName = (_b = options.name) != null ? _b : \"openai\";\n  const getHeaders = () => ({\n    Authorization: `Bearer ${(0,_ai_sdk_provider_utils__WEBPACK_IMPORTED_MODULE_1__.loadApiKey)({\n      apiKey: options.apiKey,\n      environmentVariableName: \"OPENAI_API_KEY\",\n      description: \"OpenAI\"\n    })}`,\n    \"OpenAI-Organization\": options.organization,\n    \"OpenAI-Project\": options.project,\n    ...options.headers\n  });\n  const createChatModel = (modelId) => new OpenAIChatLanguageModel(modelId, {\n    provider: `${providerName}.chat`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createCompletionModel = (modelId) => new OpenAICompletionLanguageModel(modelId, {\n    provider: `${providerName}.completion`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createEmbeddingModel = (modelId) => new OpenAIEmbeddingModel(modelId, {\n    provider: `${providerName}.embedding`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createImageModel = (modelId) => new OpenAIImageModel(modelId, {\n    provider: `${providerName}.image`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createTranscriptionModel = (modelId) => new OpenAITranscriptionModel(modelId, {\n    provider: `${providerName}.transcription`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createSpeechModel = (modelId) => new OpenAISpeechModel(modelId, {\n    provider: `${providerName}.speech`,\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    fetch: options.fetch\n  });\n  const createLanguageModel = (modelId) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenAI model function cannot be called with the new keyword.\"\n      );\n    }\n    return createResponsesModel(modelId);\n  };\n  const createResponsesModel = (modelId) => {\n    return new OpenAIResponsesLanguageModel(modelId, {\n      provider: `${providerName}.responses`,\n      url: ({ path }) => `${baseURL}${path}`,\n      headers: getHeaders,\n      fetch: options.fetch,\n      fileIdPrefixes: [\"file-\"]\n    });\n  };\n  const provider = function(modelId) {\n    return createLanguageModel(modelId);\n  };\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  provider.responses = createResponsesModel;\n  provider.embedding = createEmbeddingModel;\n  provider.textEmbedding = createEmbeddingModel;\n  provider.textEmbeddingModel = createEmbeddingModel;\n  provider.image = createImageModel;\n  provider.imageModel = createImageModel;\n  provider.transcription = createTranscriptionModel;\n  provider.transcriptionModel = createTranscriptionModel;\n  provider.speech = createSpeechModel;\n  provider.speechModel = createSpeechModel;\n  provider.tools = openaiTools;\n  return provider;\n}\nvar openai = createOpenAI();\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFpLXNkaytvcGVuYWlAMi4wLjMyX3pvZEAzLjI1Ljc2L25vZGVfbW9kdWxlcy9AYWktc2RrL29wZW5haS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUlnQzs7QUFFaEM7QUFHMEI7QUFTTTtBQUNDOztBQUVqQztBQUMyQjtBQUM2QztBQUN4RSw0QkFBNEIsMENBQVE7QUFDcEMsU0FBUywwQ0FBUTtBQUNqQixhQUFhLDBDQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMENBQVE7QUFDbEIsV0FBVyx1Q0FBSztBQUNoQixVQUFVLHlDQUFPLEVBQUUsMENBQVEsSUFBSSwwQ0FBUTtBQUN2QyxHQUFHO0FBQ0gsQ0FBQztBQUNELGtDQUFrQyxzRkFBOEI7QUFDaEU7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFHMEI7QUFDK0I7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix5QkFBeUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDRCQUE0QjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxpQkFBaUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsd0NBQXdDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsV0FBVyxTQUFTLHVFQUFlLFlBQVk7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQSw4QkFBOEIsMkVBQTZCO0FBQzNEO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFD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LGlDQUFpQztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLElBQUk7QUFDbEIsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7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QUFDaEMsY0FBYyxNQUFNLFFBQVEsUUFBUSxFQUFFLEtBQUs7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy91dHNhdnNoYXJtYS9Eb2N1bWVudHMvR2l0SHViL0RpdkhhY2tzMjAyNS9ub2RlX21vZHVsZXMvLnBucG0vQGFpLXNkaytvcGVuYWlAMi4wLjMyX3pvZEAzLjI1Ljc2L25vZGVfbW9kdWxlcy9AYWktc2RrL29wZW5haS9kaXN0L2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvb3BlbmFpLXByb3ZpZGVyLnRzXG5pbXBvcnQge1xuICBsb2FkQXBpS2V5LFxuICB3aXRob3V0VHJhaWxpbmdTbGFzaFxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuXG4vLyBzcmMvY2hhdC9vcGVuYWktY2hhdC1sYW5ndWFnZS1tb2RlbC50c1xuaW1wb3J0IHtcbiAgSW52YWxpZFJlc3BvbnNlRGF0YUVycm9yXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5pbXBvcnQge1xuICBjb21iaW5lSGVhZGVycyxcbiAgY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIsXG4gIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIsXG4gIGdlbmVyYXRlSWQsXG4gIGlzUGFyc2FibGVKc29uLFxuICBwYXJzZVByb3ZpZGVyT3B0aW9ucyxcbiAgcG9zdEpzb25Ub0FwaVxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6MyB9IGZyb20gXCJ6b2QvdjRcIjtcblxuLy8gc3JjL29wZW5haS1lcnJvci50c1xuaW1wb3J0IHsgeiB9IGZyb20gXCJ6b2QvdjRcIjtcbmltcG9ydCB7IGNyZWF0ZUpzb25FcnJvclJlc3BvbnNlSGFuZGxlciB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG52YXIgb3BlbmFpRXJyb3JEYXRhU2NoZW1hID0gei5vYmplY3Qoe1xuICBlcnJvcjogei5vYmplY3Qoe1xuICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgLy8gVGhlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYmVsb3cgaXMgaGFuZGxlZCBsb29zZWx5IHRvIHN1cHBvcnRcbiAgICAvLyBPcGVuQUktY29tcGF0aWJsZSBwcm92aWRlcnMgdGhhdCBoYXZlIHNsaWdodGx5IGRpZmZlcmVudCBlcnJvclxuICAgIC8vIHJlc3BvbnNlczpcbiAgICB0eXBlOiB6LnN0cmluZygpLm51bGxpc2goKSxcbiAgICBwYXJhbTogei5hbnkoKS5udWxsaXNoKCksXG4gICAgY29kZTogei51bmlvbihbei5zdHJpbmcoKSwgei5udW1iZXIoKV0pLm51bGxpc2goKVxuICB9KVxufSk7XG52YXIgb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyID0gY3JlYXRlSnNvbkVycm9yUmVzcG9uc2VIYW5kbGVyKHtcbiAgZXJyb3JTY2hlbWE6IG9wZW5haUVycm9yRGF0YVNjaGVtYSxcbiAgZXJyb3JUb01lc3NhZ2U6IChkYXRhKSA9PiBkYXRhLmVycm9yLm1lc3NhZ2Vcbn0pO1xuXG4vLyBzcmMvY2hhdC9jb252ZXJ0LXRvLW9wZW5haS1jaGF0LW1lc3NhZ2VzLnRzXG5pbXBvcnQge1xuICBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuaW1wb3J0IHsgY29udmVydFRvQmFzZTY0IH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmZ1bmN0aW9uIGNvbnZlcnRUb09wZW5BSUNoYXRNZXNzYWdlcyh7XG4gIHByb21wdCxcbiAgc3lzdGVtTWVzc2FnZU1vZGUgPSBcInN5c3RlbVwiXG59KSB7XG4gIGNvbnN0IG1lc3NhZ2VzID0gW107XG4gIGNvbnN0IHdhcm5pbmdzID0gW107XG4gIGZvciAoY29uc3QgeyByb2xlLCBjb250ZW50IH0gb2YgcHJvbXB0KSB7XG4gICAgc3dpdGNoIChyb2xlKSB7XG4gICAgICBjYXNlIFwic3lzdGVtXCI6IHtcbiAgICAgICAgc3dpdGNoIChzeXN0ZW1NZXNzYWdlTW9kZSkge1xuICAgICAgICAgIGNhc2UgXCJzeXN0ZW1cIjoge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaCh7IHJvbGU6IFwic3lzdGVtXCIsIGNvbnRlbnQgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImRldmVsb3BlclwiOiB7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHsgcm9sZTogXCJkZXZlbG9wZXJcIiwgY29udGVudCB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6IHtcbiAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IFwic3lzdGVtIG1lc3NhZ2VzIGFyZSByZW1vdmVkIGZvciB0aGlzIG1vZGVsXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSBzeXN0ZW1NZXNzYWdlTW9kZTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYFVuc3VwcG9ydGVkIHN5c3RlbSBtZXNzYWdlIG1vZGU6ICR7X2V4aGF1c3RpdmVDaGVja31gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ1c2VyXCI6IHtcbiAgICAgICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAxICYmIGNvbnRlbnRbMF0udHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKHsgcm9sZTogXCJ1c2VyXCIsIGNvbnRlbnQ6IGNvbnRlbnRbMF0udGV4dCB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICBjb250ZW50OiBjb250ZW50Lm1hcCgocGFydCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jO1xuICAgICAgICAgICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwidGV4dFwiLCB0ZXh0OiBwYXJ0LnRleHQgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiZmlsZVwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQubWVkaWFUeXBlLnN0YXJ0c1dpdGgoXCJpbWFnZS9cIikpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhVHlwZSA9IHBhcnQubWVkaWFUeXBlID09PSBcImltYWdlLypcIiA/IFwiaW1hZ2UvanBlZ1wiIDogcGFydC5tZWRpYVR5cGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImltYWdlX3VybFwiLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZV91cmw6IHtcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBhcnQuZGF0YSBpbnN0YW5jZW9mIFVSTCA/IHBhcnQuZGF0YS50b1N0cmluZygpIDogYGRhdGE6JHttZWRpYVR5cGV9O2Jhc2U2NCwke2NvbnZlcnRUb0Jhc2U2NChwYXJ0LmRhdGEpfWAsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gT3BlbkFJIHNwZWNpZmljIGV4dGVuc2lvbjogaW1hZ2UgZGV0YWlsXG4gICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiAoX2IgPSAoX2EgPSBwYXJ0LnByb3ZpZGVyT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm9wZW5haSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmltYWdlRGV0YWlsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0Lm1lZGlhVHlwZS5zdGFydHNXaXRoKFwiYXVkaW8vXCIpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocGFydC5kYXRhIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0eTogXCJhdWRpbyBmaWxlIHBhcnRzIHdpdGggVVJMc1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgc3dpdGNoIChwYXJ0Lm1lZGlhVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXVkaW8vd2F2XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnB1dF9hdWRpb1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfYXVkaW86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY29udmVydFRvQmFzZTY0KHBhcnQuZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdDogXCJ3YXZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1ZGlvL21wM1wiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXVkaW8vbXBlZ1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5wdXRfYXVkaW9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0X2F1ZGlvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNvbnZlcnRUb0Jhc2U2NChwYXJ0LmRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwibXAzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0eTogYGF1ZGlvIGNvbnRlbnQgcGFydHMgd2l0aCBtZWRpYSB0eXBlICR7cGFydC5tZWRpYVR5cGV9YFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0Lm1lZGlhVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9wZGZcIikge1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcnQuZGF0YSBpbnN0YW5jZW9mIFVSTCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IFwiUERGIGZpbGUgcGFydHMgd2l0aCBVUkxzXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgZmlsZTogdHlwZW9mIHBhcnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiBwYXJ0LmRhdGEuc3RhcnRzV2l0aChcImZpbGUtXCIpID8geyBmaWxlX2lkOiBwYXJ0LmRhdGEgfSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogKF9jID0gcGFydC5maWxlbmFtZSkgIT0gbnVsbCA/IF9jIDogYHBhcnQtJHtpbmRleH0ucGRmYCxcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGE6IGBkYXRhOmFwcGxpY2F0aW9uL3BkZjtiYXNlNjQsJHtjb252ZXJ0VG9CYXNlNjQocGFydC5kYXRhKX1gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IGBmaWxlIHBhcnQgbWVkaWEgdHlwZSAke3BhcnQubWVkaWFUeXBlfWBcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhc3Npc3RhbnRcIjoge1xuICAgICAgICBsZXQgdGV4dCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IHRvb2xDYWxscyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgY29udGVudCkge1xuICAgICAgICAgIHN3aXRjaCAocGFydC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICAgIHRleHQgKz0gcGFydC50ZXh0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJ0b29sLWNhbGxcIjoge1xuICAgICAgICAgICAgICB0b29sQ2FsbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IHBhcnQudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IHBhcnQudG9vbE5hbWUsXG4gICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IEpTT04uc3RyaW5naWZ5KHBhcnQuaW5wdXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgIHJvbGU6IFwiYXNzaXN0YW50XCIsXG4gICAgICAgICAgY29udGVudDogdGV4dCxcbiAgICAgICAgICB0b29sX2NhbGxzOiB0b29sQ2FsbHMubGVuZ3RoID4gMCA/IHRvb2xDYWxscyA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwidG9vbFwiOiB7XG4gICAgICAgIGZvciAoY29uc3QgdG9vbFJlc3BvbnNlIG9mIGNvbnRlbnQpIHtcbiAgICAgICAgICBjb25zdCBvdXRwdXQgPSB0b29sUmVzcG9uc2Uub3V0cHV0O1xuICAgICAgICAgIGxldCBjb250ZW50VmFsdWU7XG4gICAgICAgICAgc3dpdGNoIChvdXRwdXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvci10ZXh0XCI6XG4gICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IG91dHB1dC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY29udGVudFwiOlxuICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJlcnJvci1qc29uXCI6XG4gICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KG91dHB1dC52YWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgIHJvbGU6IFwidG9vbFwiLFxuICAgICAgICAgICAgdG9vbF9jYWxsX2lkOiB0b29sUmVzcG9uc2UudG9vbENhbGxJZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRWYWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gcm9sZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByb2xlOiAke19leGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7IG1lc3NhZ2VzLCB3YXJuaW5ncyB9O1xufVxuXG4vLyBzcmMvY2hhdC9nZXQtcmVzcG9uc2UtbWV0YWRhdGEudHNcbmZ1bmN0aW9uIGdldFJlc3BvbnNlTWV0YWRhdGEoe1xuICBpZCxcbiAgbW9kZWwsXG4gIGNyZWF0ZWRcbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBpZDogaWQgIT0gbnVsbCA/IGlkIDogdm9pZCAwLFxuICAgIG1vZGVsSWQ6IG1vZGVsICE9IG51bGwgPyBtb2RlbCA6IHZvaWQgMCxcbiAgICB0aW1lc3RhbXA6IGNyZWF0ZWQgIT0gbnVsbCA/IG5ldyBEYXRlKGNyZWF0ZWQgKiAxZTMpIDogdm9pZCAwXG4gIH07XG59XG5cbi8vIHNyYy9jaGF0L21hcC1vcGVuYWktZmluaXNoLXJlYXNvbi50c1xuZnVuY3Rpb24gbWFwT3BlbkFJRmluaXNoUmVhc29uKGZpbmlzaFJlYXNvbikge1xuICBzd2l0Y2ggKGZpbmlzaFJlYXNvbikge1xuICAgIGNhc2UgXCJzdG9wXCI6XG4gICAgICByZXR1cm4gXCJzdG9wXCI7XG4gICAgY2FzZSBcImxlbmd0aFwiOlxuICAgICAgcmV0dXJuIFwibGVuZ3RoXCI7XG4gICAgY2FzZSBcImNvbnRlbnRfZmlsdGVyXCI6XG4gICAgICByZXR1cm4gXCJjb250ZW50LWZpbHRlclwiO1xuICAgIGNhc2UgXCJmdW5jdGlvbl9jYWxsXCI6XG4gICAgY2FzZSBcInRvb2xfY2FsbHNcIjpcbiAgICAgIHJldHVybiBcInRvb2wtY2FsbHNcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwidW5rbm93blwiO1xuICB9XG59XG5cbi8vIHNyYy9jaGF0L29wZW5haS1jaGF0LW9wdGlvbnMudHNcbmltcG9ydCB7IHogYXMgejIgfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgb3BlbmFpUHJvdmlkZXJPcHRpb25zID0gejIub2JqZWN0KHtcbiAgLyoqXG4gICAqIE1vZGlmeSB0aGUgbGlrZWxpaG9vZCBvZiBzcGVjaWZpZWQgdG9rZW5zIGFwcGVhcmluZyBpbiB0aGUgY29tcGxldGlvbi5cbiAgICpcbiAgICogQWNjZXB0cyBhIEpTT04gb2JqZWN0IHRoYXQgbWFwcyB0b2tlbnMgKHNwZWNpZmllZCBieSB0aGVpciB0b2tlbiBJRCBpblxuICAgKiB0aGUgR1BUIHRva2VuaXplcikgdG8gYW4gYXNzb2NpYXRlZCBiaWFzIHZhbHVlIGZyb20gLTEwMCB0byAxMDAuXG4gICAqL1xuICBsb2dpdEJpYXM6IHoyLnJlY29yZCh6Mi5jb2VyY2UubnVtYmVyKCksIHoyLm51bWJlcigpKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9rZW5zLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIHRydWUgd2lsbCByZXR1cm4gdGhlIGxvZyBwcm9iYWJpbGl0aWVzIG9mIHRoZSB0b2tlbnMgdGhhdFxuICAgKiB3ZXJlIGdlbmVyYXRlZC5cbiAgICpcbiAgICogU2V0dGluZyB0byBhIG51bWJlciB3aWxsIHJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRvcCBuXG4gICAqIHRva2VucyB0aGF0IHdlcmUgZ2VuZXJhdGVkLlxuICAgKi9cbiAgbG9ncHJvYnM6IHoyLnVuaW9uKFt6Mi5ib29sZWFuKCksIHoyLm51bWJlcigpXSkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIHBhcmFsbGVsIGZ1bmN0aW9uIGNhbGxpbmcgZHVyaW5nIHRvb2wgdXNlLiBEZWZhdWx0IHRvIHRydWUuXG4gICAqL1xuICBwYXJhbGxlbFRvb2xDYWxsczogejIuYm9vbGVhbigpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcHJlc2VudGluZyB5b3VyIGVuZC11c2VyLCB3aGljaCBjYW4gaGVscCBPcGVuQUkgdG9cbiAgICogbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLlxuICAgKi9cbiAgdXNlcjogejIuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIFJlYXNvbmluZyBlZmZvcnQgZm9yIHJlYXNvbmluZyBtb2RlbHMuIERlZmF1bHRzIHRvIGBtZWRpdW1gLlxuICAgKi9cbiAgcmVhc29uaW5nRWZmb3J0OiB6Mi5lbnVtKFtcIm1pbmltYWxcIiwgXCJsb3dcIiwgXCJtZWRpdW1cIiwgXCJoaWdoXCJdKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgdG8gZ2VuZXJhdGUuIFVzZWZ1bCBmb3IgcmVhc29uaW5nIG1vZGVscy5cbiAgICovXG4gIG1heENvbXBsZXRpb25Ub2tlbnM6IHoyLm51bWJlcigpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBwZXJzaXN0ZW5jZSBpbiByZXNwb25zZXMgQVBJLlxuICAgKi9cbiAgc3RvcmU6IHoyLmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogTWV0YWRhdGEgdG8gYXNzb2NpYXRlIHdpdGggdGhlIHJlcXVlc3QuXG4gICAqL1xuICBtZXRhZGF0YTogejIucmVjb3JkKHoyLnN0cmluZygpLm1heCg2NCksIHoyLnN0cmluZygpLm1heCg1MTIpKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogUGFyYW1ldGVycyBmb3IgcHJlZGljdGlvbiBtb2RlLlxuICAgKi9cbiAgcHJlZGljdGlvbjogejIucmVjb3JkKHoyLnN0cmluZygpLCB6Mi5hbnkoKSkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gdXNlIHN0cnVjdHVyZWQgb3V0cHV0cy5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgc3RydWN0dXJlZE91dHB1dHM6IHoyLmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogU2VydmljZSB0aWVyIGZvciB0aGUgcmVxdWVzdC5cbiAgICogLSAnYXV0byc6IERlZmF1bHQgc2VydmljZSB0aWVyXG4gICAqIC0gJ2ZsZXgnOiA1MCUgY2hlYXBlciBwcm9jZXNzaW5nIGF0IHRoZSBjb3N0IG9mIGluY3JlYXNlZCBsYXRlbmN5LiBPbmx5IGF2YWlsYWJsZSBmb3IgbzMgYW5kIG80LW1pbmkgbW9kZWxzLlxuICAgKiAtICdwcmlvcml0eSc6IEhpZ2hlci1zcGVlZCBwcm9jZXNzaW5nIHdpdGggcHJlZGljdGFibHkgbG93IGxhdGVuY3kgYXQgcHJlbWl1bSBjb3N0LiBBdmFpbGFibGUgZm9yIEVudGVycHJpc2UgY3VzdG9tZXJzLlxuICAgKlxuICAgKiBAZGVmYXVsdCAnYXV0bydcbiAgICovXG4gIHNlcnZpY2VUaWVyOiB6Mi5lbnVtKFtcImF1dG9cIiwgXCJmbGV4XCIsIFwicHJpb3JpdHlcIl0pLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHVzZSBzdHJpY3QgSlNPTiBzY2hlbWEgdmFsaWRhdGlvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHN0cmljdEpzb25TY2hlbWE6IHoyLmJvb2xlYW4oKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIHZlcmJvc2l0eSBvZiB0aGUgbW9kZWwncyByZXNwb25zZXMuXG4gICAqIExvd2VyIHZhbHVlcyB3aWxsIHJlc3VsdCBpbiBtb3JlIGNvbmNpc2UgcmVzcG9uc2VzLCB3aGlsZSBoaWdoZXIgdmFsdWVzIHdpbGwgcmVzdWx0IGluIG1vcmUgdmVyYm9zZSByZXNwb25zZXMuXG4gICAqL1xuICB0ZXh0VmVyYm9zaXR5OiB6Mi5lbnVtKFtcImxvd1wiLCBcIm1lZGl1bVwiLCBcImhpZ2hcIl0pLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBBIGNhY2hlIGtleSBmb3IgcHJvbXB0IGNhY2hpbmcuIEFsbG93cyBtYW51YWwgY29udHJvbCBvdmVyIHByb21wdCBjYWNoaW5nIGJlaGF2aW9yLlxuICAgKiBVc2VmdWwgZm9yIGltcHJvdmluZyBjYWNoZSBoaXQgcmF0ZXMgYW5kIHdvcmtpbmcgYXJvdW5kIGF1dG9tYXRpYyBjYWNoaW5nIGlzc3Vlcy5cbiAgICovXG4gIHByb21wdENhY2hlS2V5OiB6Mi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogQSBzdGFibGUgaWRlbnRpZmllciB1c2VkIHRvIGhlbHAgZGV0ZWN0IHVzZXJzIG9mIHlvdXIgYXBwbGljYXRpb25cbiAgICogdGhhdCBtYXkgYmUgdmlvbGF0aW5nIE9wZW5BSSdzIHVzYWdlIHBvbGljaWVzLiBUaGUgSURzIHNob3VsZCBiZSBhXG4gICAqIHN0cmluZyB0aGF0IHVuaXF1ZWx5IGlkZW50aWZpZXMgZWFjaCB1c2VyLiBXZSByZWNvbW1lbmQgaGFzaGluZyB0aGVpclxuICAgKiB1c2VybmFtZSBvciBlbWFpbCBhZGRyZXNzLCBpbiBvcmRlciB0byBhdm9pZCBzZW5kaW5nIHVzIGFueSBpZGVudGlmeWluZ1xuICAgKiBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHNhZmV0eUlkZW50aWZpZXI6IHoyLnN0cmluZygpLm9wdGlvbmFsKClcbn0pO1xuXG4vLyBzcmMvY2hhdC9vcGVuYWktY2hhdC1wcmVwYXJlLXRvb2xzLnRzXG5pbXBvcnQge1xuICBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvciBhcyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjJcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbmZ1bmN0aW9uIHByZXBhcmVDaGF0VG9vbHMoe1xuICB0b29scyxcbiAgdG9vbENob2ljZSxcbiAgc3RydWN0dXJlZE91dHB1dHMsXG4gIHN0cmljdEpzb25TY2hlbWFcbn0pIHtcbiAgdG9vbHMgPSAodG9vbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHRvb2xzLmxlbmd0aCkgPyB0b29scyA6IHZvaWQgMDtcbiAgY29uc3QgdG9vbFdhcm5pbmdzID0gW107XG4gIGlmICh0b29scyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHsgdG9vbHM6IHZvaWQgMCwgdG9vbENob2ljZTogdm9pZCAwLCB0b29sV2FybmluZ3MgfTtcbiAgfVxuICBjb25zdCBvcGVuYWlUb29sczIgPSBbXTtcbiAgZm9yIChjb25zdCB0b29sIG9mIHRvb2xzKSB7XG4gICAgc3dpdGNoICh0b29sLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBvcGVuYWlUb29sczIucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHBhcmFtZXRlcnM6IHRvb2wuaW5wdXRTY2hlbWEsXG4gICAgICAgICAgICBzdHJpY3Q6IHN0cnVjdHVyZWRPdXRwdXRzID8gc3RyaWN0SnNvblNjaGVtYSA6IHZvaWQgMFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdG9vbFdhcm5pbmdzLnB1c2goeyB0eXBlOiBcInVuc3VwcG9ydGVkLXRvb2xcIiwgdG9vbCB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmICh0b29sQ2hvaWNlID09IG51bGwpIHtcbiAgICByZXR1cm4geyB0b29sczogb3BlbmFpVG9vbHMyLCB0b29sQ2hvaWNlOiB2b2lkIDAsIHRvb2xXYXJuaW5ncyB9O1xuICB9XG4gIGNvbnN0IHR5cGUgPSB0b29sQ2hvaWNlLnR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJhdXRvXCI6XG4gICAgY2FzZSBcIm5vbmVcIjpcbiAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgIHJldHVybiB7IHRvb2xzOiBvcGVuYWlUb29sczIsIHRvb2xDaG9pY2U6IHR5cGUsIHRvb2xXYXJuaW5ncyB9O1xuICAgIGNhc2UgXCJ0b29sXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b29sczogb3BlbmFpVG9vbHMyLFxuICAgICAgICB0b29sQ2hvaWNlOiB7XG4gICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgICBuYW1lOiB0b29sQ2hvaWNlLnRvb2xOYW1lXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0b29sV2FybmluZ3NcbiAgICAgIH07XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHR5cGU7XG4gICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IyKHtcbiAgICAgICAgZnVuY3Rpb25hbGl0eTogYHRvb2wgY2hvaWNlIHR5cGU6ICR7X2V4aGF1c3RpdmVDaGVja31gXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3JjL2NoYXQvb3BlbmFpLWNoYXQtbGFuZ3VhZ2UtbW9kZWwudHNcbnZhciBPcGVuQUlDaGF0TGFuZ3VhZ2VNb2RlbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobW9kZWxJZCwgY29uZmlnKSB7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmVyc2lvbiA9IFwidjJcIjtcbiAgICB0aGlzLnN1cHBvcnRlZFVybHMgPSB7XG4gICAgICBcImltYWdlLypcIjogWy9eaHR0cHM/OlxcL1xcLy4qJC9dXG4gICAgfTtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZ2V0QXJncyh7XG4gICAgcHJvbXB0LFxuICAgIG1heE91dHB1dFRva2VucyxcbiAgICB0ZW1wZXJhdHVyZSxcbiAgICB0b3BQLFxuICAgIHRvcEssXG4gICAgZnJlcXVlbmN5UGVuYWx0eSxcbiAgICBwcmVzZW5jZVBlbmFsdHksXG4gICAgc3RvcFNlcXVlbmNlcyxcbiAgICByZXNwb25zZUZvcm1hdCxcbiAgICBzZWVkLFxuICAgIHRvb2xzLFxuICAgIHRvb2xDaG9pY2UsXG4gICAgcHJvdmlkZXJPcHRpb25zXG4gIH0pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgICBjb25zdCBvcGVuYWlPcHRpb25zID0gKF9hID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnMoe1xuICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICBzY2hlbWE6IG9wZW5haVByb3ZpZGVyT3B0aW9uc1xuICAgIH0pKSAhPSBudWxsID8gX2EgOiB7fTtcbiAgICBjb25zdCBzdHJ1Y3R1cmVkT3V0cHV0cyA9IChfYiA9IG9wZW5haU9wdGlvbnMuc3RydWN0dXJlZE91dHB1dHMpICE9IG51bGwgPyBfYiA6IHRydWU7XG4gICAgaWYgKHRvcEsgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInRvcEtcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICgocmVzcG9uc2VGb3JtYXQgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3BvbnNlRm9ybWF0LnR5cGUpID09PSBcImpzb25cIiAmJiByZXNwb25zZUZvcm1hdC5zY2hlbWEgIT0gbnVsbCAmJiAhc3RydWN0dXJlZE91dHB1dHMpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJyZXNwb25zZUZvcm1hdFwiLFxuICAgICAgICBkZXRhaWxzOiBcIkpTT04gcmVzcG9uc2UgZm9ybWF0IHNjaGVtYSBpcyBvbmx5IHN1cHBvcnRlZCB3aXRoIHN0cnVjdHVyZWRPdXRwdXRzXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB7IG1lc3NhZ2VzLCB3YXJuaW5nczogbWVzc2FnZVdhcm5pbmdzIH0gPSBjb252ZXJ0VG9PcGVuQUlDaGF0TWVzc2FnZXMoXG4gICAgICB7XG4gICAgICAgIHByb21wdCxcbiAgICAgICAgc3lzdGVtTWVzc2FnZU1vZGU6IGdldFN5c3RlbU1lc3NhZ2VNb2RlKHRoaXMubW9kZWxJZClcbiAgICAgIH1cbiAgICApO1xuICAgIHdhcm5pbmdzLnB1c2goLi4ubWVzc2FnZVdhcm5pbmdzKTtcbiAgICBjb25zdCBzdHJpY3RKc29uU2NoZW1hID0gKF9jID0gb3BlbmFpT3B0aW9ucy5zdHJpY3RKc29uU2NoZW1hKSAhPSBudWxsID8gX2MgOiBmYWxzZTtcbiAgICBjb25zdCBiYXNlQXJncyA9IHtcbiAgICAgIC8vIG1vZGVsIGlkOlxuICAgICAgbW9kZWw6IHRoaXMubW9kZWxJZCxcbiAgICAgIC8vIG1vZGVsIHNwZWNpZmljIHNldHRpbmdzOlxuICAgICAgbG9naXRfYmlhczogb3BlbmFpT3B0aW9ucy5sb2dpdEJpYXMsXG4gICAgICBsb2dwcm9iczogb3BlbmFpT3B0aW9ucy5sb2dwcm9icyA9PT0gdHJ1ZSB8fCB0eXBlb2Ygb3BlbmFpT3B0aW9ucy5sb2dwcm9icyA9PT0gXCJudW1iZXJcIiA/IHRydWUgOiB2b2lkIDAsXG4gICAgICB0b3BfbG9ncHJvYnM6IHR5cGVvZiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzID09PSBcIm51bWJlclwiID8gb3BlbmFpT3B0aW9ucy5sb2dwcm9icyA6IHR5cGVvZiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzID09PSBcImJvb2xlYW5cIiA/IG9wZW5haU9wdGlvbnMubG9ncHJvYnMgPyAwIDogdm9pZCAwIDogdm9pZCAwLFxuICAgICAgdXNlcjogb3BlbmFpT3B0aW9ucy51c2VyLFxuICAgICAgcGFyYWxsZWxfdG9vbF9jYWxsczogb3BlbmFpT3B0aW9ucy5wYXJhbGxlbFRvb2xDYWxscyxcbiAgICAgIC8vIHN0YW5kYXJkaXplZCBzZXR0aW5nczpcbiAgICAgIG1heF90b2tlbnM6IG1heE91dHB1dFRva2VucyxcbiAgICAgIHRlbXBlcmF0dXJlLFxuICAgICAgdG9wX3A6IHRvcFAsXG4gICAgICBmcmVxdWVuY3lfcGVuYWx0eTogZnJlcXVlbmN5UGVuYWx0eSxcbiAgICAgIHByZXNlbmNlX3BlbmFsdHk6IHByZXNlbmNlUGVuYWx0eSxcbiAgICAgIHJlc3BvbnNlX2Zvcm1hdDogKHJlc3BvbnNlRm9ybWF0ID09IG51bGwgPyB2b2lkIDAgOiByZXNwb25zZUZvcm1hdC50eXBlKSA9PT0gXCJqc29uXCIgPyBzdHJ1Y3R1cmVkT3V0cHV0cyAmJiByZXNwb25zZUZvcm1hdC5zY2hlbWEgIT0gbnVsbCA/IHtcbiAgICAgICAgdHlwZTogXCJqc29uX3NjaGVtYVwiLFxuICAgICAgICBqc29uX3NjaGVtYToge1xuICAgICAgICAgIHNjaGVtYTogcmVzcG9uc2VGb3JtYXQuc2NoZW1hLFxuICAgICAgICAgIHN0cmljdDogc3RyaWN0SnNvblNjaGVtYSxcbiAgICAgICAgICBuYW1lOiAoX2QgPSByZXNwb25zZUZvcm1hdC5uYW1lKSAhPSBudWxsID8gX2QgOiBcInJlc3BvbnNlXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IHJlc3BvbnNlRm9ybWF0LmRlc2NyaXB0aW9uXG4gICAgICAgIH1cbiAgICAgIH0gOiB7IHR5cGU6IFwianNvbl9vYmplY3RcIiB9IDogdm9pZCAwLFxuICAgICAgc3RvcDogc3RvcFNlcXVlbmNlcyxcbiAgICAgIHNlZWQsXG4gICAgICB2ZXJib3NpdHk6IG9wZW5haU9wdGlvbnMudGV4dFZlcmJvc2l0eSxcbiAgICAgIC8vIG9wZW5haSBzcGVjaWZpYyBzZXR0aW5nczpcbiAgICAgIC8vIFRPRE8gQUkgU0RLIDY6IHJlbW92ZSwgd2UgYXV0by1tYXAgbWF4T3V0cHV0VG9rZW5zIG5vd1xuICAgICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zOiBvcGVuYWlPcHRpb25zLm1heENvbXBsZXRpb25Ub2tlbnMsXG4gICAgICBzdG9yZTogb3BlbmFpT3B0aW9ucy5zdG9yZSxcbiAgICAgIG1ldGFkYXRhOiBvcGVuYWlPcHRpb25zLm1ldGFkYXRhLFxuICAgICAgcHJlZGljdGlvbjogb3BlbmFpT3B0aW9ucy5wcmVkaWN0aW9uLFxuICAgICAgcmVhc29uaW5nX2VmZm9ydDogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdFZmZvcnQsXG4gICAgICBzZXJ2aWNlX3RpZXI6IG9wZW5haU9wdGlvbnMuc2VydmljZVRpZXIsXG4gICAgICBwcm9tcHRfY2FjaGVfa2V5OiBvcGVuYWlPcHRpb25zLnByb21wdENhY2hlS2V5LFxuICAgICAgc2FmZXR5X2lkZW50aWZpZXI6IG9wZW5haU9wdGlvbnMuc2FmZXR5SWRlbnRpZmllcixcbiAgICAgIC8vIG1lc3NhZ2VzOlxuICAgICAgbWVzc2FnZXNcbiAgICB9O1xuICAgIGlmIChpc1JlYXNvbmluZ01vZGVsKHRoaXMubW9kZWxJZCkpIHtcbiAgICAgIGlmIChiYXNlQXJncy50ZW1wZXJhdHVyZSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRlbXBlcmF0dXJlID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRlbXBlcmF0dXJlXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0ZW1wZXJhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MudG9wX3AgIT0gbnVsbCkge1xuICAgICAgICBiYXNlQXJncy50b3BfcCA9IHZvaWQgMDtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgICAgc2V0dGluZzogXCJ0b3BQXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0b3BQIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy5mcmVxdWVuY3lfcGVuYWx0eSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLmZyZXF1ZW5jeV9wZW5hbHR5ID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcImZyZXF1ZW5jeVBlbmFsdHlcIixcbiAgICAgICAgICBkZXRhaWxzOiBcImZyZXF1ZW5jeVBlbmFsdHkgaXMgbm90IHN1cHBvcnRlZCBmb3IgcmVhc29uaW5nIG1vZGVsc1wiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKGJhc2VBcmdzLnByZXNlbmNlX3BlbmFsdHkgIT0gbnVsbCkge1xuICAgICAgICBiYXNlQXJncy5wcmVzZW5jZV9wZW5hbHR5ID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInByZXNlbmNlUGVuYWx0eVwiLFxuICAgICAgICAgIGRldGFpbHM6IFwicHJlc2VuY2VQZW5hbHR5IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy5sb2dpdF9iaWFzICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MubG9naXRfYmlhcyA9IHZvaWQgMDtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwibG9naXRCaWFzIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChiYXNlQXJncy5sb2dwcm9icyAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLmxvZ3Byb2JzID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJsb2dwcm9icyBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MudG9wX2xvZ3Byb2JzICE9IG51bGwpIHtcbiAgICAgICAgYmFzZUFyZ3MudG9wX2xvZ3Byb2JzID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJ0b3BMb2dwcm9icyBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MubWF4X3Rva2VucyAhPSBudWxsKSB7XG4gICAgICAgIGlmIChiYXNlQXJncy5tYXhfY29tcGxldGlvbl90b2tlbnMgPT0gbnVsbCkge1xuICAgICAgICAgIGJhc2VBcmdzLm1heF9jb21wbGV0aW9uX3Rva2VucyA9IGJhc2VBcmdzLm1heF90b2tlbnM7XG4gICAgICAgIH1cbiAgICAgICAgYmFzZUFyZ3MubWF4X3Rva2VucyA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMubW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTRvLXNlYXJjaC1wcmV2aWV3XCIpIHx8IHRoaXMubW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTRvLW1pbmktc2VhcmNoLXByZXZpZXdcIikpIHtcbiAgICAgIGlmIChiYXNlQXJncy50ZW1wZXJhdHVyZSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRlbXBlcmF0dXJlID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRlbXBlcmF0dXJlXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0ZW1wZXJhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGUgc2VhcmNoIHByZXZpZXcgbW9kZWxzIGFuZCBoYXMgYmVlbiByZW1vdmVkLlwiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3BlbmFpT3B0aW9ucy5zZXJ2aWNlVGllciA9PT0gXCJmbGV4XCIgJiYgIXN1cHBvcnRzRmxleFByb2Nlc3NpbmcodGhpcy5tb2RlbElkKSkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInNlcnZpY2VUaWVyXCIsXG4gICAgICAgIGRldGFpbHM6IFwiZmxleCBwcm9jZXNzaW5nIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBvMywgbzQtbWluaSwgYW5kIGdwdC01IG1vZGVsc1wiXG4gICAgICB9KTtcbiAgICAgIGJhc2VBcmdzLnNlcnZpY2VfdGllciA9IHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKG9wZW5haU9wdGlvbnMuc2VydmljZVRpZXIgPT09IFwicHJpb3JpdHlcIiAmJiAhc3VwcG9ydHNQcmlvcml0eVByb2Nlc3NpbmcodGhpcy5tb2RlbElkKSkge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInNlcnZpY2VUaWVyXCIsXG4gICAgICAgIGRldGFpbHM6IFwicHJpb3JpdHkgcHJvY2Vzc2luZyBpcyBvbmx5IGF2YWlsYWJsZSBmb3Igc3VwcG9ydGVkIG1vZGVscyAoZ3B0LTQsIGdwdC01LCBncHQtNS1taW5pLCBvMywgbzQtbWluaSkgYW5kIHJlcXVpcmVzIEVudGVycHJpc2UgYWNjZXNzLiBncHQtNS1uYW5vIGlzIG5vdCBzdXBwb3J0ZWRcIlxuICAgICAgfSk7XG4gICAgICBiYXNlQXJncy5zZXJ2aWNlX3RpZXIgPSB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHRvb2xzOiBvcGVuYWlUb29sczIsXG4gICAgICB0b29sQ2hvaWNlOiBvcGVuYWlUb29sQ2hvaWNlLFxuICAgICAgdG9vbFdhcm5pbmdzXG4gICAgfSA9IHByZXBhcmVDaGF0VG9vbHMoe1xuICAgICAgdG9vbHMsXG4gICAgICB0b29sQ2hvaWNlLFxuICAgICAgc3RydWN0dXJlZE91dHB1dHMsXG4gICAgICBzdHJpY3RKc29uU2NoZW1hXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgLi4uYmFzZUFyZ3MsXG4gICAgICAgIHRvb2xzOiBvcGVuYWlUb29sczIsXG4gICAgICAgIHRvb2xfY2hvaWNlOiBvcGVuYWlUb29sQ2hvaWNlXG4gICAgICB9LFxuICAgICAgd2FybmluZ3M6IFsuLi53YXJuaW5ncywgLi4udG9vbFdhcm5pbmdzXVxuICAgIH07XG4gIH1cbiAgYXN5bmMgZG9HZW5lcmF0ZShvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2ksIF9qLCBfaywgX2wsIF9tLCBfbjtcbiAgICBjb25zdCB7IGFyZ3M6IGJvZHksIHdhcm5pbmdzIH0gPSBhd2FpdCB0aGlzLmdldEFyZ3Mob3B0aW9ucyk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgcmF3VmFsdWU6IHJhd1Jlc3BvbnNlXG4gICAgfSA9IGF3YWl0IHBvc3RKc29uVG9BcGkoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgICBwYXRoOiBcIi9jaGF0L2NvbXBsZXRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVycyh0aGlzLmNvbmZpZy5oZWFkZXJzKCksIG9wdGlvbnMuaGVhZGVycyksXG4gICAgICBib2R5LFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBvcGVuYWlGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyKFxuICAgICAgICBvcGVuYWlDaGF0UmVzcG9uc2VTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IGNob2ljZSA9IHJlc3BvbnNlLmNob2ljZXNbMF07XG4gICAgY29uc3QgY29udGVudCA9IFtdO1xuICAgIGNvbnN0IHRleHQgPSBjaG9pY2UubWVzc2FnZS5jb250ZW50O1xuICAgIGlmICh0ZXh0ICE9IG51bGwgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICBjb250ZW50LnB1c2goeyB0eXBlOiBcInRleHRcIiwgdGV4dCB9KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB0b29sQ2FsbCBvZiAoX2EgPSBjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzKSAhPSBudWxsID8gX2EgOiBbXSkge1xuICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgdG9vbENhbGxJZDogKF9iID0gdG9vbENhbGwuaWQpICE9IG51bGwgPyBfYiA6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgdG9vbE5hbWU6IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgIGlucHV0OiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGFubm90YXRpb24gb2YgKF9jID0gY2hvaWNlLm1lc3NhZ2UuYW5ub3RhdGlvbnMpICE9IG51bGwgPyBfYyA6IFtdKSB7XG4gICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICBzb3VyY2VUeXBlOiBcInVybFwiLFxuICAgICAgICBpZDogZ2VuZXJhdGVJZCgpLFxuICAgICAgICB1cmw6IGFubm90YXRpb24udXJsLFxuICAgICAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBsZXRpb25Ub2tlbkRldGFpbHMgPSAoX2QgPSByZXNwb25zZS51c2FnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHM7XG4gICAgY29uc3QgcHJvbXB0VG9rZW5EZXRhaWxzID0gKF9lID0gcmVzcG9uc2UudXNhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfZS5wcm9tcHRfdG9rZW5zX2RldGFpbHM7XG4gICAgY29uc3QgcHJvdmlkZXJNZXRhZGF0YSA9IHsgb3BlbmFpOiB7fSB9O1xuICAgIGlmICgoY29tcGxldGlvblRva2VuRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogY29tcGxldGlvblRva2VuRGV0YWlscy5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucykgIT0gbnVsbCkge1xuICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkuYWNjZXB0ZWRQcmVkaWN0aW9uVG9rZW5zID0gY29tcGxldGlvblRva2VuRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogY29tcGxldGlvblRva2VuRGV0YWlscy5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucztcbiAgICB9XG4gICAgaWYgKChjb21wbGV0aW9uVG9rZW5EZXRhaWxzID09IG51bGwgPyB2b2lkIDAgOiBjb21wbGV0aW9uVG9rZW5EZXRhaWxzLnJlamVjdGVkX3ByZWRpY3Rpb25fdG9rZW5zKSAhPSBudWxsKSB7XG4gICAgICBwcm92aWRlck1ldGFkYXRhLm9wZW5haS5yZWplY3RlZFByZWRpY3Rpb25Ub2tlbnMgPSBjb21wbGV0aW9uVG9rZW5EZXRhaWxzID09IG51bGwgPyB2b2lkIDAgOiBjb21wbGV0aW9uVG9rZW5EZXRhaWxzLnJlamVjdGVkX3ByZWRpY3Rpb25fdG9rZW5zO1xuICAgIH1cbiAgICBpZiAoKChfZiA9IGNob2ljZS5sb2dwcm9icykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmNvbnRlbnQpICE9IG51bGwpIHtcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmxvZ3Byb2JzID0gY2hvaWNlLmxvZ3Byb2JzLmNvbnRlbnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50LFxuICAgICAgZmluaXNoUmVhc29uOiBtYXBPcGVuQUlGaW5pc2hSZWFzb24oY2hvaWNlLmZpbmlzaF9yZWFzb24pLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgaW5wdXRUb2tlbnM6IChfaCA9IChfZyA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2cucHJvbXB0X3Rva2VucykgIT0gbnVsbCA/IF9oIDogdm9pZCAwLFxuICAgICAgICBvdXRwdXRUb2tlbnM6IChfaiA9IChfaSA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2kuY29tcGxldGlvbl90b2tlbnMpICE9IG51bGwgPyBfaiA6IHZvaWQgMCxcbiAgICAgICAgdG90YWxUb2tlbnM6IChfbCA9IChfayA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2sudG90YWxfdG9rZW5zKSAhPSBudWxsID8gX2wgOiB2b2lkIDAsXG4gICAgICAgIHJlYXNvbmluZ1Rva2VuczogKF9tID0gY29tcGxldGlvblRva2VuRGV0YWlscyA9PSBudWxsID8gdm9pZCAwIDogY29tcGxldGlvblRva2VuRGV0YWlscy5yZWFzb25pbmdfdG9rZW5zKSAhPSBudWxsID8gX20gOiB2b2lkIDAsXG4gICAgICAgIGNhY2hlZElucHV0VG9rZW5zOiAoX24gPSBwcm9tcHRUb2tlbkRldGFpbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHByb21wdFRva2VuRGV0YWlscy5jYWNoZWRfdG9rZW5zKSAhPSBudWxsID8gX24gOiB2b2lkIDBcbiAgICAgIH0sXG4gICAgICByZXF1ZXN0OiB7IGJvZHkgfSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIC4uLmdldFJlc3BvbnNlTWV0YWRhdGEocmVzcG9uc2UpLFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGJvZHk6IHJhd1Jlc3BvbnNlXG4gICAgICB9LFxuICAgICAgd2FybmluZ3MsXG4gICAgICBwcm92aWRlck1ldGFkYXRhXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb1N0cmVhbShvcHRpb25zKSB7XG4gICAgY29uc3QgeyBhcmdzLCB3YXJuaW5ncyB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAuLi5hcmdzLFxuICAgICAgc3RyZWFtOiB0cnVlLFxuICAgICAgc3RyZWFtX29wdGlvbnM6IHtcbiAgICAgICAgaW5jbHVkZV91c2FnZTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgeyByZXNwb25zZUhlYWRlcnMsIHZhbHVlOiByZXNwb25zZSB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaSh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2NoYXQvY29tcGxldGlvbnNcIixcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IGNvbWJpbmVIZWFkZXJzKHRoaXMuY29uZmlnLmhlYWRlcnMoKSwgb3B0aW9ucy5oZWFkZXJzKSxcbiAgICAgIGJvZHksXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUV2ZW50U291cmNlUmVzcG9uc2VIYW5kbGVyKFxuICAgICAgICBvcGVuYWlDaGF0Q2h1bmtTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IHRvb2xDYWxscyA9IFtdO1xuICAgIGxldCBmaW5pc2hSZWFzb24gPSBcInVua25vd25cIjtcbiAgICBjb25zdCB1c2FnZSA9IHtcbiAgICAgIGlucHV0VG9rZW5zOiB2b2lkIDAsXG4gICAgICBvdXRwdXRUb2tlbnM6IHZvaWQgMCxcbiAgICAgIHRvdGFsVG9rZW5zOiB2b2lkIDBcbiAgICB9O1xuICAgIGxldCBpc0ZpcnN0Q2h1bmsgPSB0cnVlO1xuICAgIGxldCBpc0FjdGl2ZVRleHQgPSBmYWxzZTtcbiAgICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0geyBvcGVuYWk6IHt9IH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0cmVhbTogcmVzcG9uc2UucGlwZVRocm91Z2goXG4gICAgICAgIG5ldyBUcmFuc2Zvcm1TdHJlYW0oe1xuICAgICAgICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwic3RyZWFtLXN0YXJ0XCIsIHdhcm5pbmdzIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJhbnNmb3JtKGNodW5rLCBjb250cm9sbGVyKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2osIF9rLCBfbCwgX20sIF9uLCBfbywgX3AsIF9xLCBfciwgX3MsIF90LCBfdSwgX3YsIF93LCBfeDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVSYXdDaHVua3MpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJyYXdcIiwgcmF3VmFsdWU6IGNodW5rLnJhd1ZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaHVuay5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbiA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogY2h1bmsuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2h1bmsudmFsdWU7XG4gICAgICAgICAgICBpZiAoXCJlcnJvclwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbiA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogdmFsdWUuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0ZpcnN0Q2h1bmspIHtcbiAgICAgICAgICAgICAgaXNGaXJzdENodW5rID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZXNwb25zZS1tZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIC4uLmdldFJlc3BvbnNlTWV0YWRhdGEodmFsdWUpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHZhbHVlLnVzYWdlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgdXNhZ2UuaW5wdXRUb2tlbnMgPSAoX2EgPSB2YWx1ZS51c2FnZS5wcm9tcHRfdG9rZW5zKSAhPSBudWxsID8gX2EgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLm91dHB1dFRva2VucyA9IChfYiA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zKSAhPSBudWxsID8gX2IgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gKF9jID0gdmFsdWUudXNhZ2UudG90YWxfdG9rZW5zKSAhPSBudWxsID8gX2MgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLnJlYXNvbmluZ1Rva2VucyA9IChfZSA9IChfZCA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfZC5yZWFzb25pbmdfdG9rZW5zKSAhPSBudWxsID8gX2UgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHVzYWdlLmNhY2hlZElucHV0VG9rZW5zID0gKF9nID0gKF9mID0gdmFsdWUudXNhZ2UucHJvbXB0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2YuY2FjaGVkX3Rva2VucykgIT0gbnVsbCA/IF9nIDogdm9pZCAwO1xuICAgICAgICAgICAgICBpZiAoKChfaCA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfaC5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmFjY2VwdGVkUHJlZGljdGlvblRva2VucyA9IChfaSA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfaS5hY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoKChfaiA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfai5yZWplY3RlZF9wcmVkaWN0aW9uX3Rva2VucykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLnJlamVjdGVkUHJlZGljdGlvblRva2VucyA9IChfayA9IHZhbHVlLnVzYWdlLmNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfay5yZWplY3RlZF9wcmVkaWN0aW9uX3Rva2VucztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2hvaWNlID0gdmFsdWUuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIGlmICgoY2hvaWNlID09IG51bGwgPyB2b2lkIDAgOiBjaG9pY2UuZmluaXNoX3JlYXNvbikgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBtYXBPcGVuQUlGaW5pc2hSZWFzb24oY2hvaWNlLmZpbmlzaF9yZWFzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgoX2wgPSBjaG9pY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGNob2ljZS5sb2dwcm9icykgPT0gbnVsbCA/IHZvaWQgMCA6IF9sLmNvbnRlbnQpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkubG9ncHJvYnMgPSBjaG9pY2UubG9ncHJvYnMuY29udGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoY2hvaWNlID09IG51bGwgPyB2b2lkIDAgOiBjaG9pY2UuZGVsdGEpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBjaG9pY2UuZGVsdGE7XG4gICAgICAgICAgICBpZiAoZGVsdGEuY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmICghaXNBY3RpdmVUZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJ0ZXh0LXN0YXJ0XCIsIGlkOiBcIjBcIiB9KTtcbiAgICAgICAgICAgICAgICBpc0FjdGl2ZVRleHQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgaWQ6IFwiMFwiLFxuICAgICAgICAgICAgICAgIGRlbHRhOiBkZWx0YS5jb250ZW50XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhLnRvb2xfY2FsbHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRvb2xDYWxsRGVsdGEgb2YgZGVsdGEudG9vbF9jYWxscykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdG9vbENhbGxEZWx0YS5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAodG9vbENhbGxzW2luZGV4XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbENhbGxEZWx0YS50eXBlICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXNwb25zZURhdGFFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogdG9vbENhbGxEZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgJ2Z1bmN0aW9uJyB0eXBlLmBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodG9vbENhbGxEZWx0YS5pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVzcG9uc2VEYXRhRXJyb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRvb2xDYWxsRGVsdGEsXG4gICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYEV4cGVjdGVkICdpZCcgdG8gYmUgYSBzdHJpbmcuYFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmICgoKF9tID0gdG9vbENhbGxEZWx0YS5mdW5jdGlvbikgPT0gbnVsbCA/IHZvaWQgMCA6IF9tLm5hbWUpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZXNwb25zZURhdGFFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogdG9vbENhbGxEZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBgRXhwZWN0ZWQgJ2Z1bmN0aW9uLm5hbWUnIHRvIGJlIGEgc3RyaW5nLmBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsRGVsdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uLm5hbWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdG9vbENhbGxzW2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRvb2xDYWxsRGVsdGEuaWQsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzOiAoX24gPSB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uLmFyZ3VtZW50cykgIT0gbnVsbCA/IF9uIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoYXNGaW5pc2hlZDogZmFsc2VcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBjb25zdCB0b29sQ2FsbDIgPSB0b29sQ2FsbHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgaWYgKCgoX28gPSB0b29sQ2FsbDIuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfby5uYW1lKSAhPSBudWxsICYmICgoX3AgPSB0b29sQ2FsbDIuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfcC5hcmd1bWVudHMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2xDYWxsMi5mdW5jdGlvbi5hcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZGVsdGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0b29sQ2FsbDIuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YTogdG9vbENhbGwyLmZ1bmN0aW9uLmFyZ3VtZW50c1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1BhcnNhYmxlSnNvbih0b29sQ2FsbDIuZnVuY3Rpb24uYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwyLmlkXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiAoX3EgPSB0b29sQ2FsbDIuaWQpICE9IG51bGwgPyBfcSA6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB0b29sQ2FsbDIuZnVuY3Rpb24ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiB0b29sQ2FsbDIuZnVuY3Rpb24uYXJndW1lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgdG9vbENhbGwyLmhhc0ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRvb2xDYWxsID0gdG9vbENhbGxzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAodG9vbENhbGwuaGFzRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKChfciA9IHRvb2xDYWxsRGVsdGEuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfci5hcmd1bWVudHMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyArPSAoX3QgPSAoX3MgPSB0b29sQ2FsbERlbHRhLmZ1bmN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3MuYXJndW1lbnRzKSAhPSBudWxsID8gX3QgOiBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICAgICAgICBkZWx0YTogKF91ID0gdG9vbENhbGxEZWx0YS5mdW5jdGlvbi5hcmd1bWVudHMpICE9IG51bGwgPyBfdSA6IFwiXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoKChfdiA9IHRvb2xDYWxsLmZ1bmN0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX3YubmFtZSkgIT0gbnVsbCAmJiAoKF93ID0gdG9vbENhbGwuZnVuY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfdy5hcmd1bWVudHMpICE9IG51bGwgJiYgaXNQYXJzYWJsZUpzb24odG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWVuZFwiLFxuICAgICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwuaWRcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogKF94ID0gdG9vbENhbGwuaWQpICE9IG51bGwgPyBfeCA6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0OiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdG9vbENhbGwuaGFzRmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbHRhLmFubm90YXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGRlbHRhLmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwic291cmNlXCIsXG4gICAgICAgICAgICAgICAgICBzb3VyY2VUeXBlOiBcInVybFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IGdlbmVyYXRlSWQoKSxcbiAgICAgICAgICAgICAgICAgIHVybDogYW5ub3RhdGlvbi51cmwsXG4gICAgICAgICAgICAgICAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmbHVzaChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpZiAoaXNBY3RpdmVUZXh0KSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwidGV4dC1lbmRcIiwgaWQ6IFwiMFwiIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJmaW5pc2hcIixcbiAgICAgICAgICAgICAgZmluaXNoUmVhc29uLFxuICAgICAgICAgICAgICB1c2FnZSxcbiAgICAgICAgICAgICAgLi4ucHJvdmlkZXJNZXRhZGF0YSAhPSBudWxsID8geyBwcm92aWRlck1ldGFkYXRhIH0gOiB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICAgIHJlcXVlc3Q6IHsgYm9keSB9LFxuICAgICAgcmVzcG9uc2U6IHsgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzIH1cbiAgICB9O1xuICB9XG59O1xudmFyIG9wZW5haVRva2VuVXNhZ2VTY2hlbWEgPSB6My5vYmplY3Qoe1xuICBwcm9tcHRfdG9rZW5zOiB6My5udW1iZXIoKS5udWxsaXNoKCksXG4gIGNvbXBsZXRpb25fdG9rZW5zOiB6My5udW1iZXIoKS5udWxsaXNoKCksXG4gIHRvdGFsX3Rva2VuczogejMubnVtYmVyKCkubnVsbGlzaCgpLFxuICBwcm9tcHRfdG9rZW5zX2RldGFpbHM6IHozLm9iamVjdCh7XG4gICAgY2FjaGVkX3Rva2VuczogejMubnVtYmVyKCkubnVsbGlzaCgpXG4gIH0pLm51bGxpc2goKSxcbiAgY29tcGxldGlvbl90b2tlbnNfZGV0YWlsczogejMub2JqZWN0KHtcbiAgICByZWFzb25pbmdfdG9rZW5zOiB6My5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgYWNjZXB0ZWRfcHJlZGljdGlvbl90b2tlbnM6IHozLm51bWJlcigpLm51bGxpc2goKSxcbiAgICByZWplY3RlZF9wcmVkaWN0aW9uX3Rva2VuczogejMubnVtYmVyKCkubnVsbGlzaCgpXG4gIH0pLm51bGxpc2goKVxufSkubnVsbGlzaCgpO1xudmFyIG9wZW5haUNoYXRSZXNwb25zZVNjaGVtYSA9IHozLm9iamVjdCh7XG4gIGlkOiB6My5zdHJpbmcoKS5udWxsaXNoKCksXG4gIGNyZWF0ZWQ6IHozLm51bWJlcigpLm51bGxpc2goKSxcbiAgbW9kZWw6IHozLnN0cmluZygpLm51bGxpc2goKSxcbiAgY2hvaWNlczogejMuYXJyYXkoXG4gICAgejMub2JqZWN0KHtcbiAgICAgIG1lc3NhZ2U6IHozLm9iamVjdCh7XG4gICAgICAgIHJvbGU6IHozLmxpdGVyYWwoXCJhc3Npc3RhbnRcIikubnVsbGlzaCgpLFxuICAgICAgICBjb250ZW50OiB6My5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgIHRvb2xfY2FsbHM6IHozLmFycmF5KFxuICAgICAgICAgIHozLm9iamVjdCh7XG4gICAgICAgICAgICBpZDogejMuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgdHlwZTogejMubGl0ZXJhbChcImZ1bmN0aW9uXCIpLFxuICAgICAgICAgICAgZnVuY3Rpb246IHozLm9iamVjdCh7XG4gICAgICAgICAgICAgIG5hbWU6IHozLnN0cmluZygpLFxuICAgICAgICAgICAgICBhcmd1bWVudHM6IHozLnN0cmluZygpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICkubnVsbGlzaCgpLFxuICAgICAgICBhbm5vdGF0aW9uczogejMuYXJyYXkoXG4gICAgICAgICAgejMub2JqZWN0KHtcbiAgICAgICAgICAgIHR5cGU6IHozLmxpdGVyYWwoXCJ1cmxfY2l0YXRpb25cIiksXG4gICAgICAgICAgICBzdGFydF9pbmRleDogejMubnVtYmVyKCksXG4gICAgICAgICAgICBlbmRfaW5kZXg6IHozLm51bWJlcigpLFxuICAgICAgICAgICAgdXJsOiB6My5zdHJpbmcoKSxcbiAgICAgICAgICAgIHRpdGxlOiB6My5zdHJpbmcoKVxuICAgICAgICAgIH0pXG4gICAgICAgICkubnVsbGlzaCgpXG4gICAgICB9KSxcbiAgICAgIGluZGV4OiB6My5udW1iZXIoKSxcbiAgICAgIGxvZ3Byb2JzOiB6My5vYmplY3Qoe1xuICAgICAgICBjb250ZW50OiB6My5hcnJheShcbiAgICAgICAgICB6My5vYmplY3Qoe1xuICAgICAgICAgICAgdG9rZW46IHozLnN0cmluZygpLFxuICAgICAgICAgICAgbG9ncHJvYjogejMubnVtYmVyKCksXG4gICAgICAgICAgICB0b3BfbG9ncHJvYnM6IHozLmFycmF5KFxuICAgICAgICAgICAgICB6My5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHRva2VuOiB6My5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBsb2dwcm9iOiB6My5udW1iZXIoKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pXG4gICAgICAgICkubnVsbGlzaCgpXG4gICAgICB9KS5udWxsaXNoKCksXG4gICAgICBmaW5pc2hfcmVhc29uOiB6My5zdHJpbmcoKS5udWxsaXNoKClcbiAgICB9KVxuICApLFxuICB1c2FnZTogb3BlbmFpVG9rZW5Vc2FnZVNjaGVtYVxufSk7XG52YXIgb3BlbmFpQ2hhdENodW5rU2NoZW1hID0gejMudW5pb24oW1xuICB6My5vYmplY3Qoe1xuICAgIGlkOiB6My5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgY3JlYXRlZDogejMubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgIG1vZGVsOiB6My5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgY2hvaWNlczogejMuYXJyYXkoXG4gICAgICB6My5vYmplY3Qoe1xuICAgICAgICBkZWx0YTogejMub2JqZWN0KHtcbiAgICAgICAgICByb2xlOiB6My5lbnVtKFtcImFzc2lzdGFudFwiXSkubnVsbGlzaCgpLFxuICAgICAgICAgIGNvbnRlbnQ6IHozLnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgICAgICB0b29sX2NhbGxzOiB6My5hcnJheShcbiAgICAgICAgICAgIHozLm9iamVjdCh7XG4gICAgICAgICAgICAgIGluZGV4OiB6My5udW1iZXIoKSxcbiAgICAgICAgICAgICAgaWQ6IHozLnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgdHlwZTogejMubGl0ZXJhbChcImZ1bmN0aW9uXCIpLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgZnVuY3Rpb246IHozLm9iamVjdCh7XG4gICAgICAgICAgICAgICAgbmFtZTogejMuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogejMuc3RyaW5nKCkubnVsbGlzaCgpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICkubnVsbGlzaCgpLFxuICAgICAgICAgIGFubm90YXRpb25zOiB6My5hcnJheShcbiAgICAgICAgICAgIHozLm9iamVjdCh7XG4gICAgICAgICAgICAgIHR5cGU6IHozLmxpdGVyYWwoXCJ1cmxfY2l0YXRpb25cIiksXG4gICAgICAgICAgICAgIHN0YXJ0X2luZGV4OiB6My5udW1iZXIoKSxcbiAgICAgICAgICAgICAgZW5kX2luZGV4OiB6My5udW1iZXIoKSxcbiAgICAgICAgICAgICAgdXJsOiB6My5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgdGl0bGU6IHozLnN0cmluZygpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICkubnVsbGlzaCgpXG4gICAgICAgIH0pLm51bGxpc2goKSxcbiAgICAgICAgbG9ncHJvYnM6IHozLm9iamVjdCh7XG4gICAgICAgICAgY29udGVudDogejMuYXJyYXkoXG4gICAgICAgICAgICB6My5vYmplY3Qoe1xuICAgICAgICAgICAgICB0b2tlbjogejMuc3RyaW5nKCksXG4gICAgICAgICAgICAgIGxvZ3Byb2I6IHozLm51bWJlcigpLFxuICAgICAgICAgICAgICB0b3BfbG9ncHJvYnM6IHozLmFycmF5KFxuICAgICAgICAgICAgICAgIHozLm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICB0b2tlbjogejMuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICBsb2dwcm9iOiB6My5udW1iZXIoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKS5udWxsaXNoKClcbiAgICAgICAgfSkubnVsbGlzaCgpLFxuICAgICAgICBmaW5pc2hfcmVhc29uOiB6My5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgIGluZGV4OiB6My5udW1iZXIoKVxuICAgICAgfSlcbiAgICApLFxuICAgIHVzYWdlOiBvcGVuYWlUb2tlblVzYWdlU2NoZW1hXG4gIH0pLFxuICBvcGVuYWlFcnJvckRhdGFTY2hlbWFcbl0pO1xuZnVuY3Rpb24gaXNSZWFzb25pbmdNb2RlbChtb2RlbElkKSB7XG4gIHJldHVybiAobW9kZWxJZC5zdGFydHNXaXRoKFwib1wiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNVwiKSkgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIik7XG59XG5mdW5jdGlvbiBzdXBwb3J0c0ZsZXhQcm9jZXNzaW5nKG1vZGVsSWQpIHtcbiAgcmV0dXJuIG1vZGVsSWQuc3RhcnRzV2l0aChcIm8zXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm80LW1pbmlcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTVcIikgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIik7XG59XG5mdW5jdGlvbiBzdXBwb3J0c1ByaW9yaXR5UHJvY2Vzc2luZyhtb2RlbElkKSB7XG4gIHJldHVybiBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNFwiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1taW5pXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01XCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1uYW5vXCIpICYmICFtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNS1jaGF0XCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm8zXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm80LW1pbmlcIik7XG59XG5mdW5jdGlvbiBnZXRTeXN0ZW1NZXNzYWdlTW9kZShtb2RlbElkKSB7XG4gIHZhciBfYSwgX2I7XG4gIGlmICghaXNSZWFzb25pbmdNb2RlbChtb2RlbElkKSkge1xuICAgIHJldHVybiBcInN5c3RlbVwiO1xuICB9XG4gIHJldHVybiAoX2IgPSAoX2EgPSByZWFzb25pbmdNb2RlbHNbbW9kZWxJZF0pID09IG51bGwgPyB2b2lkIDAgOiBfYS5zeXN0ZW1NZXNzYWdlTW9kZSkgIT0gbnVsbCA/IF9iIDogXCJkZXZlbG9wZXJcIjtcbn1cbnZhciByZWFzb25pbmdNb2RlbHMgPSB7XG4gIFwibzEtbWluaVwiOiB7XG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwicmVtb3ZlXCJcbiAgfSxcbiAgXCJvMS1taW5pLTIwMjQtMDktMTJcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcInJlbW92ZVwiXG4gIH0sXG4gIFwibzEtcHJldmlld1wiOiB7XG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwicmVtb3ZlXCJcbiAgfSxcbiAgXCJvMS1wcmV2aWV3LTIwMjQtMDktMTJcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcInJlbW92ZVwiXG4gIH0sXG4gIG8zOiB7XG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwiZGV2ZWxvcGVyXCJcbiAgfSxcbiAgXCJvMy0yMDI1LTA0LTE2XCI6IHtcbiAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJkZXZlbG9wZXJcIlxuICB9LFxuICBcIm8zLW1pbmlcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcImRldmVsb3BlclwiXG4gIH0sXG4gIFwibzMtbWluaS0yMDI1LTAxLTMxXCI6IHtcbiAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJkZXZlbG9wZXJcIlxuICB9LFxuICBcIm80LW1pbmlcIjoge1xuICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcImRldmVsb3BlclwiXG4gIH0sXG4gIFwibzQtbWluaS0yMDI1LTA0LTE2XCI6IHtcbiAgICBzeXN0ZW1NZXNzYWdlTW9kZTogXCJkZXZlbG9wZXJcIlxuICB9XG59O1xuXG4vLyBzcmMvY29tcGxldGlvbi9vcGVuYWktY29tcGxldGlvbi1sYW5ndWFnZS1tb2RlbC50c1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnMyLFxuICBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlciBhcyBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlcjIsXG4gIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIgYXMgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlcjIsXG4gIHBhcnNlUHJvdmlkZXJPcHRpb25zIGFzIHBhcnNlUHJvdmlkZXJPcHRpb25zMixcbiAgcG9zdEpzb25Ub0FwaSBhcyBwb3N0SnNvblRvQXBpMlxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6NSB9IGZyb20gXCJ6b2QvdjRcIjtcblxuLy8gc3JjL2NvbXBsZXRpb24vY29udmVydC10by1vcGVuYWktY29tcGxldGlvbi1wcm9tcHQudHNcbmltcG9ydCB7XG4gIEludmFsaWRQcm9tcHRFcnJvcixcbiAgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IgYXMgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IzXG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5mdW5jdGlvbiBjb252ZXJ0VG9PcGVuQUlDb21wbGV0aW9uUHJvbXB0KHtcbiAgcHJvbXB0LFxuICB1c2VyID0gXCJ1c2VyXCIsXG4gIGFzc2lzdGFudCA9IFwiYXNzaXN0YW50XCJcbn0pIHtcbiAgbGV0IHRleHQgPSBcIlwiO1xuICBpZiAocHJvbXB0WzBdLnJvbGUgPT09IFwic3lzdGVtXCIpIHtcbiAgICB0ZXh0ICs9IGAke3Byb21wdFswXS5jb250ZW50fVxuXG5gO1xuICAgIHByb21wdCA9IHByb21wdC5zbGljZSgxKTtcbiAgfVxuICBmb3IgKGNvbnN0IHsgcm9sZSwgY29udGVudCB9IG9mIHByb21wdCkge1xuICAgIHN3aXRjaCAocm9sZSkge1xuICAgICAgY2FzZSBcInN5c3RlbVwiOiB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkUHJvbXB0RXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6IFwiVW5leHBlY3RlZCBzeXN0ZW0gbWVzc2FnZSBpbiBwcm9tcHQ6ICR7Y29udGVudH1cIixcbiAgICAgICAgICBwcm9tcHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjYXNlIFwidXNlclwiOiB7XG4gICAgICAgIGNvbnN0IHVzZXJNZXNzYWdlID0gY29udGVudC5tYXAoKHBhcnQpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICByZXR1cm4gcGFydC50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcIik7XG4gICAgICAgIHRleHQgKz0gYCR7dXNlcn06XG4ke3VzZXJNZXNzYWdlfVxuXG5gO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJhc3Npc3RhbnRcIjoge1xuICAgICAgICBjb25zdCBhc3Npc3RhbnRNZXNzYWdlID0gY29udGVudC5tYXAoKHBhcnQpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICByZXR1cm4gcGFydC50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcInRvb2wtY2FsbFwiOiB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1cHBvcnRlZEZ1bmN0aW9uYWxpdHlFcnJvcjMoe1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uYWxpdHk6IFwidG9vbC1jYWxsIG1lc3NhZ2VzXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KS5qb2luKFwiXCIpO1xuICAgICAgICB0ZXh0ICs9IGAke2Fzc2lzdGFudH06XG4ke2Fzc2lzdGFudE1lc3NhZ2V9XG5cbmA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRvb2xcIjoge1xuICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IzKHtcbiAgICAgICAgICBmdW5jdGlvbmFsaXR5OiBcInRvb2wgbWVzc2FnZXNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHJvbGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgcm9sZTogJHtfZXhoYXVzdGl2ZUNoZWNrfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB0ZXh0ICs9IGAke2Fzc2lzdGFudH06XG5gO1xuICByZXR1cm4ge1xuICAgIHByb21wdDogdGV4dCxcbiAgICBzdG9wU2VxdWVuY2VzOiBbYFxuJHt1c2VyfTpgXVxuICB9O1xufVxuXG4vLyBzcmMvY29tcGxldGlvbi9nZXQtcmVzcG9uc2UtbWV0YWRhdGEudHNcbmZ1bmN0aW9uIGdldFJlc3BvbnNlTWV0YWRhdGEyKHtcbiAgaWQsXG4gIG1vZGVsLFxuICBjcmVhdGVkXG59KSB7XG4gIHJldHVybiB7XG4gICAgaWQ6IGlkICE9IG51bGwgPyBpZCA6IHZvaWQgMCxcbiAgICBtb2RlbElkOiBtb2RlbCAhPSBudWxsID8gbW9kZWwgOiB2b2lkIDAsXG4gICAgdGltZXN0YW1wOiBjcmVhdGVkICE9IG51bGwgPyBuZXcgRGF0ZShjcmVhdGVkICogMWUzKSA6IHZvaWQgMFxuICB9O1xufVxuXG4vLyBzcmMvY29tcGxldGlvbi9tYXAtb3BlbmFpLWZpbmlzaC1yZWFzb24udHNcbmZ1bmN0aW9uIG1hcE9wZW5BSUZpbmlzaFJlYXNvbjIoZmluaXNoUmVhc29uKSB7XG4gIHN3aXRjaCAoZmluaXNoUmVhc29uKSB7XG4gICAgY2FzZSBcInN0b3BcIjpcbiAgICAgIHJldHVybiBcInN0b3BcIjtcbiAgICBjYXNlIFwibGVuZ3RoXCI6XG4gICAgICByZXR1cm4gXCJsZW5ndGhcIjtcbiAgICBjYXNlIFwiY29udGVudF9maWx0ZXJcIjpcbiAgICAgIHJldHVybiBcImNvbnRlbnQtZmlsdGVyXCI7XG4gICAgY2FzZSBcImZ1bmN0aW9uX2NhbGxcIjpcbiAgICBjYXNlIFwidG9vbF9jYWxsc1wiOlxuICAgICAgcmV0dXJuIFwidG9vbC1jYWxsc1wiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJ1bmtub3duXCI7XG4gIH1cbn1cblxuLy8gc3JjL2NvbXBsZXRpb24vb3BlbmFpLWNvbXBsZXRpb24tb3B0aW9ucy50c1xuaW1wb3J0IHsgeiBhcyB6NCB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBvcGVuYWlDb21wbGV0aW9uUHJvdmlkZXJPcHRpb25zID0gejQub2JqZWN0KHtcbiAgLyoqXG4gIEVjaG8gYmFjayB0aGUgcHJvbXB0IGluIGFkZGl0aW9uIHRvIHRoZSBjb21wbGV0aW9uLlxuICAgICAqL1xuICBlY2hvOiB6NC5ib29sZWFuKCkub3B0aW9uYWwoKSxcbiAgLyoqXG4gIE1vZGlmeSB0aGUgbGlrZWxpaG9vZCBvZiBzcGVjaWZpZWQgdG9rZW5zIGFwcGVhcmluZyBpbiB0aGUgY29tcGxldGlvbi5cbiAgXG4gIEFjY2VwdHMgYSBKU09OIG9iamVjdCB0aGF0IG1hcHMgdG9rZW5zIChzcGVjaWZpZWQgYnkgdGhlaXIgdG9rZW4gSUQgaW5cbiAgdGhlIEdQVCB0b2tlbml6ZXIpIHRvIGFuIGFzc29jaWF0ZWQgYmlhcyB2YWx1ZSBmcm9tIC0xMDAgdG8gMTAwLiBZb3VcbiAgY2FuIHVzZSB0aGlzIHRva2VuaXplciB0b29sIHRvIGNvbnZlcnQgdGV4dCB0byB0b2tlbiBJRHMuIE1hdGhlbWF0aWNhbGx5LFxuICB0aGUgYmlhcyBpcyBhZGRlZCB0byB0aGUgbG9naXRzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgcHJpb3IgdG8gc2FtcGxpbmcuXG4gIFRoZSBleGFjdCBlZmZlY3Qgd2lsbCB2YXJ5IHBlciBtb2RlbCwgYnV0IHZhbHVlcyBiZXR3ZWVuIC0xIGFuZCAxIHNob3VsZFxuICBkZWNyZWFzZSBvciBpbmNyZWFzZSBsaWtlbGlob29kIG9mIHNlbGVjdGlvbjsgdmFsdWVzIGxpa2UgLTEwMCBvciAxMDBcbiAgc2hvdWxkIHJlc3VsdCBpbiBhIGJhbiBvciBleGNsdXNpdmUgc2VsZWN0aW9uIG9mIHRoZSByZWxldmFudCB0b2tlbi5cbiAgXG4gIEFzIGFuIGV4YW1wbGUsIHlvdSBjYW4gcGFzcyB7XCI1MDI1NlwiOiAtMTAwfSB0byBwcmV2ZW50IHRoZSA8fGVuZG9mdGV4dHw+XG4gIHRva2VuIGZyb20gYmVpbmcgZ2VuZXJhdGVkLlxuICAgKi9cbiAgbG9naXRCaWFzOiB6NC5yZWNvcmQoejQuc3RyaW5nKCksIHo0Lm51bWJlcigpKS5vcHRpb25hbCgpLFxuICAvKipcbiAgVGhlIHN1ZmZpeCB0aGF0IGNvbWVzIGFmdGVyIGEgY29tcGxldGlvbiBvZiBpbnNlcnRlZCB0ZXh0LlxuICAgKi9cbiAgc3VmZml4OiB6NC5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAvKipcbiAgQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvXG4gIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gTGVhcm4gbW9yZS5cbiAgICovXG4gIHVzZXI6IHo0LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIC8qKlxuICBSZXR1cm4gdGhlIGxvZyBwcm9iYWJpbGl0aWVzIG9mIHRoZSB0b2tlbnMuIEluY2x1ZGluZyBsb2dwcm9icyB3aWxsIGluY3JlYXNlXG4gIHRoZSByZXNwb25zZSBzaXplIGFuZCBjYW4gc2xvdyBkb3duIHJlc3BvbnNlIHRpbWVzLiBIb3dldmVyLCBpdCBjYW5cbiAgYmUgdXNlZnVsIHRvIGJldHRlciB1bmRlcnN0YW5kIGhvdyB0aGUgbW9kZWwgaXMgYmVoYXZpbmcuXG4gIFNldHRpbmcgdG8gdHJ1ZSB3aWxsIHJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRva2VucyB0aGF0XG4gIHdlcmUgZ2VuZXJhdGVkLlxuICBTZXR0aW5nIHRvIGEgbnVtYmVyIHdpbGwgcmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9wIG5cbiAgdG9rZW5zIHRoYXQgd2VyZSBnZW5lcmF0ZWQuXG4gICAgICovXG4gIGxvZ3Byb2JzOiB6NC51bmlvbihbejQuYm9vbGVhbigpLCB6NC5udW1iZXIoKV0pLm9wdGlvbmFsKClcbn0pO1xuXG4vLyBzcmMvY29tcGxldGlvbi9vcGVuYWktY29tcGxldGlvbi1sYW5ndWFnZS1tb2RlbC50c1xudmFyIE9wZW5BSUNvbXBsZXRpb25MYW5ndWFnZU1vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLnNwZWNpZmljYXRpb25WZXJzaW9uID0gXCJ2MlwiO1xuICAgIHRoaXMuc3VwcG9ydGVkVXJscyA9IHtcbiAgICAgIC8vIE5vIFVSTHMgYXJlIHN1cHBvcnRlZCBmb3IgY29tcGxldGlvbiBtb2RlbHMuXG4gICAgfTtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG4gIGdldCBwcm92aWRlck9wdGlvbnNOYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlci5zcGxpdChcIi5cIilbMF0udHJpbSgpO1xuICB9XG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZ2V0QXJncyh7XG4gICAgcHJvbXB0LFxuICAgIG1heE91dHB1dFRva2VucyxcbiAgICB0ZW1wZXJhdHVyZSxcbiAgICB0b3BQLFxuICAgIHRvcEssXG4gICAgZnJlcXVlbmN5UGVuYWx0eSxcbiAgICBwcmVzZW5jZVBlbmFsdHksXG4gICAgc3RvcFNlcXVlbmNlczogdXNlclN0b3BTZXF1ZW5jZXMsXG4gICAgcmVzcG9uc2VGb3JtYXQsXG4gICAgdG9vbHMsXG4gICAgdG9vbENob2ljZSxcbiAgICBzZWVkLFxuICAgIHByb3ZpZGVyT3B0aW9uc1xuICB9KSB7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgICBjb25zdCBvcGVuYWlPcHRpb25zID0ge1xuICAgICAgLi4uYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnMyKHtcbiAgICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICAgIHByb3ZpZGVyT3B0aW9ucyxcbiAgICAgICAgc2NoZW1hOiBvcGVuYWlDb21wbGV0aW9uUHJvdmlkZXJPcHRpb25zXG4gICAgICB9KSxcbiAgICAgIC4uLmF3YWl0IHBhcnNlUHJvdmlkZXJPcHRpb25zMih7XG4gICAgICAgIHByb3ZpZGVyOiB0aGlzLnByb3ZpZGVyT3B0aW9uc05hbWUsXG4gICAgICAgIHByb3ZpZGVyT3B0aW9ucyxcbiAgICAgICAgc2NoZW1hOiBvcGVuYWlDb21wbGV0aW9uUHJvdmlkZXJPcHRpb25zXG4gICAgICB9KVxuICAgIH07XG4gICAgaWYgKHRvcEsgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7IHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLCBzZXR0aW5nOiBcInRvcEtcIiB9KTtcbiAgICB9XG4gICAgaWYgKHRvb2xzID09IG51bGwgPyB2b2lkIDAgOiB0b29scy5sZW5ndGgpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goeyB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIiwgc2V0dGluZzogXCJ0b29sc1wiIH0pO1xuICAgIH1cbiAgICBpZiAodG9vbENob2ljZSAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsIHNldHRpbmc6IFwidG9vbENob2ljZVwiIH0pO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2VGb3JtYXQgIT0gbnVsbCAmJiByZXNwb25zZUZvcm1hdC50eXBlICE9PSBcInRleHRcIikge1xuICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgIHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLFxuICAgICAgICBzZXR0aW5nOiBcInJlc3BvbnNlRm9ybWF0XCIsXG4gICAgICAgIGRldGFpbHM6IFwiSlNPTiByZXNwb25zZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC5cIlxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHsgcHJvbXB0OiBjb21wbGV0aW9uUHJvbXB0LCBzdG9wU2VxdWVuY2VzIH0gPSBjb252ZXJ0VG9PcGVuQUlDb21wbGV0aW9uUHJvbXB0KHsgcHJvbXB0IH0pO1xuICAgIGNvbnN0IHN0b3AgPSBbLi4uc3RvcFNlcXVlbmNlcyAhPSBudWxsID8gc3RvcFNlcXVlbmNlcyA6IFtdLCAuLi51c2VyU3RvcFNlcXVlbmNlcyAhPSBudWxsID8gdXNlclN0b3BTZXF1ZW5jZXMgOiBbXV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgLy8gbW9kZWwgaWQ6XG4gICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsSWQsXG4gICAgICAgIC8vIG1vZGVsIHNwZWNpZmljIHNldHRpbmdzOlxuICAgICAgICBlY2hvOiBvcGVuYWlPcHRpb25zLmVjaG8sXG4gICAgICAgIGxvZ2l0X2JpYXM6IG9wZW5haU9wdGlvbnMubG9naXRCaWFzLFxuICAgICAgICBsb2dwcm9iczogKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMubG9ncHJvYnMpID09PSB0cnVlID8gMCA6IChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzKSA9PT0gZmFsc2UgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzLFxuICAgICAgICBzdWZmaXg6IG9wZW5haU9wdGlvbnMuc3VmZml4LFxuICAgICAgICB1c2VyOiBvcGVuYWlPcHRpb25zLnVzZXIsXG4gICAgICAgIC8vIHN0YW5kYXJkaXplZCBzZXR0aW5nczpcbiAgICAgICAgbWF4X3Rva2VuczogbWF4T3V0cHV0VG9rZW5zLFxuICAgICAgICB0ZW1wZXJhdHVyZSxcbiAgICAgICAgdG9wX3A6IHRvcFAsXG4gICAgICAgIGZyZXF1ZW5jeV9wZW5hbHR5OiBmcmVxdWVuY3lQZW5hbHR5LFxuICAgICAgICBwcmVzZW5jZV9wZW5hbHR5OiBwcmVzZW5jZVBlbmFsdHksXG4gICAgICAgIHNlZWQsXG4gICAgICAgIC8vIHByb21wdDpcbiAgICAgICAgcHJvbXB0OiBjb21wbGV0aW9uUHJvbXB0LFxuICAgICAgICAvLyBzdG9wIHNlcXVlbmNlczpcbiAgICAgICAgc3RvcDogc3RvcC5sZW5ndGggPiAwID8gc3RvcCA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIHdhcm5pbmdzXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb0dlbmVyYXRlKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCB7IGFyZ3MsIHdhcm5pbmdzIH0gPSBhd2FpdCB0aGlzLmdldEFyZ3Mob3B0aW9ucyk7XG4gICAgY29uc3Qge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgcmF3VmFsdWU6IHJhd1Jlc3BvbnNlXG4gICAgfSA9IGF3YWl0IHBvc3RKc29uVG9BcGkyKHtcbiAgICAgIHVybDogdGhpcy5jb25maWcudXJsKHtcbiAgICAgICAgcGF0aDogXCIvY29tcGxldGlvbnNcIixcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IGNvbWJpbmVIZWFkZXJzMih0aGlzLmNvbmZpZy5oZWFkZXJzKCksIG9wdGlvbnMuaGVhZGVycyksXG4gICAgICBib2R5OiBhcmdzLFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBvcGVuYWlGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyMihcbiAgICAgICAgb3BlbmFpQ29tcGxldGlvblJlc3BvbnNlU2NoZW1hXG4gICAgICApLFxuICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICBmZXRjaDogdGhpcy5jb25maWcuZmV0Y2hcbiAgICB9KTtcbiAgICBjb25zdCBjaG9pY2UgPSByZXNwb25zZS5jaG9pY2VzWzBdO1xuICAgIGNvbnN0IHByb3ZpZGVyTWV0YWRhdGEgPSB7IG9wZW5haToge30gfTtcbiAgICBpZiAoY2hvaWNlLmxvZ3Byb2JzICE9IG51bGwpIHtcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLmxvZ3Byb2JzID0gY2hvaWNlLmxvZ3Byb2JzO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudDogW3sgdHlwZTogXCJ0ZXh0XCIsIHRleHQ6IGNob2ljZS50ZXh0IH1dLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgaW5wdXRUb2tlbnM6IChfYSA9IHJlc3BvbnNlLnVzYWdlKSA9PSBudWxsID8gdm9pZCAwIDogX2EucHJvbXB0X3Rva2VucyxcbiAgICAgICAgb3V0cHV0VG9rZW5zOiAoX2IgPSByZXNwb25zZS51c2FnZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNvbXBsZXRpb25fdG9rZW5zLFxuICAgICAgICB0b3RhbFRva2VuczogKF9jID0gcmVzcG9uc2UudXNhZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYy50b3RhbF90b2tlbnNcbiAgICAgIH0sXG4gICAgICBmaW5pc2hSZWFzb246IG1hcE9wZW5BSUZpbmlzaFJlYXNvbjIoY2hvaWNlLmZpbmlzaF9yZWFzb24pLFxuICAgICAgcmVxdWVzdDogeyBib2R5OiBhcmdzIH0sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICAuLi5nZXRSZXNwb25zZU1ldGFkYXRhMihyZXNwb25zZSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgYm9keTogcmF3UmVzcG9uc2VcbiAgICAgIH0sXG4gICAgICBwcm92aWRlck1ldGFkYXRhLFxuICAgICAgd2FybmluZ3NcbiAgICB9O1xuICB9XG4gIGFzeW5jIGRvU3RyZWFtKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGFyZ3MsIHdhcm5pbmdzIH0gPSBhd2FpdCB0aGlzLmdldEFyZ3Mob3B0aW9ucyk7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIC4uLmFyZ3MsXG4gICAgICBzdHJlYW06IHRydWUsXG4gICAgICBzdHJlYW1fb3B0aW9uczoge1xuICAgICAgICBpbmNsdWRlX3VzYWdlOiB0cnVlXG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB7IHJlc3BvbnNlSGVhZGVycywgdmFsdWU6IHJlc3BvbnNlIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpMih7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2NvbXBsZXRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczIodGhpcy5jb25maWcuaGVhZGVycygpLCBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgYm9keSxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIyKFxuICAgICAgICBvcGVuYWlDb21wbGV0aW9uQ2h1bmtTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGxldCBmaW5pc2hSZWFzb24gPSBcInVua25vd25cIjtcbiAgICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0geyBvcGVuYWk6IHt9IH07XG4gICAgY29uc3QgdXNhZ2UgPSB7XG4gICAgICBpbnB1dFRva2Vuczogdm9pZCAwLFxuICAgICAgb3V0cHV0VG9rZW5zOiB2b2lkIDAsXG4gICAgICB0b3RhbFRva2Vuczogdm9pZCAwXG4gICAgfTtcbiAgICBsZXQgaXNGaXJzdENodW5rID0gdHJ1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyZWFtOiByZXNwb25zZS5waXBlVGhyb3VnaChcbiAgICAgICAgbmV3IFRyYW5zZm9ybVN0cmVhbSh7XG4gICAgICAgICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJzdHJlYW0tc3RhcnRcIiwgd2FybmluZ3MgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVSYXdDaHVua3MpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJyYXdcIiwgcmF3VmFsdWU6IGNodW5rLnJhd1ZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaHVuay5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbiA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogY2h1bmsuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2h1bmsudmFsdWU7XG4gICAgICAgICAgICBpZiAoXCJlcnJvclwiIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbiA9IFwiZXJyb3JcIjtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJlcnJvclwiLCBlcnJvcjogdmFsdWUuZXJyb3IgfSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0ZpcnN0Q2h1bmspIHtcbiAgICAgICAgICAgICAgaXNGaXJzdENodW5rID0gZmFsc2U7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZXNwb25zZS1tZXRhZGF0YVwiLFxuICAgICAgICAgICAgICAgIC4uLmdldFJlc3BvbnNlTWV0YWRhdGEyKHZhbHVlKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJ0ZXh0LXN0YXJ0XCIsIGlkOiBcIjBcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWx1ZS51c2FnZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHVzYWdlLmlucHV0VG9rZW5zID0gdmFsdWUudXNhZ2UucHJvbXB0X3Rva2VucztcbiAgICAgICAgICAgICAgdXNhZ2Uub3V0cHV0VG9rZW5zID0gdmFsdWUudXNhZ2UuY29tcGxldGlvbl90b2tlbnM7XG4gICAgICAgICAgICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gdmFsdWUudXNhZ2UudG90YWxfdG9rZW5zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2hvaWNlID0gdmFsdWUuY2hvaWNlc1swXTtcbiAgICAgICAgICAgIGlmICgoY2hvaWNlID09IG51bGwgPyB2b2lkIDAgOiBjaG9pY2UuZmluaXNoX3JlYXNvbikgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBtYXBPcGVuQUlGaW5pc2hSZWFzb24yKGNob2ljZS5maW5pc2hfcmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoY2hvaWNlID09IG51bGwgPyB2b2lkIDAgOiBjaG9pY2UubG9ncHJvYnMpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkubG9ncHJvYnMgPSBjaG9pY2UubG9ncHJvYnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGNob2ljZSA9PSBudWxsID8gdm9pZCAwIDogY2hvaWNlLnRleHQpICE9IG51bGwgJiYgY2hvaWNlLnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dC1kZWx0YVwiLFxuICAgICAgICAgICAgICAgIGlkOiBcIjBcIixcbiAgICAgICAgICAgICAgICBkZWx0YTogY2hvaWNlLnRleHRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmbHVzaChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpZiAoIWlzRmlyc3RDaHVuaykge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoeyB0eXBlOiBcInRleHQtZW5kXCIsIGlkOiBcIjBcIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZmluaXNoXCIsXG4gICAgICAgICAgICAgIGZpbmlzaFJlYXNvbixcbiAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YSxcbiAgICAgICAgICAgICAgdXNhZ2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICByZXF1ZXN0OiB7IGJvZHkgfSxcbiAgICAgIHJlc3BvbnNlOiB7IGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyB9XG4gICAgfTtcbiAgfVxufTtcbnZhciB1c2FnZVNjaGVtYSA9IHo1Lm9iamVjdCh7XG4gIHByb21wdF90b2tlbnM6IHo1Lm51bWJlcigpLFxuICBjb21wbGV0aW9uX3Rva2VuczogejUubnVtYmVyKCksXG4gIHRvdGFsX3Rva2VuczogejUubnVtYmVyKClcbn0pO1xudmFyIG9wZW5haUNvbXBsZXRpb25SZXNwb25zZVNjaGVtYSA9IHo1Lm9iamVjdCh7XG4gIGlkOiB6NS5zdHJpbmcoKS5udWxsaXNoKCksXG4gIGNyZWF0ZWQ6IHo1Lm51bWJlcigpLm51bGxpc2goKSxcbiAgbW9kZWw6IHo1LnN0cmluZygpLm51bGxpc2goKSxcbiAgY2hvaWNlczogejUuYXJyYXkoXG4gICAgejUub2JqZWN0KHtcbiAgICAgIHRleHQ6IHo1LnN0cmluZygpLFxuICAgICAgZmluaXNoX3JlYXNvbjogejUuc3RyaW5nKCksXG4gICAgICBsb2dwcm9iczogejUub2JqZWN0KHtcbiAgICAgICAgdG9rZW5zOiB6NS5hcnJheSh6NS5zdHJpbmcoKSksXG4gICAgICAgIHRva2VuX2xvZ3Byb2JzOiB6NS5hcnJheSh6NS5udW1iZXIoKSksXG4gICAgICAgIHRvcF9sb2dwcm9iczogejUuYXJyYXkoejUucmVjb3JkKHo1LnN0cmluZygpLCB6NS5udW1iZXIoKSkpLm51bGxpc2goKVxuICAgICAgfSkubnVsbGlzaCgpXG4gICAgfSlcbiAgKSxcbiAgdXNhZ2U6IHVzYWdlU2NoZW1hLm51bGxpc2goKVxufSk7XG52YXIgb3BlbmFpQ29tcGxldGlvbkNodW5rU2NoZW1hID0gejUudW5pb24oW1xuICB6NS5vYmplY3Qoe1xuICAgIGlkOiB6NS5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgY3JlYXRlZDogejUubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgIG1vZGVsOiB6NS5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgY2hvaWNlczogejUuYXJyYXkoXG4gICAgICB6NS5vYmplY3Qoe1xuICAgICAgICB0ZXh0OiB6NS5zdHJpbmcoKSxcbiAgICAgICAgZmluaXNoX3JlYXNvbjogejUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICBpbmRleDogejUubnVtYmVyKCksXG4gICAgICAgIGxvZ3Byb2JzOiB6NS5vYmplY3Qoe1xuICAgICAgICAgIHRva2VuczogejUuYXJyYXkoejUuc3RyaW5nKCkpLFxuICAgICAgICAgIHRva2VuX2xvZ3Byb2JzOiB6NS5hcnJheSh6NS5udW1iZXIoKSksXG4gICAgICAgICAgdG9wX2xvZ3Byb2JzOiB6NS5hcnJheSh6NS5yZWNvcmQoejUuc3RyaW5nKCksIHo1Lm51bWJlcigpKSkubnVsbGlzaCgpXG4gICAgICAgIH0pLm51bGxpc2goKVxuICAgICAgfSlcbiAgICApLFxuICAgIHVzYWdlOiB1c2FnZVNjaGVtYS5udWxsaXNoKClcbiAgfSksXG4gIG9wZW5haUVycm9yRGF0YVNjaGVtYVxuXSk7XG5cbi8vIHNyYy9lbWJlZGRpbmcvb3BlbmFpLWVtYmVkZGluZy1tb2RlbC50c1xuaW1wb3J0IHtcbiAgVG9vTWFueUVtYmVkZGluZ1ZhbHVlc0ZvckNhbGxFcnJvclxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnMzLFxuICBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyIGFzIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXIzLFxuICBwYXJzZVByb3ZpZGVyT3B0aW9ucyBhcyBwYXJzZVByb3ZpZGVyT3B0aW9uczMsXG4gIHBvc3RKc29uVG9BcGkgYXMgcG9zdEpzb25Ub0FwaTNcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejcgfSBmcm9tIFwiem9kL3Y0XCI7XG5cbi8vIHNyYy9lbWJlZGRpbmcvb3BlbmFpLWVtYmVkZGluZy1vcHRpb25zLnRzXG5pbXBvcnQgeyB6IGFzIHo2IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5haUVtYmVkZGluZ1Byb3ZpZGVyT3B0aW9ucyA9IHo2Lm9iamVjdCh7XG4gIC8qKlxuICBUaGUgbnVtYmVyIG9mIGRpbWVuc2lvbnMgdGhlIHJlc3VsdGluZyBvdXRwdXQgZW1iZWRkaW5ncyBzaG91bGQgaGF2ZS5cbiAgT25seSBzdXBwb3J0ZWQgaW4gdGV4dC1lbWJlZGRpbmctMyBhbmQgbGF0ZXIgbW9kZWxzLlxuICAgICAqL1xuICBkaW1lbnNpb25zOiB6Ni5udW1iZXIoKS5vcHRpb25hbCgpLFxuICAvKipcbiAgQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvXG4gIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gTGVhcm4gbW9yZS5cbiAgKi9cbiAgdXNlcjogejYuc3RyaW5nKCkub3B0aW9uYWwoKVxufSk7XG5cbi8vIHNyYy9lbWJlZGRpbmcvb3BlbmFpLWVtYmVkZGluZy1tb2RlbC50c1xudmFyIE9wZW5BSUVtYmVkZGluZ01vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLnNwZWNpZmljYXRpb25WZXJzaW9uID0gXCJ2MlwiO1xuICAgIHRoaXMubWF4RW1iZWRkaW5nc1BlckNhbGwgPSAyMDQ4O1xuICAgIHRoaXMuc3VwcG9ydHNQYXJhbGxlbENhbGxzID0gdHJ1ZTtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZG9FbWJlZCh7XG4gICAgdmFsdWVzLFxuICAgIGhlYWRlcnMsXG4gICAgYWJvcnRTaWduYWwsXG4gICAgcHJvdmlkZXJPcHRpb25zXG4gIH0pIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHZhbHVlcy5sZW5ndGggPiB0aGlzLm1heEVtYmVkZGluZ3NQZXJDYWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVG9vTWFueUVtYmVkZGluZ1ZhbHVlc0ZvckNhbGxFcnJvcih7XG4gICAgICAgIHByb3ZpZGVyOiB0aGlzLnByb3ZpZGVyLFxuICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWQsXG4gICAgICAgIG1heEVtYmVkZGluZ3NQZXJDYWxsOiB0aGlzLm1heEVtYmVkZGluZ3NQZXJDYWxsLFxuICAgICAgICB2YWx1ZXNcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBvcGVuYWlPcHRpb25zID0gKF9hID0gYXdhaXQgcGFyc2VQcm92aWRlck9wdGlvbnMzKHtcbiAgICAgIHByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgcHJvdmlkZXJPcHRpb25zLFxuICAgICAgc2NoZW1hOiBvcGVuYWlFbWJlZGRpbmdQcm92aWRlck9wdGlvbnNcbiAgICB9KSkgIT0gbnVsbCA/IF9hIDoge307XG4gICAgY29uc3Qge1xuICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgcmF3VmFsdWVcbiAgICB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaTMoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgICBwYXRoOiBcIi9lbWJlZGRpbmdzXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczModGhpcy5jb25maWcuaGVhZGVycygpLCBoZWFkZXJzKSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWxJZCxcbiAgICAgICAgaW5wdXQ6IHZhbHVlcyxcbiAgICAgICAgZW5jb2RpbmdfZm9ybWF0OiBcImZsb2F0XCIsXG4gICAgICAgIGRpbWVuc2lvbnM6IG9wZW5haU9wdGlvbnMuZGltZW5zaW9ucyxcbiAgICAgICAgdXNlcjogb3BlbmFpT3B0aW9ucy51c2VyXG4gICAgICB9LFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBvcGVuYWlGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyMyhcbiAgICAgICAgb3BlbmFpVGV4dEVtYmVkZGluZ1Jlc3BvbnNlU2NoZW1hXG4gICAgICApLFxuICAgICAgYWJvcnRTaWduYWwsXG4gICAgICBmZXRjaDogdGhpcy5jb25maWcuZmV0Y2hcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZW1iZWRkaW5nczogcmVzcG9uc2UuZGF0YS5tYXAoKGl0ZW0pID0+IGl0ZW0uZW1iZWRkaW5nKSxcbiAgICAgIHVzYWdlOiByZXNwb25zZS51c2FnZSA/IHsgdG9rZW5zOiByZXNwb25zZS51c2FnZS5wcm9tcHRfdG9rZW5zIH0gOiB2b2lkIDAsXG4gICAgICByZXNwb25zZTogeyBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsIGJvZHk6IHJhd1ZhbHVlIH1cbiAgICB9O1xuICB9XG59O1xudmFyIG9wZW5haVRleHRFbWJlZGRpbmdSZXNwb25zZVNjaGVtYSA9IHo3Lm9iamVjdCh7XG4gIGRhdGE6IHo3LmFycmF5KHo3Lm9iamVjdCh7IGVtYmVkZGluZzogejcuYXJyYXkoejcubnVtYmVyKCkpIH0pKSxcbiAgdXNhZ2U6IHo3Lm9iamVjdCh7IHByb21wdF90b2tlbnM6IHo3Lm51bWJlcigpIH0pLm51bGxpc2goKVxufSk7XG5cbi8vIHNyYy9pbWFnZS9vcGVuYWktaW1hZ2UtbW9kZWwudHNcbmltcG9ydCB7XG4gIGNvbWJpbmVIZWFkZXJzIGFzIGNvbWJpbmVIZWFkZXJzNCxcbiAgY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlciBhcyBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyNCxcbiAgcG9zdEpzb25Ub0FwaSBhcyBwb3N0SnNvblRvQXBpNFxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6OCB9IGZyb20gXCJ6b2QvdjRcIjtcblxuLy8gc3JjL2ltYWdlL29wZW5haS1pbWFnZS1vcHRpb25zLnRzXG52YXIgbW9kZWxNYXhJbWFnZXNQZXJDYWxsID0ge1xuICBcImRhbGwtZS0zXCI6IDEsXG4gIFwiZGFsbC1lLTJcIjogMTAsXG4gIFwiZ3B0LWltYWdlLTFcIjogMTBcbn07XG52YXIgaGFzRGVmYXVsdFJlc3BvbnNlRm9ybWF0ID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZ3B0LWltYWdlLTFcIl0pO1xuXG4vLyBzcmMvaW1hZ2Uvb3BlbmFpLWltYWdlLW1vZGVsLnRzXG52YXIgT3BlbkFJSW1hZ2VNb2RlbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobW9kZWxJZCwgY29uZmlnKSB7XG4gICAgdGhpcy5tb2RlbElkID0gbW9kZWxJZDtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLnNwZWNpZmljYXRpb25WZXJzaW9uID0gXCJ2MlwiO1xuICB9XG4gIGdldCBtYXhJbWFnZXNQZXJDYWxsKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gbW9kZWxNYXhJbWFnZXNQZXJDYWxsW3RoaXMubW9kZWxJZF0pICE9IG51bGwgPyBfYSA6IDE7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBhc3luYyBkb0dlbmVyYXRlKHtcbiAgICBwcm9tcHQsXG4gICAgbixcbiAgICBzaXplLFxuICAgIGFzcGVjdFJhdGlvLFxuICAgIHNlZWQsXG4gICAgcHJvdmlkZXJPcHRpb25zLFxuICAgIGhlYWRlcnMsXG4gICAgYWJvcnRTaWduYWxcbiAgfSkge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuICAgIGlmIChhc3BlY3RSYXRpbyAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgIHNldHRpbmc6IFwiYXNwZWN0UmF0aW9cIixcbiAgICAgICAgZGV0YWlsczogXCJUaGlzIG1vZGVsIGRvZXMgbm90IHN1cHBvcnQgYXNwZWN0IHJhdGlvLiBVc2UgYHNpemVgIGluc3RlYWQuXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VlZCAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHsgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsIHNldHRpbmc6IFwic2VlZFwiIH0pO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IChfYyA9IChfYiA9IChfYSA9IHRoaXMuY29uZmlnLl9pbnRlcm5hbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmN1cnJlbnREYXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2IuY2FsbChfYSkpICE9IG51bGwgPyBfYyA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHsgdmFsdWU6IHJlc3BvbnNlLCByZXNwb25zZUhlYWRlcnMgfSA9IGF3YWl0IHBvc3RKc29uVG9BcGk0KHtcbiAgICAgIHVybDogdGhpcy5jb25maWcudXJsKHtcbiAgICAgICAgcGF0aDogXCIvaW1hZ2VzL2dlbmVyYXRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczQodGhpcy5jb25maWcuaGVhZGVycygpLCBoZWFkZXJzKSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWxJZCxcbiAgICAgICAgcHJvbXB0LFxuICAgICAgICBuLFxuICAgICAgICBzaXplLFxuICAgICAgICAuLi4oX2QgPSBwcm92aWRlck9wdGlvbnMub3BlbmFpKSAhPSBudWxsID8gX2QgOiB7fSxcbiAgICAgICAgLi4uIWhhc0RlZmF1bHRSZXNwb25zZUZvcm1hdC5oYXModGhpcy5tb2RlbElkKSA/IHsgcmVzcG9uc2VfZm9ybWF0OiBcImI2NF9qc29uXCIgfSA6IHt9XG4gICAgICB9LFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBvcGVuYWlGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyNChcbiAgICAgICAgb3BlbmFpSW1hZ2VSZXNwb25zZVNjaGVtYVxuICAgICAgKSxcbiAgICAgIGFib3J0U2lnbmFsLFxuICAgICAgZmV0Y2g6IHRoaXMuY29uZmlnLmZldGNoXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGltYWdlczogcmVzcG9uc2UuZGF0YS5tYXAoKGl0ZW0pID0+IGl0ZW0uYjY0X2pzb24pLFxuICAgICAgd2FybmluZ3MsXG4gICAgICByZXNwb25zZToge1xuICAgICAgICB0aW1lc3RhbXA6IGN1cnJlbnREYXRlLFxuICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVyc1xuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgaW1hZ2VzOiByZXNwb25zZS5kYXRhLm1hcChcbiAgICAgICAgICAgIChpdGVtKSA9PiBpdGVtLnJldmlzZWRfcHJvbXB0ID8ge1xuICAgICAgICAgICAgICByZXZpc2VkUHJvbXB0OiBpdGVtLnJldmlzZWRfcHJvbXB0XG4gICAgICAgICAgICB9IDogbnVsbFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG52YXIgb3BlbmFpSW1hZ2VSZXNwb25zZVNjaGVtYSA9IHo4Lm9iamVjdCh7XG4gIGRhdGE6IHo4LmFycmF5KFxuICAgIHo4Lm9iamVjdCh7IGI2NF9qc29uOiB6OC5zdHJpbmcoKSwgcmV2aXNlZF9wcm9tcHQ6IHo4LnN0cmluZygpLm9wdGlvbmFsKCkgfSlcbiAgKVxufSk7XG5cbi8vIHNyYy90b29sL2NvZGUtaW50ZXJwcmV0ZXIudHNcbmltcG9ydCB7IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHo5IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIGNvZGVJbnRlcnByZXRlcklucHV0U2NoZW1hID0gejkub2JqZWN0KHtcbiAgY29kZTogejkuc3RyaW5nKCkubnVsbGlzaCgpLFxuICBjb250YWluZXJJZDogejkuc3RyaW5nKClcbn0pO1xudmFyIGNvZGVJbnRlcnByZXRlck91dHB1dFNjaGVtYSA9IHo5Lm9iamVjdCh7XG4gIG91dHB1dHM6IHo5LmFycmF5KFxuICAgIHo5LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgejkub2JqZWN0KHsgdHlwZTogejkubGl0ZXJhbChcImxvZ3NcIiksIGxvZ3M6IHo5LnN0cmluZygpIH0pLFxuICAgICAgejkub2JqZWN0KHsgdHlwZTogejkubGl0ZXJhbChcImltYWdlXCIpLCB1cmw6IHo5LnN0cmluZygpIH0pXG4gICAgXSlcbiAgKS5udWxsaXNoKClcbn0pO1xudmFyIGNvZGVJbnRlcnByZXRlckFyZ3NTY2hlbWEgPSB6OS5vYmplY3Qoe1xuICBjb250YWluZXI6IHo5LnVuaW9uKFtcbiAgICB6OS5zdHJpbmcoKSxcbiAgICB6OS5vYmplY3Qoe1xuICAgICAgZmlsZUlkczogejkuYXJyYXkoejkuc3RyaW5nKCkpLm9wdGlvbmFsKClcbiAgICB9KVxuICBdKS5vcHRpb25hbCgpXG59KTtcbnZhciBjb2RlSW50ZXJwcmV0ZXJUb29sRmFjdG9yeSA9IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5V2l0aE91dHB1dFNjaGVtYSh7XG4gIGlkOiBcIm9wZW5haS5jb2RlX2ludGVycHJldGVyXCIsXG4gIG5hbWU6IFwiY29kZV9pbnRlcnByZXRlclwiLFxuICBpbnB1dFNjaGVtYTogY29kZUludGVycHJldGVySW5wdXRTY2hlbWEsXG4gIG91dHB1dFNjaGVtYTogY29kZUludGVycHJldGVyT3V0cHV0U2NoZW1hXG59KTtcbnZhciBjb2RlSW50ZXJwcmV0ZXIgPSAoYXJncyA9IHt9KSA9PiB7XG4gIHJldHVybiBjb2RlSW50ZXJwcmV0ZXJUb29sRmFjdG9yeShhcmdzKTtcbn07XG5cbi8vIHNyYy90b29sL2ZpbGUtc2VhcmNoLnRzXG5pbXBvcnQgeyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEgYXMgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hMiB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMCB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBjb21wYXJpc29uRmlsdGVyU2NoZW1hID0gejEwLm9iamVjdCh7XG4gIGtleTogejEwLnN0cmluZygpLFxuICB0eXBlOiB6MTAuZW51bShbXCJlcVwiLCBcIm5lXCIsIFwiZ3RcIiwgXCJndGVcIiwgXCJsdFwiLCBcImx0ZVwiXSksXG4gIHZhbHVlOiB6MTAudW5pb24oW3oxMC5zdHJpbmcoKSwgejEwLm51bWJlcigpLCB6MTAuYm9vbGVhbigpXSlcbn0pO1xudmFyIGNvbXBvdW5kRmlsdGVyU2NoZW1hID0gejEwLm9iamVjdCh7XG4gIHR5cGU6IHoxMC5lbnVtKFtcImFuZFwiLCBcIm9yXCJdKSxcbiAgZmlsdGVyczogejEwLmFycmF5KFxuICAgIHoxMC51bmlvbihbY29tcGFyaXNvbkZpbHRlclNjaGVtYSwgejEwLmxhenkoKCkgPT4gY29tcG91bmRGaWx0ZXJTY2hlbWEpXSlcbiAgKVxufSk7XG52YXIgZmlsZVNlYXJjaEFyZ3NTY2hlbWEgPSB6MTAub2JqZWN0KHtcbiAgdmVjdG9yU3RvcmVJZHM6IHoxMC5hcnJheSh6MTAuc3RyaW5nKCkpLFxuICBtYXhOdW1SZXN1bHRzOiB6MTAubnVtYmVyKCkub3B0aW9uYWwoKSxcbiAgcmFua2luZzogejEwLm9iamVjdCh7XG4gICAgcmFua2VyOiB6MTAuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBzY29yZVRocmVzaG9sZDogejEwLm51bWJlcigpLm9wdGlvbmFsKClcbiAgfSkub3B0aW9uYWwoKSxcbiAgZmlsdGVyczogejEwLnVuaW9uKFtjb21wYXJpc29uRmlsdGVyU2NoZW1hLCBjb21wb3VuZEZpbHRlclNjaGVtYV0pLm9wdGlvbmFsKClcbn0pO1xudmFyIGZpbGVTZWFyY2hPdXRwdXRTY2hlbWEgPSB6MTAub2JqZWN0KHtcbiAgcXVlcmllczogejEwLmFycmF5KHoxMC5zdHJpbmcoKSksXG4gIHJlc3VsdHM6IHoxMC5hcnJheShcbiAgICB6MTAub2JqZWN0KHtcbiAgICAgIGF0dHJpYnV0ZXM6IHoxMC5yZWNvcmQoejEwLnN0cmluZygpLCB6MTAudW5rbm93bigpKSxcbiAgICAgIGZpbGVJZDogejEwLnN0cmluZygpLFxuICAgICAgZmlsZW5hbWU6IHoxMC5zdHJpbmcoKSxcbiAgICAgIHNjb3JlOiB6MTAubnVtYmVyKCksXG4gICAgICB0ZXh0OiB6MTAuc3RyaW5nKClcbiAgICB9KVxuICApLm51bGxhYmxlKClcbn0pO1xudmFyIGZpbGVTZWFyY2ggPSBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEyKHtcbiAgaWQ6IFwib3BlbmFpLmZpbGVfc2VhcmNoXCIsXG4gIG5hbWU6IFwiZmlsZV9zZWFyY2hcIixcbiAgaW5wdXRTY2hlbWE6IHoxMC5vYmplY3Qoe30pLFxuICBvdXRwdXRTY2hlbWE6IGZpbGVTZWFyY2hPdXRwdXRTY2hlbWFcbn0pO1xuXG4vLyBzcmMvdG9vbC9pbWFnZS1nZW5lcmF0aW9uLnRzXG5pbXBvcnQgeyBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEgYXMgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnlXaXRoT3V0cHV0U2NoZW1hMyB9IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyLXV0aWxzXCI7XG5pbXBvcnQgeyB6IGFzIHoxMSB9IGZyb20gXCJ6b2QvdjRcIjtcbnZhciBpbWFnZUdlbmVyYXRpb25BcmdzU2NoZW1hID0gejExLm9iamVjdCh7XG4gIGJhY2tncm91bmQ6IHoxMS5lbnVtKFtcImF1dG9cIiwgXCJvcGFxdWVcIiwgXCJ0cmFuc3BhcmVudFwiXSkub3B0aW9uYWwoKSxcbiAgaW5wdXRGaWRlbGl0eTogejExLmVudW0oW1wibG93XCIsIFwiaGlnaFwiXSkub3B0aW9uYWwoKSxcbiAgaW5wdXRJbWFnZU1hc2s6IHoxMS5vYmplY3Qoe1xuICAgIGZpbGVJZDogejExLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgaW1hZ2VVcmw6IHoxMS5zdHJpbmcoKS5vcHRpb25hbCgpXG4gIH0pLm9wdGlvbmFsKCksXG4gIG1vZGVsOiB6MTEuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgbW9kZXJhdGlvbjogejExLmVudW0oW1wiYXV0b1wiXSkub3B0aW9uYWwoKSxcbiAgb3V0cHV0Q29tcHJlc3Npb246IHoxMS5udW1iZXIoKS5pbnQoKS5taW4oMCkubWF4KDEwMCkub3B0aW9uYWwoKSxcbiAgb3V0cHV0Rm9ybWF0OiB6MTEuZW51bShbXCJwbmdcIiwgXCJqcGVnXCIsIFwid2VicFwiXSkub3B0aW9uYWwoKSxcbiAgcXVhbGl0eTogejExLmVudW0oW1wiYXV0b1wiLCBcImxvd1wiLCBcIm1lZGl1bVwiLCBcImhpZ2hcIl0pLm9wdGlvbmFsKCksXG4gIHNpemU6IHoxMS5lbnVtKFtcIjEwMjR4MTAyNFwiLCBcIjEwMjR4MTUzNlwiLCBcIjE1MzZ4MTAyNFwiLCBcImF1dG9cIl0pLm9wdGlvbmFsKClcbn0pLnN0cmljdCgpO1xudmFyIGltYWdlR2VuZXJhdGlvbk91dHB1dFNjaGVtYSA9IHoxMS5vYmplY3Qoe1xuICByZXN1bHQ6IHoxMS5zdHJpbmcoKVxufSk7XG52YXIgaW1hZ2VHZW5lcmF0aW9uVG9vbEZhY3RvcnkgPSBjcmVhdGVQcm92aWRlckRlZmluZWRUb29sRmFjdG9yeVdpdGhPdXRwdXRTY2hlbWEzKHtcbiAgaWQ6IFwib3BlbmFpLmltYWdlX2dlbmVyYXRpb25cIixcbiAgbmFtZTogXCJpbWFnZV9nZW5lcmF0aW9uXCIsXG4gIGlucHV0U2NoZW1hOiB6MTEub2JqZWN0KHt9KSxcbiAgb3V0cHV0U2NoZW1hOiBpbWFnZUdlbmVyYXRpb25PdXRwdXRTY2hlbWFcbn0pO1xudmFyIGltYWdlR2VuZXJhdGlvbiA9IChhcmdzID0ge30pID0+IHtcbiAgcmV0dXJuIGltYWdlR2VuZXJhdGlvblRvb2xGYWN0b3J5KGFyZ3MpO1xufTtcblxuLy8gc3JjL3Rvb2wvd2ViLXNlYXJjaC50c1xuaW1wb3J0IHsgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnkgfSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6MTIgfSBmcm9tIFwiem9kL3Y0XCI7XG52YXIgd2ViU2VhcmNoQXJnc1NjaGVtYSA9IHoxMi5vYmplY3Qoe1xuICBmaWx0ZXJzOiB6MTIub2JqZWN0KHtcbiAgICBhbGxvd2VkRG9tYWluczogejEyLmFycmF5KHoxMi5zdHJpbmcoKSkub3B0aW9uYWwoKVxuICB9KS5vcHRpb25hbCgpLFxuICBzZWFyY2hDb250ZXh0U2l6ZTogejEyLmVudW0oW1wibG93XCIsIFwibWVkaXVtXCIsIFwiaGlnaFwiXSkub3B0aW9uYWwoKSxcbiAgdXNlckxvY2F0aW9uOiB6MTIub2JqZWN0KHtcbiAgICB0eXBlOiB6MTIubGl0ZXJhbChcImFwcHJveGltYXRlXCIpLFxuICAgIGNvdW50cnk6IHoxMi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIGNpdHk6IHoxMi5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIHJlZ2lvbjogejEyLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgdGltZXpvbmU6IHoxMi5zdHJpbmcoKS5vcHRpb25hbCgpXG4gIH0pLm9wdGlvbmFsKClcbn0pO1xudmFyIHdlYlNlYXJjaFRvb2xGYWN0b3J5ID0gY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3Rvcnkoe1xuICBpZDogXCJvcGVuYWkud2ViX3NlYXJjaFwiLFxuICBuYW1lOiBcIndlYl9zZWFyY2hcIixcbiAgaW5wdXRTY2hlbWE6IHoxMi5vYmplY3Qoe1xuICAgIGFjdGlvbjogejEyLmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgejEyLm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoxMi5saXRlcmFsKFwic2VhcmNoXCIpLFxuICAgICAgICBxdWVyeTogejEyLnN0cmluZygpLm51bGxpc2goKVxuICAgICAgfSksXG4gICAgICB6MTIub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejEyLmxpdGVyYWwoXCJvcGVuX3BhZ2VcIiksXG4gICAgICAgIHVybDogejEyLnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHoxMi5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTIubGl0ZXJhbChcImZpbmRcIiksXG4gICAgICAgIHVybDogejEyLnN0cmluZygpLFxuICAgICAgICBwYXR0ZXJuOiB6MTIuc3RyaW5nKClcbiAgICAgIH0pXG4gICAgXSkubnVsbGlzaCgpXG4gIH0pXG59KTtcbnZhciB3ZWJTZWFyY2ggPSAoYXJncyA9IHt9KSA9PiB7XG4gIHJldHVybiB3ZWJTZWFyY2hUb29sRmFjdG9yeShhcmdzKTtcbn07XG5cbi8vIHNyYy90b29sL3dlYi1zZWFyY2gtcHJldmlldy50c1xuaW1wb3J0IHsgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnkgYXMgY3JlYXRlUHJvdmlkZXJEZWZpbmVkVG9vbEZhY3RvcnkyIH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejEzIH0gZnJvbSBcInpvZC92NFwiO1xudmFyIHdlYlNlYXJjaFByZXZpZXdBcmdzU2NoZW1hID0gejEzLm9iamVjdCh7XG4gIC8qKlxuICAgKiBTZWFyY2ggY29udGV4dCBzaXplIHRvIHVzZSBmb3IgdGhlIHdlYiBzZWFyY2guXG4gICAqIC0gaGlnaDogTW9zdCBjb21wcmVoZW5zaXZlIGNvbnRleHQsIGhpZ2hlc3QgY29zdCwgc2xvd2VyIHJlc3BvbnNlXG4gICAqIC0gbWVkaXVtOiBCYWxhbmNlZCBjb250ZXh0LCBjb3N0LCBhbmQgbGF0ZW5jeSAoZGVmYXVsdClcbiAgICogLSBsb3c6IExlYXN0IGNvbnRleHQsIGxvd2VzdCBjb3N0LCBmYXN0ZXN0IHJlc3BvbnNlXG4gICAqL1xuICBzZWFyY2hDb250ZXh0U2l6ZTogejEzLmVudW0oW1wibG93XCIsIFwibWVkaXVtXCIsIFwiaGlnaFwiXSkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIFVzZXIgbG9jYXRpb24gaW5mb3JtYXRpb24gdG8gcHJvdmlkZSBnZW9ncmFwaGljYWxseSByZWxldmFudCBzZWFyY2ggcmVzdWx0cy5cbiAgICovXG4gIHVzZXJMb2NhdGlvbjogejEzLm9iamVjdCh7XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBsb2NhdGlvbiAoYWx3YXlzICdhcHByb3hpbWF0ZScpXG4gICAgICovXG4gICAgdHlwZTogejEzLmxpdGVyYWwoXCJhcHByb3hpbWF0ZVwiKSxcbiAgICAvKipcbiAgICAgKiBUd28tbGV0dGVyIElTTyBjb3VudHJ5IGNvZGUgKGUuZy4sICdVUycsICdHQicpXG4gICAgICovXG4gICAgY291bnRyeTogejEzLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogQ2l0eSBuYW1lIChmcmVlIHRleHQsIGUuZy4sICdNaW5uZWFwb2xpcycpXG4gICAgICovXG4gICAgY2l0eTogejEzLnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgLyoqXG4gICAgICogUmVnaW9uIG5hbWUgKGZyZWUgdGV4dCwgZS5nLiwgJ01pbm5lc290YScpXG4gICAgICovXG4gICAgcmVnaW9uOiB6MTMuc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICAvKipcbiAgICAgKiBJQU5BIHRpbWV6b25lIChlLmcuLCAnQW1lcmljYS9DaGljYWdvJylcbiAgICAgKi9cbiAgICB0aW1lem9uZTogejEzLnN0cmluZygpLm9wdGlvbmFsKClcbiAgfSkub3B0aW9uYWwoKVxufSk7XG52YXIgd2ViU2VhcmNoUHJldmlldyA9IGNyZWF0ZVByb3ZpZGVyRGVmaW5lZFRvb2xGYWN0b3J5Mih7XG4gIGlkOiBcIm9wZW5haS53ZWJfc2VhcmNoX3ByZXZpZXdcIixcbiAgbmFtZTogXCJ3ZWJfc2VhcmNoX3ByZXZpZXdcIixcbiAgaW5wdXRTY2hlbWE6IHoxMy5vYmplY3Qoe1xuICAgIGFjdGlvbjogejEzLmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgejEzLm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoxMy5saXRlcmFsKFwic2VhcmNoXCIpLFxuICAgICAgICBxdWVyeTogejEzLnN0cmluZygpLm51bGxpc2goKVxuICAgICAgfSksXG4gICAgICB6MTMub2JqZWN0KHtcbiAgICAgICAgdHlwZTogejEzLmxpdGVyYWwoXCJvcGVuX3BhZ2VcIiksXG4gICAgICAgIHVybDogejEzLnN0cmluZygpXG4gICAgICB9KSxcbiAgICAgIHoxMy5vYmplY3Qoe1xuICAgICAgICB0eXBlOiB6MTMubGl0ZXJhbChcImZpbmRcIiksXG4gICAgICAgIHVybDogejEzLnN0cmluZygpLFxuICAgICAgICBwYXR0ZXJuOiB6MTMuc3RyaW5nKClcbiAgICAgIH0pXG4gICAgXSkubnVsbGlzaCgpXG4gIH0pXG59KTtcblxuLy8gc3JjL29wZW5haS10b29scy50c1xudmFyIG9wZW5haVRvb2xzID0ge1xuICAvKipcbiAgICogVGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBhbGxvd3MgbW9kZWxzIHRvIHdyaXRlIGFuZCBydW4gUHl0aG9uIGNvZGUgaW4gYVxuICAgKiBzYW5kYm94ZWQgZW52aXJvbm1lbnQgdG8gc29sdmUgY29tcGxleCBwcm9ibGVtcyBpbiBkb21haW5zIGxpa2UgZGF0YSBhbmFseXNpcyxcbiAgICogY29kaW5nLCBhbmQgbWF0aC5cbiAgICpcbiAgICogQHBhcmFtIGNvbnRhaW5lciAtIFRoZSBjb250YWluZXIgdG8gdXNlIGZvciB0aGUgY29kZSBpbnRlcnByZXRlci5cbiAgICpcbiAgICogTXVzdCBoYXZlIG5hbWUgYGNvZGVfaW50ZXJwcmV0ZXJgLlxuICAgKi9cbiAgY29kZUludGVycHJldGVyLFxuICAvKipcbiAgICogRmlsZSBzZWFyY2ggaXMgYSB0b29sIGF2YWlsYWJsZSBpbiB0aGUgUmVzcG9uc2VzIEFQSS4gSXQgZW5hYmxlcyBtb2RlbHMgdG9cbiAgICogcmV0cmlldmUgaW5mb3JtYXRpb24gaW4gYSBrbm93bGVkZ2UgYmFzZSBvZiBwcmV2aW91c2x5IHVwbG9hZGVkIGZpbGVzIHRocm91Z2hcbiAgICogc2VtYW50aWMgYW5kIGtleXdvcmQgc2VhcmNoLlxuICAgKlxuICAgKiBNdXN0IGhhdmUgbmFtZSBgZmlsZV9zZWFyY2hgLlxuICAgKlxuICAgKiBAcGFyYW0gdmVjdG9yU3RvcmVJZHMgLSBUaGUgdmVjdG9yIHN0b3JlIElEcyB0byB1c2UgZm9yIHRoZSBmaWxlIHNlYXJjaC5cbiAgICogQHBhcmFtIG1heE51bVJlc3VsdHMgLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4gICAqIEBwYXJhbSByYW5raW5nIC0gVGhlIHJhbmtpbmcgb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBmaWxlIHNlYXJjaC5cbiAgICogQHBhcmFtIGZpbHRlcnMgLSBUaGUgZmlsdGVycyB0byB1c2UgZm9yIHRoZSBmaWxlIHNlYXJjaC5cbiAgICovXG4gIGZpbGVTZWFyY2gsXG4gIC8qKlxuICAgKiBUaGUgaW1hZ2UgZ2VuZXJhdGlvbiB0b29sIGFsbG93cyB5b3UgdG8gZ2VuZXJhdGUgaW1hZ2VzIHVzaW5nIGEgdGV4dCBwcm9tcHQsXG4gICAqIGFuZCBvcHRpb25hbGx5IGltYWdlIGlucHV0cy4gSXQgbGV2ZXJhZ2VzIHRoZSBHUFQgSW1hZ2UgbW9kZWwsXG4gICAqIGFuZCBhdXRvbWF0aWNhbGx5IG9wdGltaXplcyB0ZXh0IGlucHV0cyBmb3IgaW1wcm92ZWQgcGVyZm9ybWFuY2UuXG4gICAqXG4gICAqIE11c3QgaGF2ZSBuYW1lIGBpbWFnZV9nZW5lcmF0aW9uYC5cbiAgICpcbiAgICogQHBhcmFtIHNpemUgLSBJbWFnZSBkaW1lbnNpb25zIChlLmcuLCAxMDI0eDEwMjQsIDEwMjR4MTUzNilcbiAgICogQHBhcmFtIHF1YWxpdHkgLSBSZW5kZXJpbmcgcXVhbGl0eSAoZS5nLiBsb3csIG1lZGl1bSwgaGlnaClcbiAgICogQHBhcmFtIGZvcm1hdCAtIEZpbGUgb3V0cHV0IGZvcm1hdFxuICAgKiBAcGFyYW0gY29tcHJlc3Npb24gLSBDb21wcmVzc2lvbiBsZXZlbCAoMC0xMDAlKSBmb3IgSlBFRyBhbmQgV2ViUCBmb3JtYXRzXG4gICAqIEBwYXJhbSBiYWNrZ3JvdW5kIC0gVHJhbnNwYXJlbnQgb3Igb3BhcXVlXG4gICAqL1xuICBpbWFnZUdlbmVyYXRpb24sXG4gIC8qKlxuICAgKiBXZWIgc2VhcmNoIGFsbG93cyBtb2RlbHMgdG8gYWNjZXNzIHVwLXRvLWRhdGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgaW50ZXJuZXRcbiAgICogYW5kIHByb3ZpZGUgYW5zd2VycyB3aXRoIHNvdXJjZWQgY2l0YXRpb25zLlxuICAgKlxuICAgKiBNdXN0IGhhdmUgbmFtZSBgd2ViX3NlYXJjaF9wcmV2aWV3YC5cbiAgICpcbiAgICogQHBhcmFtIHNlYXJjaENvbnRleHRTaXplIC0gVGhlIHNlYXJjaCBjb250ZXh0IHNpemUgdG8gdXNlIGZvciB0aGUgd2ViIHNlYXJjaC5cbiAgICogQHBhcmFtIHVzZXJMb2NhdGlvbiAtIFRoZSB1c2VyIGxvY2F0aW9uIHRvIHVzZSBmb3IgdGhlIHdlYiBzZWFyY2guXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgd2ViU2VhcmNoYCBpbnN0ZWFkLlxuICAgKi9cbiAgd2ViU2VhcmNoUHJldmlldyxcbiAgLyoqXG4gICAqIFdlYiBzZWFyY2ggYWxsb3dzIG1vZGVscyB0byBhY2Nlc3MgdXAtdG8tZGF0ZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBpbnRlcm5ldFxuICAgKiBhbmQgcHJvdmlkZSBhbnN3ZXJzIHdpdGggc291cmNlZCBjaXRhdGlvbnMuXG4gICAqXG4gICAqIE11c3QgaGF2ZSBuYW1lIGB3ZWJfc2VhcmNoYC5cbiAgICpcbiAgICogQHBhcmFtIGZpbHRlcnMgLSBUaGUgZmlsdGVycyB0byB1c2UgZm9yIHRoZSB3ZWIgc2VhcmNoLlxuICAgKiBAcGFyYW0gc2VhcmNoQ29udGV4dFNpemUgLSBUaGUgc2VhcmNoIGNvbnRleHQgc2l6ZSB0byB1c2UgZm9yIHRoZSB3ZWIgc2VhcmNoLlxuICAgKiBAcGFyYW0gdXNlckxvY2F0aW9uIC0gVGhlIHVzZXIgbG9jYXRpb24gdG8gdXNlIGZvciB0aGUgd2ViIHNlYXJjaC5cbiAgICovXG4gIHdlYlNlYXJjaFxufTtcblxuLy8gc3JjL3Jlc3BvbnNlcy9vcGVuYWktcmVzcG9uc2VzLWxhbmd1YWdlLW1vZGVsLnRzXG5pbXBvcnQge1xuICBBUElDYWxsRXJyb3Jcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXJcIjtcbmltcG9ydCB7XG4gIGNvbWJpbmVIZWFkZXJzIGFzIGNvbWJpbmVIZWFkZXJzNSxcbiAgY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIgYXMgY3JlYXRlRXZlbnRTb3VyY2VSZXNwb25zZUhhbmRsZXIzLFxuICBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyIGFzIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXI1LFxuICBnZW5lcmF0ZUlkIGFzIGdlbmVyYXRlSWQyLFxuICBwYXJzZVByb3ZpZGVyT3B0aW9ucyBhcyBwYXJzZVByb3ZpZGVyT3B0aW9uczUsXG4gIHBvc3RKc29uVG9BcGkgYXMgcG9zdEpzb25Ub0FwaTVcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejE1IH0gZnJvbSBcInpvZC92NFwiO1xuXG4vLyBzcmMvcmVzcG9uc2VzL2NvbnZlcnQtdG8tb3BlbmFpLXJlc3BvbnNlcy1pbnB1dC50c1xuaW1wb3J0IHtcbiAgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3IgYXMgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3I0XG59IGZyb20gXCJAYWktc2RrL3Byb3ZpZGVyXCI7XG5pbXBvcnQgeyBjb252ZXJ0VG9CYXNlNjQgYXMgY29udmVydFRvQmFzZTY0MiwgcGFyc2VQcm92aWRlck9wdGlvbnMgYXMgcGFyc2VQcm92aWRlck9wdGlvbnM0IH0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejE0IH0gZnJvbSBcInpvZC92NFwiO1xuZnVuY3Rpb24gaXNGaWxlSWQoZGF0YSwgcHJlZml4ZXMpIHtcbiAgaWYgKCFwcmVmaXhlcykgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gcHJlZml4ZXMuc29tZSgocHJlZml4KSA9PiBkYXRhLnN0YXJ0c1dpdGgocHJlZml4KSk7XG59XG5hc3luYyBmdW5jdGlvbiBjb252ZXJ0VG9PcGVuQUlSZXNwb25zZXNJbnB1dCh7XG4gIHByb21wdCxcbiAgc3lzdGVtTWVzc2FnZU1vZGUsXG4gIGZpbGVJZFByZWZpeGVzLFxuICBzdG9yZVxufSkge1xuICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgY29uc3QgaW5wdXQgPSBbXTtcbiAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgZm9yIChjb25zdCB7IHJvbGUsIGNvbnRlbnQgfSBvZiBwcm9tcHQpIHtcbiAgICBzd2l0Y2ggKHJvbGUpIHtcbiAgICAgIGNhc2UgXCJzeXN0ZW1cIjoge1xuICAgICAgICBzd2l0Y2ggKHN5c3RlbU1lc3NhZ2VNb2RlKSB7XG4gICAgICAgICAgY2FzZSBcInN5c3RlbVwiOiB7XG4gICAgICAgICAgICBpbnB1dC5wdXNoKHsgcm9sZTogXCJzeXN0ZW1cIiwgY29udGVudCB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwiZGV2ZWxvcGVyXCI6IHtcbiAgICAgICAgICAgIGlucHV0LnB1c2goeyByb2xlOiBcImRldmVsb3BlclwiLCBjb250ZW50IH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjoge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwib3RoZXJcIixcbiAgICAgICAgICAgICAgbWVzc2FnZTogXCJzeXN0ZW0gbWVzc2FnZXMgYXJlIHJlbW92ZWQgZm9yIHRoaXMgbW9kZWxcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc3QgX2V4aGF1c3RpdmVDaGVjayA9IHN5c3RlbU1lc3NhZ2VNb2RlO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgVW5zdXBwb3J0ZWQgc3lzdGVtIG1lc3NhZ2UgbW9kZTogJHtfZXhoYXVzdGl2ZUNoZWNrfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInVzZXJcIjoge1xuICAgICAgICBpbnB1dC5wdXNoKHtcbiAgICAgICAgICByb2xlOiBcInVzZXJcIixcbiAgICAgICAgICBjb250ZW50OiBjb250ZW50Lm1hcCgocGFydCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTIsIF9iMiwgX2MyO1xuICAgICAgICAgICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IFwiaW5wdXRfdGV4dFwiLCB0ZXh0OiBwYXJ0LnRleHQgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiZmlsZVwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQubWVkaWFUeXBlLnN0YXJ0c1dpdGgoXCJpbWFnZS9cIikpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhVHlwZSA9IHBhcnQubWVkaWFUeXBlID09PSBcImltYWdlLypcIiA/IFwiaW1hZ2UvanBlZ1wiIDogcGFydC5tZWRpYVR5cGU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImlucHV0X2ltYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIC4uLnBhcnQuZGF0YSBpbnN0YW5jZW9mIFVSTCA/IHsgaW1hZ2VfdXJsOiBwYXJ0LmRhdGEudG9TdHJpbmcoKSB9IDogdHlwZW9mIHBhcnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiBpc0ZpbGVJZChwYXJ0LmRhdGEsIGZpbGVJZFByZWZpeGVzKSA/IHsgZmlsZV9pZDogcGFydC5kYXRhIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaW1hZ2VfdXJsOiBgZGF0YToke21lZGlhVHlwZX07YmFzZTY0LCR7Y29udmVydFRvQmFzZTY0MihwYXJ0LmRhdGEpfWBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiAoX2IyID0gKF9hMiA9IHBhcnQucHJvdmlkZXJPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2EyLm9wZW5haSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iMi5pbWFnZURldGFpbFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnQubWVkaWFUeXBlID09PSBcImFwcGxpY2F0aW9uL3BkZlwiKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocGFydC5kYXRhIGluc3RhbmNlb2YgVVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJpbnB1dF9maWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZmlsZV91cmw6IHBhcnQuZGF0YS50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImlucHV0X2ZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgLi4udHlwZW9mIHBhcnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiBpc0ZpbGVJZChwYXJ0LmRhdGEsIGZpbGVJZFByZWZpeGVzKSA/IHsgZmlsZV9pZDogcGFydC5kYXRhIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IChfYzIgPSBwYXJ0LmZpbGVuYW1lKSAhPSBudWxsID8gX2MyIDogYHBhcnQtJHtpbmRleH0ucGRmYCxcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGE6IGBkYXRhOmFwcGxpY2F0aW9uL3BkZjtiYXNlNjQsJHtjb252ZXJ0VG9CYXNlNjQyKHBhcnQuZGF0YSl9YFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdXBwb3J0ZWRGdW5jdGlvbmFsaXR5RXJyb3I0KHtcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25hbGl0eTogYGZpbGUgcGFydCBtZWRpYSB0eXBlICR7cGFydC5tZWRpYVR5cGV9YFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcImFzc2lzdGFudFwiOiB7XG4gICAgICAgIGNvbnN0IHJlYXNvbmluZ01lc3NhZ2VzID0ge307XG4gICAgICAgIGNvbnN0IHRvb2xDYWxsUGFydHMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGNvbnRlbnQpIHtcbiAgICAgICAgICBzd2l0Y2ggKHBhcnQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcInRleHRcIjoge1xuICAgICAgICAgICAgICBpbnB1dC5wdXNoKHtcbiAgICAgICAgICAgICAgICByb2xlOiBcImFzc2lzdGFudFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFt7IHR5cGU6IFwib3V0cHV0X3RleHRcIiwgdGV4dDogcGFydC50ZXh0IH1dLFxuICAgICAgICAgICAgICAgIGlkOiAoX2MgPSAoX2IgPSAoX2EgPSBwYXJ0LnByb3ZpZGVyT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm9wZW5haSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLml0ZW1JZCkgIT0gbnVsbCA/IF9jIDogdm9pZCAwXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJ0b29sLWNhbGxcIjoge1xuICAgICAgICAgICAgICB0b29sQ2FsbFBhcnRzW3BhcnQudG9vbENhbGxJZF0gPSBwYXJ0O1xuICAgICAgICAgICAgICBpZiAocGFydC5wcm92aWRlckV4ZWN1dGVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5wdXQucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmdW5jdGlvbl9jYWxsXCIsXG4gICAgICAgICAgICAgICAgY2FsbF9pZDogcGFydC50b29sQ2FsbElkLFxuICAgICAgICAgICAgICAgIG5hbWU6IHBhcnQudG9vbE5hbWUsXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzOiBKU09OLnN0cmluZ2lmeShwYXJ0LmlucHV0KSxcbiAgICAgICAgICAgICAgICBpZDogKF9mID0gKF9lID0gKF9kID0gcGFydC5wcm92aWRlck9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfZC5vcGVuYWkpID09IG51bGwgPyB2b2lkIDAgOiBfZS5pdGVtSWQpICE9IG51bGwgPyBfZiA6IHZvaWQgMFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidG9vbC1yZXN1bHRcIjoge1xuICAgICAgICAgICAgICBpZiAoc3RvcmUpIHtcbiAgICAgICAgICAgICAgICBpbnB1dC5wdXNoKHsgdHlwZTogXCJpdGVtX3JlZmVyZW5jZVwiLCBpZDogcGFydC50b29sQ2FsbElkIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYFJlc3VsdHMgZm9yIE9wZW5BSSB0b29sICR7cGFydC50b29sTmFtZX0gYXJlIG5vdCBzZW50IHRvIHRoZSBBUEkgd2hlbiBzdG9yZSBpcyBmYWxzZWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJyZWFzb25pbmdcIjoge1xuICAgICAgICAgICAgICBjb25zdCBwcm92aWRlck9wdGlvbnMgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczQoe1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBcIm9wZW5haVwiLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyT3B0aW9uczogcGFydC5wcm92aWRlck9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2NoZW1hOiBvcGVuYWlSZXNwb25zZXNSZWFzb25pbmdQcm92aWRlck9wdGlvbnNTY2hlbWFcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGNvbnN0IHJlYXNvbmluZ0lkID0gcHJvdmlkZXJPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcm92aWRlck9wdGlvbnMuaXRlbUlkO1xuICAgICAgICAgICAgICBpZiAocmVhc29uaW5nSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUmVhc29uaW5nTWVzc2FnZSA9IHJlYXNvbmluZ01lc3NhZ2VzW3JlYXNvbmluZ0lkXTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdW1tYXJ5UGFydHMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAocGFydC50ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIHN1bW1hcnlQYXJ0cy5wdXNoKHsgdHlwZTogXCJzdW1tYXJ5X3RleHRcIiwgdGV4dDogcGFydC50ZXh0IH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdSZWFzb25pbmdNZXNzYWdlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIm90aGVyXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBDYW5ub3QgYXBwZW5kIGVtcHR5IHJlYXNvbmluZyBwYXJ0IHRvIGV4aXN0aW5nIHJlYXNvbmluZyBzZXF1ZW5jZS4gU2tpcHBpbmcgcmVhc29uaW5nIHBhcnQ6ICR7SlNPTi5zdHJpbmdpZnkocGFydCl9LmBcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdSZWFzb25pbmdNZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ01lc3NhZ2VzW3JlYXNvbmluZ0lkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmdcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJlYXNvbmluZ0lkLFxuICAgICAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfY29udGVudDogcHJvdmlkZXJPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcm92aWRlck9wdGlvbnMucmVhc29uaW5nRW5jcnlwdGVkQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgc3VtbWFyeTogc3VtbWFyeVBhcnRzXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgaW5wdXQucHVzaChyZWFzb25pbmdNZXNzYWdlc1tyZWFzb25pbmdJZF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBleGlzdGluZ1JlYXNvbmluZ01lc3NhZ2Uuc3VtbWFyeS5wdXNoKC4uLnN1bW1hcnlQYXJ0cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJvdGhlclwiLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYE5vbi1PcGVuQUkgcmVhc29uaW5nIHBhcnRzIGFyZSBub3Qgc3VwcG9ydGVkLiBTa2lwcGluZyByZWFzb25pbmcgcGFydDogJHtKU09OLnN0cmluZ2lmeShwYXJ0KX0uYFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJ0b29sXCI6IHtcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIGNvbnRlbnQpIHtcbiAgICAgICAgICBjb25zdCBvdXRwdXQgPSBwYXJ0Lm91dHB1dDtcbiAgICAgICAgICBsZXQgY29udGVudFZhbHVlO1xuICAgICAgICAgIHN3aXRjaCAob3V0cHV0LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3ItdGV4dFwiOlxuICAgICAgICAgICAgICBjb250ZW50VmFsdWUgPSBvdXRwdXQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNvbnRlbnRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJqc29uXCI6XG4gICAgICAgICAgICBjYXNlIFwiZXJyb3ItanNvblwiOlxuICAgICAgICAgICAgICBjb250ZW50VmFsdWUgPSBKU09OLnN0cmluZ2lmeShvdXRwdXQudmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5wdXQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uX2NhbGxfb3V0cHV0XCIsXG4gICAgICAgICAgICBjYWxsX2lkOiBwYXJ0LnRvb2xDYWxsSWQsXG4gICAgICAgICAgICBvdXRwdXQ6IGNvbnRlbnRWYWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBfZXhoYXVzdGl2ZUNoZWNrID0gcm9sZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCByb2xlOiAke19leGhhdXN0aXZlQ2hlY2t9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGlucHV0LCB3YXJuaW5ncyB9O1xufVxudmFyIG9wZW5haVJlc3BvbnNlc1JlYXNvbmluZ1Byb3ZpZGVyT3B0aW9uc1NjaGVtYSA9IHoxNC5vYmplY3Qoe1xuICBpdGVtSWQ6IHoxNC5zdHJpbmcoKS5udWxsaXNoKCksXG4gIHJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQ6IHoxNC5zdHJpbmcoKS5udWxsaXNoKClcbn0pO1xuXG4vLyBzcmMvcmVzcG9uc2VzL21hcC1vcGVuYWktcmVzcG9uc2VzLWZpbmlzaC1yZWFzb24udHNcbmZ1bmN0aW9uIG1hcE9wZW5BSVJlc3BvbnNlRmluaXNoUmVhc29uKHtcbiAgZmluaXNoUmVhc29uLFxuICBoYXNGdW5jdGlvbkNhbGxcbn0pIHtcbiAgc3dpdGNoIChmaW5pc2hSZWFzb24pIHtcbiAgICBjYXNlIHZvaWQgMDpcbiAgICBjYXNlIG51bGw6XG4gICAgICByZXR1cm4gaGFzRnVuY3Rpb25DYWxsID8gXCJ0b29sLWNhbGxzXCIgOiBcInN0b3BcIjtcbiAgICBjYXNlIFwibWF4X291dHB1dF90b2tlbnNcIjpcbiAgICAgIHJldHVybiBcImxlbmd0aFwiO1xuICAgIGNhc2UgXCJjb250ZW50X2ZpbHRlclwiOlxuICAgICAgcmV0dXJuIFwiY29udGVudC1maWx0ZXJcIjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGhhc0Z1bmN0aW9uQ2FsbCA/IFwidG9vbC1jYWxsc1wiIDogXCJ1bmtub3duXCI7XG4gIH1cbn1cblxuLy8gc3JjL3Jlc3BvbnNlcy9vcGVuYWktcmVzcG9uc2VzLXByZXBhcmUtdG9vbHMudHNcbmltcG9ydCB7XG4gIFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yIGFzIFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yNVxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlclwiO1xuZnVuY3Rpb24gcHJlcGFyZVJlc3BvbnNlc1Rvb2xzKHtcbiAgdG9vbHMsXG4gIHRvb2xDaG9pY2UsXG4gIHN0cmljdEpzb25TY2hlbWFcbn0pIHtcbiAgdG9vbHMgPSAodG9vbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHRvb2xzLmxlbmd0aCkgPyB0b29scyA6IHZvaWQgMDtcbiAgY29uc3QgdG9vbFdhcm5pbmdzID0gW107XG4gIGlmICh0b29scyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHsgdG9vbHM6IHZvaWQgMCwgdG9vbENob2ljZTogdm9pZCAwLCB0b29sV2FybmluZ3MgfTtcbiAgfVxuICBjb25zdCBvcGVuYWlUb29sczIgPSBbXTtcbiAgZm9yIChjb25zdCB0b29sIG9mIHRvb2xzKSB7XG4gICAgc3dpdGNoICh0b29sLnR5cGUpIHtcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBvcGVuYWlUb29sczIucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICAgIG5hbWU6IHRvb2wubmFtZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5kZXNjcmlwdGlvbixcbiAgICAgICAgICBwYXJhbWV0ZXJzOiB0b29sLmlucHV0U2NoZW1hLFxuICAgICAgICAgIHN0cmljdDogc3RyaWN0SnNvblNjaGVtYVxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicHJvdmlkZXItZGVmaW5lZFwiOiB7XG4gICAgICAgIHN3aXRjaCAodG9vbC5pZCkge1xuICAgICAgICAgIGNhc2UgXCJvcGVuYWkuZmlsZV9zZWFyY2hcIjoge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGZpbGVTZWFyY2hBcmdzU2NoZW1hLnBhcnNlKHRvb2wuYXJncyk7XG4gICAgICAgICAgICBvcGVuYWlUb29sczIucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZmlsZV9zZWFyY2hcIixcbiAgICAgICAgICAgICAgdmVjdG9yX3N0b3JlX2lkczogYXJncy52ZWN0b3JTdG9yZUlkcyxcbiAgICAgICAgICAgICAgbWF4X251bV9yZXN1bHRzOiBhcmdzLm1heE51bVJlc3VsdHMsXG4gICAgICAgICAgICAgIHJhbmtpbmdfb3B0aW9uczogYXJncy5yYW5raW5nID8ge1xuICAgICAgICAgICAgICAgIHJhbmtlcjogYXJncy5yYW5raW5nLnJhbmtlcixcbiAgICAgICAgICAgICAgICBzY29yZV90aHJlc2hvbGQ6IGFyZ3MucmFua2luZy5zY29yZVRocmVzaG9sZFxuICAgICAgICAgICAgICB9IDogdm9pZCAwLFxuICAgICAgICAgICAgICBmaWx0ZXJzOiBhcmdzLmZpbHRlcnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJvcGVuYWkud2ViX3NlYXJjaF9wcmV2aWV3XCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB3ZWJTZWFyY2hQcmV2aWV3QXJnc1NjaGVtYS5wYXJzZSh0b29sLmFyZ3MpO1xuICAgICAgICAgICAgb3BlbmFpVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcIndlYl9zZWFyY2hfcHJldmlld1wiLFxuICAgICAgICAgICAgICBzZWFyY2hfY29udGV4dF9zaXplOiBhcmdzLnNlYXJjaENvbnRleHRTaXplLFxuICAgICAgICAgICAgICB1c2VyX2xvY2F0aW9uOiBhcmdzLnVzZXJMb2NhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcIm9wZW5haS53ZWJfc2VhcmNoXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IGFyZ3MgPSB3ZWJTZWFyY2hBcmdzU2NoZW1hLnBhcnNlKHRvb2wuYXJncyk7XG4gICAgICAgICAgICBvcGVuYWlUb29sczIucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwid2ViX3NlYXJjaFwiLFxuICAgICAgICAgICAgICBmaWx0ZXJzOiBhcmdzLmZpbHRlcnMgIT0gbnVsbCA/IHsgYWxsb3dlZF9kb21haW5zOiBhcmdzLmZpbHRlcnMuYWxsb3dlZERvbWFpbnMgfSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgc2VhcmNoX2NvbnRleHRfc2l6ZTogYXJncy5zZWFyY2hDb250ZXh0U2l6ZSxcbiAgICAgICAgICAgICAgdXNlcl9sb2NhdGlvbjogYXJncy51c2VyTG9jYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgXCJvcGVuYWkuY29kZV9pbnRlcnByZXRlclwiOiB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0gY29kZUludGVycHJldGVyQXJnc1NjaGVtYS5wYXJzZSh0b29sLmFyZ3MpO1xuICAgICAgICAgICAgb3BlbmFpVG9vbHMyLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBcImNvZGVfaW50ZXJwcmV0ZXJcIixcbiAgICAgICAgICAgICAgY29udGFpbmVyOiBhcmdzLmNvbnRhaW5lciA9PSBudWxsID8geyB0eXBlOiBcImF1dG9cIiwgZmlsZV9pZHM6IHZvaWQgMCB9IDogdHlwZW9mIGFyZ3MuY29udGFpbmVyID09PSBcInN0cmluZ1wiID8gYXJncy5jb250YWluZXIgOiB7IHR5cGU6IFwiYXV0b1wiLCBmaWxlX2lkczogYXJncy5jb250YWluZXIuZmlsZUlkcyB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIFwib3BlbmFpLmltYWdlX2dlbmVyYXRpb25cIjoge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGltYWdlR2VuZXJhdGlvbkFyZ3NTY2hlbWEucGFyc2UodG9vbC5hcmdzKTtcbiAgICAgICAgICAgIG9wZW5haVRvb2xzMi5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJpbWFnZV9nZW5lcmF0aW9uXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGFyZ3MuYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgaW5wdXRfZmlkZWxpdHk6IGFyZ3MuaW5wdXRGaWRlbGl0eSxcbiAgICAgICAgICAgICAgaW5wdXRfaW1hZ2VfbWFzazogYXJncy5pbnB1dEltYWdlTWFzayA/IHtcbiAgICAgICAgICAgICAgICBmaWxlX2lkOiBhcmdzLmlucHV0SW1hZ2VNYXNrLmZpbGVJZCxcbiAgICAgICAgICAgICAgICBpbWFnZV91cmw6IGFyZ3MuaW5wdXRJbWFnZU1hc2suaW1hZ2VVcmxcbiAgICAgICAgICAgICAgfSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgbW9kZWw6IGFyZ3MubW9kZWwsXG4gICAgICAgICAgICAgIHNpemU6IGFyZ3Muc2l6ZSxcbiAgICAgICAgICAgICAgcXVhbGl0eTogYXJncy5xdWFsaXR5LFxuICAgICAgICAgICAgICBtb2RlcmF0aW9uOiBhcmdzLm1vZGVyYXRpb24sXG4gICAgICAgICAgICAgIG91dHB1dF9mb3JtYXQ6IGFyZ3Mub3V0cHV0Rm9ybWF0LFxuICAgICAgICAgICAgICBvdXRwdXRfY29tcHJlc3Npb246IGFyZ3Mub3V0cHV0Q29tcHJlc3Npb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdG9vbFdhcm5pbmdzLnB1c2goeyB0eXBlOiBcInVuc3VwcG9ydGVkLXRvb2xcIiwgdG9vbCB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmICh0b29sQ2hvaWNlID09IG51bGwpIHtcbiAgICByZXR1cm4geyB0b29sczogb3BlbmFpVG9vbHMyLCB0b29sQ2hvaWNlOiB2b2lkIDAsIHRvb2xXYXJuaW5ncyB9O1xuICB9XG4gIGNvbnN0IHR5cGUgPSB0b29sQ2hvaWNlLnR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJhdXRvXCI6XG4gICAgY2FzZSBcIm5vbmVcIjpcbiAgICBjYXNlIFwicmVxdWlyZWRcIjpcbiAgICAgIHJldHVybiB7IHRvb2xzOiBvcGVuYWlUb29sczIsIHRvb2xDaG9pY2U6IHR5cGUsIHRvb2xXYXJuaW5ncyB9O1xuICAgIGNhc2UgXCJ0b29sXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b29sczogb3BlbmFpVG9vbHMyLFxuICAgICAgICB0b29sQ2hvaWNlOiB0b29sQ2hvaWNlLnRvb2xOYW1lID09PSBcImNvZGVfaW50ZXJwcmV0ZXJcIiB8fCB0b29sQ2hvaWNlLnRvb2xOYW1lID09PSBcImZpbGVfc2VhcmNoXCIgfHwgdG9vbENob2ljZS50b29sTmFtZSA9PT0gXCJpbWFnZV9nZW5lcmF0aW9uXCIgfHwgdG9vbENob2ljZS50b29sTmFtZSA9PT0gXCJ3ZWJfc2VhcmNoX3ByZXZpZXdcIiB8fCB0b29sQ2hvaWNlLnRvb2xOYW1lID09PSBcIndlYl9zZWFyY2hcIiA/IHsgdHlwZTogdG9vbENob2ljZS50b29sTmFtZSB9IDogeyB0eXBlOiBcImZ1bmN0aW9uXCIsIG5hbWU6IHRvb2xDaG9pY2UudG9vbE5hbWUgfSxcbiAgICAgICAgdG9vbFdhcm5pbmdzXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnN0IF9leGhhdXN0aXZlQ2hlY2sgPSB0eXBlO1xuICAgICAgdGhyb3cgbmV3IFVuc3VwcG9ydGVkRnVuY3Rpb25hbGl0eUVycm9yNSh7XG4gICAgICAgIGZ1bmN0aW9uYWxpdHk6IGB0b29sIGNob2ljZSB0eXBlOiAke19leGhhdXN0aXZlQ2hlY2t9YFxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbi8vIHNyYy9yZXNwb25zZXMvb3BlbmFpLXJlc3BvbnNlcy1sYW5ndWFnZS1tb2RlbC50c1xudmFyIHdlYlNlYXJjaENhbGxJdGVtID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwid2ViX3NlYXJjaF9jYWxsXCIpLFxuICBpZDogejE1LnN0cmluZygpLFxuICBzdGF0dXM6IHoxNS5zdHJpbmcoKSxcbiAgYWN0aW9uOiB6MTUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcInNlYXJjaFwiKSxcbiAgICAgIHF1ZXJ5OiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcIm9wZW5fcGFnZVwiKSxcbiAgICAgIHVybDogejE1LnN0cmluZygpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcImZpbmRcIiksXG4gICAgICB1cmw6IHoxNS5zdHJpbmcoKSxcbiAgICAgIHBhdHRlcm46IHoxNS5zdHJpbmcoKVxuICAgIH0pXG4gIF0pLm51bGxpc2goKVxufSk7XG52YXIgZmlsZVNlYXJjaENhbGxJdGVtID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwiZmlsZV9zZWFyY2hfY2FsbFwiKSxcbiAgaWQ6IHoxNS5zdHJpbmcoKSxcbiAgcXVlcmllczogejE1LmFycmF5KHoxNS5zdHJpbmcoKSksXG4gIHJlc3VsdHM6IHoxNS5hcnJheShcbiAgICB6MTUub2JqZWN0KHtcbiAgICAgIGF0dHJpYnV0ZXM6IHoxNS5yZWNvcmQoejE1LnN0cmluZygpLCB6MTUudW5rbm93bigpKSxcbiAgICAgIGZpbGVfaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgIGZpbGVuYW1lOiB6MTUuc3RyaW5nKCksXG4gICAgICBzY29yZTogejE1Lm51bWJlcigpLFxuICAgICAgdGV4dDogejE1LnN0cmluZygpXG4gICAgfSlcbiAgKS5udWxsaXNoKClcbn0pO1xudmFyIGNvZGVJbnRlcnByZXRlckNhbGxJdGVtID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwiY29kZV9pbnRlcnByZXRlcl9jYWxsXCIpLFxuICBpZDogejE1LnN0cmluZygpLFxuICBjb2RlOiB6MTUuc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgY29udGFpbmVyX2lkOiB6MTUuc3RyaW5nKCksXG4gIG91dHB1dHM6IHoxNS5hcnJheShcbiAgICB6MTUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICB6MTUub2JqZWN0KHsgdHlwZTogejE1LmxpdGVyYWwoXCJsb2dzXCIpLCBsb2dzOiB6MTUuc3RyaW5nKCkgfSksXG4gICAgICB6MTUub2JqZWN0KHsgdHlwZTogejE1LmxpdGVyYWwoXCJpbWFnZVwiKSwgdXJsOiB6MTUuc3RyaW5nKCkgfSlcbiAgICBdKVxuICApLm51bGxhYmxlKClcbn0pO1xudmFyIGltYWdlR2VuZXJhdGlvbkNhbGxJdGVtID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwiaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsXCIpLFxuICBpZDogejE1LnN0cmluZygpLFxuICByZXN1bHQ6IHoxNS5zdHJpbmcoKVxufSk7XG52YXIgVE9QX0xPR1BST0JTX01BWCA9IDIwO1xudmFyIExPR1BST0JTX1NDSEVNQSA9IHoxNS5hcnJheShcbiAgejE1Lm9iamVjdCh7XG4gICAgdG9rZW46IHoxNS5zdHJpbmcoKSxcbiAgICBsb2dwcm9iOiB6MTUubnVtYmVyKCksXG4gICAgdG9wX2xvZ3Byb2JzOiB6MTUuYXJyYXkoXG4gICAgICB6MTUub2JqZWN0KHtcbiAgICAgICAgdG9rZW46IHoxNS5zdHJpbmcoKSxcbiAgICAgICAgbG9ncHJvYjogejE1Lm51bWJlcigpXG4gICAgICB9KVxuICAgIClcbiAgfSlcbik7XG52YXIgT3BlbkFJUmVzcG9uc2VzTGFuZ3VhZ2VNb2RlbCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IobW9kZWxJZCwgY29uZmlnKSB7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmVyc2lvbiA9IFwidjJcIjtcbiAgICB0aGlzLnN1cHBvcnRlZFVybHMgPSB7XG4gICAgICBcImltYWdlLypcIjogWy9eaHR0cHM/OlxcL1xcLy4qJC9dLFxuICAgICAgXCJhcHBsaWNhdGlvbi9wZGZcIjogWy9eaHR0cHM/OlxcL1xcLy4qJC9dXG4gICAgfTtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICB9XG4gIGdldCBwcm92aWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZ2V0QXJncyh7XG4gICAgbWF4T3V0cHV0VG9rZW5zLFxuICAgIHRlbXBlcmF0dXJlLFxuICAgIHN0b3BTZXF1ZW5jZXMsXG4gICAgdG9wUCxcbiAgICB0b3BLLFxuICAgIHByZXNlbmNlUGVuYWx0eSxcbiAgICBmcmVxdWVuY3lQZW5hbHR5LFxuICAgIHNlZWQsXG4gICAgcHJvbXB0LFxuICAgIHByb3ZpZGVyT3B0aW9ucyxcbiAgICB0b29scyxcbiAgICB0b29sQ2hvaWNlLFxuICAgIHJlc3BvbnNlRm9ybWF0XG4gIH0pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBbXTtcbiAgICBjb25zdCBtb2RlbENvbmZpZyA9IGdldFJlc3BvbnNlc01vZGVsQ29uZmlnKHRoaXMubW9kZWxJZCk7XG4gICAgaWYgKHRvcEsgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7IHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLCBzZXR0aW5nOiBcInRvcEtcIiB9KTtcbiAgICB9XG4gICAgaWYgKHNlZWQgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7IHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLCBzZXR0aW5nOiBcInNlZWRcIiB9KTtcbiAgICB9XG4gICAgaWYgKHByZXNlbmNlUGVuYWx0eSAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgIHNldHRpbmc6IFwicHJlc2VuY2VQZW5hbHR5XCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZnJlcXVlbmN5UGVuYWx0eSAhPSBudWxsKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgIHNldHRpbmc6IFwiZnJlcXVlbmN5UGVuYWx0eVwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN0b3BTZXF1ZW5jZXMgIT0gbnVsbCkge1xuICAgICAgd2FybmluZ3MucHVzaCh7IHR5cGU6IFwidW5zdXBwb3J0ZWQtc2V0dGluZ1wiLCBzZXR0aW5nOiBcInN0b3BTZXF1ZW5jZXNcIiB9KTtcbiAgICB9XG4gICAgY29uc3Qgb3BlbmFpT3B0aW9ucyA9IGF3YWl0IHBhcnNlUHJvdmlkZXJPcHRpb25zNSh7XG4gICAgICBwcm92aWRlcjogXCJvcGVuYWlcIixcbiAgICAgIHByb3ZpZGVyT3B0aW9ucyxcbiAgICAgIHNjaGVtYTogb3BlbmFpUmVzcG9uc2VzUHJvdmlkZXJPcHRpb25zU2NoZW1hXG4gICAgfSk7XG4gICAgY29uc3QgeyBpbnB1dCwgd2FybmluZ3M6IGlucHV0V2FybmluZ3MgfSA9IGF3YWl0IGNvbnZlcnRUb09wZW5BSVJlc3BvbnNlc0lucHV0KHtcbiAgICAgIHByb21wdCxcbiAgICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBtb2RlbENvbmZpZy5zeXN0ZW1NZXNzYWdlTW9kZSxcbiAgICAgIGZpbGVJZFByZWZpeGVzOiB0aGlzLmNvbmZpZy5maWxlSWRQcmVmaXhlcyxcbiAgICAgIHN0b3JlOiAoX2EgPSBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnN0b3JlKSAhPSBudWxsID8gX2EgOiB0cnVlXG4gICAgfSk7XG4gICAgd2FybmluZ3MucHVzaCguLi5pbnB1dFdhcm5pbmdzKTtcbiAgICBjb25zdCBzdHJpY3RKc29uU2NoZW1hID0gKF9iID0gb3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5zdHJpY3RKc29uU2NoZW1hKSAhPSBudWxsID8gX2IgOiBmYWxzZTtcbiAgICBsZXQgaW5jbHVkZSA9IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuaW5jbHVkZTtcbiAgICBmdW5jdGlvbiBhZGRJbmNsdWRlKGtleSkge1xuICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgIT0gbnVsbCA/IFsuLi5pbmNsdWRlLCBrZXldIDogW2tleV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc09wZW5BSVRvb2woaWQpIHtcbiAgICAgIHJldHVybiAodG9vbHMgPT0gbnVsbCA/IHZvaWQgMCA6IHRvb2xzLmZpbmQoXG4gICAgICAgICh0b29sKSA9PiB0b29sLnR5cGUgPT09IFwicHJvdmlkZXItZGVmaW5lZFwiICYmIHRvb2wuaWQgPT09IGlkXG4gICAgICApKSAhPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCB0b3BMb2dwcm9icyA9IHR5cGVvZiAob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5sb2dwcm9icykgPT09IFwibnVtYmVyXCIgPyBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmxvZ3Byb2JzIDogKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMubG9ncHJvYnMpID09PSB0cnVlID8gVE9QX0xPR1BST0JTX01BWCA6IHZvaWQgMDtcbiAgICBpZiAodG9wTG9ncHJvYnMpIHtcbiAgICAgIGFkZEluY2x1ZGUoXCJtZXNzYWdlLm91dHB1dF90ZXh0LmxvZ3Byb2JzXCIpO1xuICAgIH1cbiAgICBjb25zdCB3ZWJTZWFyY2hUb29sTmFtZSA9IChfYyA9IHRvb2xzID09IG51bGwgPyB2b2lkIDAgOiB0b29scy5maW5kKFxuICAgICAgKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gXCJwcm92aWRlci1kZWZpbmVkXCIgJiYgKHRvb2wuaWQgPT09IFwib3BlbmFpLndlYl9zZWFyY2hcIiB8fCB0b29sLmlkID09PSBcIm9wZW5haS53ZWJfc2VhcmNoX3ByZXZpZXdcIilcbiAgICApKSA9PSBudWxsID8gdm9pZCAwIDogX2MubmFtZTtcbiAgICBpZiAod2ViU2VhcmNoVG9vbE5hbWUpIHtcbiAgICAgIGFkZEluY2x1ZGUoXCJ3ZWJfc2VhcmNoX2NhbGwuYWN0aW9uLnNvdXJjZXNcIik7XG4gICAgfVxuICAgIGlmIChoYXNPcGVuQUlUb29sKFwib3BlbmFpLmNvZGVfaW50ZXJwcmV0ZXJcIikpIHtcbiAgICAgIGFkZEluY2x1ZGUoXCJjb2RlX2ludGVycHJldGVyX2NhbGwub3V0cHV0c1wiKTtcbiAgICB9XG4gICAgY29uc3QgYmFzZUFyZ3MgPSB7XG4gICAgICBtb2RlbDogdGhpcy5tb2RlbElkLFxuICAgICAgaW5wdXQsXG4gICAgICB0ZW1wZXJhdHVyZSxcbiAgICAgIHRvcF9wOiB0b3BQLFxuICAgICAgbWF4X291dHB1dF90b2tlbnM6IG1heE91dHB1dFRva2VucyxcbiAgICAgIC4uLigocmVzcG9uc2VGb3JtYXQgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3BvbnNlRm9ybWF0LnR5cGUpID09PSBcImpzb25cIiB8fCAob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy50ZXh0VmVyYm9zaXR5KSkgJiYge1xuICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgLi4uKHJlc3BvbnNlRm9ybWF0ID09IG51bGwgPyB2b2lkIDAgOiByZXNwb25zZUZvcm1hdC50eXBlKSA9PT0gXCJqc29uXCIgJiYge1xuICAgICAgICAgICAgZm9ybWF0OiByZXNwb25zZUZvcm1hdC5zY2hlbWEgIT0gbnVsbCA/IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJqc29uX3NjaGVtYVwiLFxuICAgICAgICAgICAgICBzdHJpY3Q6IHN0cmljdEpzb25TY2hlbWEsXG4gICAgICAgICAgICAgIG5hbWU6IChfZCA9IHJlc3BvbnNlRm9ybWF0Lm5hbWUpICE9IG51bGwgPyBfZCA6IFwicmVzcG9uc2VcIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJlc3BvbnNlRm9ybWF0LmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICBzY2hlbWE6IHJlc3BvbnNlRm9ybWF0LnNjaGVtYVxuICAgICAgICAgICAgfSA6IHsgdHlwZTogXCJqc29uX29iamVjdFwiIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIC4uLihvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnRleHRWZXJib3NpdHkpICYmIHtcbiAgICAgICAgICAgIHZlcmJvc2l0eTogb3BlbmFpT3B0aW9ucy50ZXh0VmVyYm9zaXR5XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gcHJvdmlkZXIgb3B0aW9uczpcbiAgICAgIG1heF90b29sX2NhbGxzOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLm1heFRvb2xDYWxscyxcbiAgICAgIG1ldGFkYXRhOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLm1ldGFkYXRhLFxuICAgICAgcGFyYWxsZWxfdG9vbF9jYWxsczogb3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5wYXJhbGxlbFRvb2xDYWxscyxcbiAgICAgIHByZXZpb3VzX3Jlc3BvbnNlX2lkOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnByZXZpb3VzUmVzcG9uc2VJZCxcbiAgICAgIHN0b3JlOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnN0b3JlLFxuICAgICAgdXNlcjogb3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy51c2VyLFxuICAgICAgaW5zdHJ1Y3Rpb25zOiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLmluc3RydWN0aW9ucyxcbiAgICAgIHNlcnZpY2VfdGllcjogb3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5zZXJ2aWNlVGllcixcbiAgICAgIGluY2x1ZGUsXG4gICAgICBwcm9tcHRfY2FjaGVfa2V5OiBvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnByb21wdENhY2hlS2V5LFxuICAgICAgc2FmZXR5X2lkZW50aWZpZXI6IG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuc2FmZXR5SWRlbnRpZmllcixcbiAgICAgIHRvcF9sb2dwcm9iczogdG9wTG9ncHJvYnMsXG4gICAgICAvLyBtb2RlbC1zcGVjaWZpYyBzZXR0aW5nczpcbiAgICAgIC4uLm1vZGVsQ29uZmlnLmlzUmVhc29uaW5nTW9kZWwgJiYgKChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnJlYXNvbmluZ0VmZm9ydCkgIT0gbnVsbCB8fCAob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdTdW1tYXJ5KSAhPSBudWxsKSAmJiB7XG4gICAgICAgIHJlYXNvbmluZzoge1xuICAgICAgICAgIC4uLihvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnJlYXNvbmluZ0VmZm9ydCkgIT0gbnVsbCAmJiB7XG4gICAgICAgICAgICBlZmZvcnQ6IG9wZW5haU9wdGlvbnMucmVhc29uaW5nRWZmb3J0XG4gICAgICAgICAgfSxcbiAgICAgICAgICAuLi4ob3BlbmFpT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3BlbmFpT3B0aW9ucy5yZWFzb25pbmdTdW1tYXJ5KSAhPSBudWxsICYmIHtcbiAgICAgICAgICAgIHN1bW1hcnk6IG9wZW5haU9wdGlvbnMucmVhc29uaW5nU3VtbWFyeVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC4uLm1vZGVsQ29uZmlnLnJlcXVpcmVkQXV0b1RydW5jYXRpb24gJiYge1xuICAgICAgICB0cnVuY2F0aW9uOiBcImF1dG9cIlxuICAgICAgfVxuICAgIH07XG4gICAgaWYgKG1vZGVsQ29uZmlnLmlzUmVhc29uaW5nTW9kZWwpIHtcbiAgICAgIGlmIChiYXNlQXJncy50ZW1wZXJhdHVyZSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VBcmdzLnRlbXBlcmF0dXJlID0gdm9pZCAwO1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInRlbXBlcmF0dXJlXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0ZW1wZXJhdHVyZSBpcyBub3Qgc3VwcG9ydGVkIGZvciByZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoYmFzZUFyZ3MudG9wX3AgIT0gbnVsbCkge1xuICAgICAgICBiYXNlQXJncy50b3BfcCA9IHZvaWQgMDtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgICAgc2V0dGluZzogXCJ0b3BQXCIsXG4gICAgICAgICAgZGV0YWlsczogXCJ0b3BQIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnJlYXNvbmluZ0VmZm9ydCkgIT0gbnVsbCkge1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInJlYXNvbmluZ0VmZm9ydFwiLFxuICAgICAgICAgIGRldGFpbHM6IFwicmVhc29uaW5nRWZmb3J0IGlzIG5vdCBzdXBwb3J0ZWQgZm9yIG5vbi1yZWFzb25pbmcgbW9kZWxzXCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMucmVhc29uaW5nU3VtbWFyeSkgIT0gbnVsbCkge1xuICAgICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgICBzZXR0aW5nOiBcInJlYXNvbmluZ1N1bW1hcnlcIixcbiAgICAgICAgICBkZXRhaWxzOiBcInJlYXNvbmluZ1N1bW1hcnkgaXMgbm90IHN1cHBvcnRlZCBmb3Igbm9uLXJlYXNvbmluZyBtb2RlbHNcIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChvcGVuYWlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcGVuYWlPcHRpb25zLnNlcnZpY2VUaWVyKSA9PT0gXCJmbGV4XCIgJiYgIW1vZGVsQ29uZmlnLnN1cHBvcnRzRmxleFByb2Nlc3NpbmcpIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInVuc3VwcG9ydGVkLXNldHRpbmdcIixcbiAgICAgICAgc2V0dGluZzogXCJzZXJ2aWNlVGllclwiLFxuICAgICAgICBkZXRhaWxzOiBcImZsZXggcHJvY2Vzc2luZyBpcyBvbmx5IGF2YWlsYWJsZSBmb3IgbzMsIG80LW1pbmksIGFuZCBncHQtNSBtb2RlbHNcIlxuICAgICAgfSk7XG4gICAgICBkZWxldGUgYmFzZUFyZ3Muc2VydmljZV90aWVyO1xuICAgIH1cbiAgICBpZiAoKG9wZW5haU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wZW5haU9wdGlvbnMuc2VydmljZVRpZXIpID09PSBcInByaW9yaXR5XCIgJiYgIW1vZGVsQ29uZmlnLnN1cHBvcnRzUHJpb3JpdHlQcm9jZXNzaW5nKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgIHNldHRpbmc6IFwic2VydmljZVRpZXJcIixcbiAgICAgICAgZGV0YWlsczogXCJwcmlvcml0eSBwcm9jZXNzaW5nIGlzIG9ubHkgYXZhaWxhYmxlIGZvciBzdXBwb3J0ZWQgbW9kZWxzIChncHQtNCwgZ3B0LTUsIGdwdC01LW1pbmksIG8zLCBvNC1taW5pKSBhbmQgcmVxdWlyZXMgRW50ZXJwcmlzZSBhY2Nlc3MuIGdwdC01LW5hbm8gaXMgbm90IHN1cHBvcnRlZFwiXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBiYXNlQXJncy5zZXJ2aWNlX3RpZXI7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHRvb2xzOiBvcGVuYWlUb29sczIsXG4gICAgICB0b29sQ2hvaWNlOiBvcGVuYWlUb29sQ2hvaWNlLFxuICAgICAgdG9vbFdhcm5pbmdzXG4gICAgfSA9IHByZXBhcmVSZXNwb25zZXNUb29scyh7XG4gICAgICB0b29scyxcbiAgICAgIHRvb2xDaG9pY2UsXG4gICAgICBzdHJpY3RKc29uU2NoZW1hXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdlYlNlYXJjaFRvb2xOYW1lLFxuICAgICAgYXJnczoge1xuICAgICAgICAuLi5iYXNlQXJncyxcbiAgICAgICAgdG9vbHM6IG9wZW5haVRvb2xzMixcbiAgICAgICAgdG9vbF9jaG9pY2U6IG9wZW5haVRvb2xDaG9pY2VcbiAgICAgIH0sXG4gICAgICB3YXJuaW5nczogWy4uLndhcm5pbmdzLCAuLi50b29sV2FybmluZ3NdXG4gICAgfTtcbiAgfVxuICBhc3luYyBkb0dlbmVyYXRlKG9wdGlvbnMpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaSwgX2osIF9rLCBfbCwgX20sIF9uLCBfbywgX3AsIF9xLCBfciwgX3M7XG4gICAgY29uc3Qge1xuICAgICAgYXJnczogYm9keSxcbiAgICAgIHdhcm5pbmdzLFxuICAgICAgd2ViU2VhcmNoVG9vbE5hbWVcbiAgICB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IHVybCA9IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICBwYXRoOiBcIi9yZXNwb25zZXNcIixcbiAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgIHJhd1ZhbHVlOiByYXdSZXNwb25zZVxuICAgIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpNSh7XG4gICAgICB1cmwsXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczUodGhpcy5jb25maWcuaGVhZGVycygpLCBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgYm9keSxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlSnNvblJlc3BvbnNlSGFuZGxlcjUoXG4gICAgICAgIHoxNS5vYmplY3Qoe1xuICAgICAgICAgIGlkOiB6MTUuc3RyaW5nKCksXG4gICAgICAgICAgY3JlYXRlZF9hdDogejE1Lm51bWJlcigpLFxuICAgICAgICAgIGVycm9yOiB6MTUub2JqZWN0KHtcbiAgICAgICAgICAgIGNvZGU6IHoxNS5zdHJpbmcoKSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHoxNS5zdHJpbmcoKVxuICAgICAgICAgIH0pLm51bGxpc2goKSxcbiAgICAgICAgICBtb2RlbDogejE1LnN0cmluZygpLFxuICAgICAgICAgIG91dHB1dDogejE1LmFycmF5KFxuICAgICAgICAgICAgejE1LmRpc2NyaW1pbmF0ZWRVbmlvbihcInR5cGVcIiwgW1xuICAgICAgICAgICAgICB6MTUub2JqZWN0KHtcbiAgICAgICAgICAgICAgICB0eXBlOiB6MTUubGl0ZXJhbChcIm1lc3NhZ2VcIiksXG4gICAgICAgICAgICAgICAgcm9sZTogejE1LmxpdGVyYWwoXCJhc3Npc3RhbnRcIiksXG4gICAgICAgICAgICAgICAgaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB6MTUuYXJyYXkoXG4gICAgICAgICAgICAgICAgICB6MTUub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJvdXRwdXRfdGV4dFwiKSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogejE1LnN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBsb2dwcm9iczogTE9HUFJPQlNfU0NIRU1BLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbnM6IHoxNS5hcnJheShcbiAgICAgICAgICAgICAgICAgICAgICB6MTUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICB6MTUub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJ1cmxfY2l0YXRpb25cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0X2luZGV4OiB6MTUubnVtYmVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVuZF9pbmRleDogejE1Lm51bWJlcigpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHoxNS5zdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHoxNS5zdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICB6MTUub2JqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJmaWxlX2NpdGF0aW9uXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiB6MTUuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogejE1Lm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRfaW5kZXg6IHoxNS5udW1iZXIoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVuZF9pbmRleDogejE1Lm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGU6IHoxNS5zdHJpbmcoKS5udWxsaXNoKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgejE1Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwiY29udGFpbmVyX2ZpbGVfY2l0YXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICB3ZWJTZWFyY2hDYWxsSXRlbSxcbiAgICAgICAgICAgICAgZmlsZVNlYXJjaENhbGxJdGVtLFxuICAgICAgICAgICAgICBjb2RlSW50ZXJwcmV0ZXJDYWxsSXRlbSxcbiAgICAgICAgICAgICAgaW1hZ2VHZW5lcmF0aW9uQ2FsbEl0ZW0sXG4gICAgICAgICAgICAgIHoxNS5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwiZnVuY3Rpb25fY2FsbFwiKSxcbiAgICAgICAgICAgICAgICBjYWxsX2lkOiB6MTUuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogejE1LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIGFyZ3VtZW50czogejE1LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIGlkOiB6MTUuc3RyaW5nKClcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHoxNS5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwiY29tcHV0ZXJfY2FsbFwiKSxcbiAgICAgICAgICAgICAgICBpZDogejE1LnN0cmluZygpLFxuICAgICAgICAgICAgICAgIHN0YXR1czogejE1LnN0cmluZygpLm9wdGlvbmFsKClcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIHoxNS5vYmplY3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwicmVhc29uaW5nXCIpLFxuICAgICAgICAgICAgICAgIGlkOiB6MTUuc3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZW5jcnlwdGVkX2NvbnRlbnQ6IHoxNS5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICAgICAgICAgICAgc3VtbWFyeTogejE1LmFycmF5KFxuICAgICAgICAgICAgICAgICAgejE1Lm9iamVjdCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwic3VtbWFyeV90ZXh0XCIpLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB6MTUuc3RyaW5nKClcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApLFxuICAgICAgICAgIHNlcnZpY2VfdGllcjogejE1LnN0cmluZygpLm51bGxpc2goKSxcbiAgICAgICAgICBpbmNvbXBsZXRlX2RldGFpbHM6IHoxNS5vYmplY3QoeyByZWFzb246IHoxNS5zdHJpbmcoKSB9KS5udWxsYWJsZSgpLFxuICAgICAgICAgIHVzYWdlOiB1c2FnZVNjaGVtYTJcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEFQSUNhbGxFcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6IHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UsXG4gICAgICAgIHVybCxcbiAgICAgICAgcmVxdWVzdEJvZHlWYWx1ZXM6IGJvZHksXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICByZXNwb25zZUJvZHk6IHJhd1Jlc3BvbnNlLFxuICAgICAgICBpc1JldHJ5YWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBjb250ZW50ID0gW107XG4gICAgY29uc3QgbG9ncHJvYnMgPSBbXTtcbiAgICBsZXQgaGFzRnVuY3Rpb25DYWxsID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBwYXJ0IG9mIHJlc3BvbnNlLm91dHB1dCkge1xuICAgICAgc3dpdGNoIChwYXJ0LnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInJlYXNvbmluZ1wiOiB7XG4gICAgICAgICAgaWYgKHBhcnQuc3VtbWFyeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHBhcnQuc3VtbWFyeS5wdXNoKHsgdHlwZTogXCJzdW1tYXJ5X3RleHRcIiwgdGV4dDogXCJcIiB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCBzdW1tYXJ5IG9mIHBhcnQuc3VtbWFyeSkge1xuICAgICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmdcIixcbiAgICAgICAgICAgICAgdGV4dDogc3VtbWFyeS50ZXh0LFxuICAgICAgICAgICAgICBwcm92aWRlck1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICAgICAgICByZWFzb25pbmdFbmNyeXB0ZWRDb250ZW50OiAoX2EgPSBwYXJ0LmVuY3J5cHRlZF9jb250ZW50KSAhPSBudWxsID8gX2EgOiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImltYWdlX2dlbmVyYXRpb25fY2FsbFwiOiB7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwiaW1hZ2VfZ2VuZXJhdGlvblwiLFxuICAgICAgICAgICAgaW5wdXQ6IFwie31cIixcbiAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5pZCxcbiAgICAgICAgICAgIHRvb2xOYW1lOiBcImltYWdlX2dlbmVyYXRpb25cIixcbiAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICByZXN1bHQ6IHBhcnQucmVzdWx0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6IHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnRQYXJ0IG9mIHBhcnQuY29udGVudCkge1xuICAgICAgICAgICAgaWYgKCgoX2MgPSAoX2IgPSBvcHRpb25zLnByb3ZpZGVyT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLm9wZW5haSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jLmxvZ3Byb2JzKSAmJiBjb250ZW50UGFydC5sb2dwcm9icykge1xuICAgICAgICAgICAgICBsb2dwcm9icy5wdXNoKGNvbnRlbnRQYXJ0LmxvZ3Byb2JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICB0ZXh0OiBjb250ZW50UGFydC50ZXh0LFxuICAgICAgICAgICAgICBwcm92aWRlck1ldGFkYXRhOiB7XG4gICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnQuaWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhbm5vdGF0aW9uIG9mIGNvbnRlbnRQYXJ0LmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICAgIGlmIChhbm5vdGF0aW9uLnR5cGUgPT09IFwidXJsX2NpdGF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJzb3VyY2VcIixcbiAgICAgICAgICAgICAgICAgIHNvdXJjZVR5cGU6IFwidXJsXCIsXG4gICAgICAgICAgICAgICAgICBpZDogKF9mID0gKF9lID0gKF9kID0gdGhpcy5jb25maWcpLmdlbmVyYXRlSWQpID09IG51bGwgPyB2b2lkIDAgOiBfZS5jYWxsKF9kKSkgIT0gbnVsbCA/IF9mIDogZ2VuZXJhdGVJZDIoKSxcbiAgICAgICAgICAgICAgICAgIHVybDogYW5ub3RhdGlvbi51cmwsXG4gICAgICAgICAgICAgICAgICB0aXRsZTogYW5ub3RhdGlvbi50aXRsZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFubm90YXRpb24udHlwZSA9PT0gXCJmaWxlX2NpdGF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJzb3VyY2VcIixcbiAgICAgICAgICAgICAgICAgIHNvdXJjZVR5cGU6IFwiZG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiAoX2kgPSAoX2ggPSAoX2cgPSB0aGlzLmNvbmZpZykuZ2VuZXJhdGVJZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9oLmNhbGwoX2cpKSAhPSBudWxsID8gX2kgOiBnZW5lcmF0ZUlkMigpLFxuICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBcInRleHQvcGxhaW5cIixcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiAoX2sgPSAoX2ogPSBhbm5vdGF0aW9uLnF1b3RlKSAhPSBudWxsID8gX2ogOiBhbm5vdGF0aW9uLmZpbGVuYW1lKSAhPSBudWxsID8gX2sgOiBcIkRvY3VtZW50XCIsXG4gICAgICAgICAgICAgICAgICBmaWxlbmFtZTogKF9sID0gYW5ub3RhdGlvbi5maWxlbmFtZSkgIT0gbnVsbCA/IF9sIDogYW5ub3RhdGlvbi5maWxlX2lkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImZ1bmN0aW9uX2NhbGxcIjoge1xuICAgICAgICAgIGhhc0Z1bmN0aW9uQ2FsbCA9IHRydWU7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmNhbGxfaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogcGFydC5uYW1lLFxuICAgICAgICAgICAgaW5wdXQ6IHBhcnQuYXJndW1lbnRzLFxuICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICBpdGVtSWQ6IHBhcnQuaWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ3ZWJfc2VhcmNoX2NhbGxcIjoge1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5pZCxcbiAgICAgICAgICAgIHRvb2xOYW1lOiB3ZWJTZWFyY2hUb29sTmFtZSAhPSBudWxsID8gd2ViU2VhcmNoVG9vbE5hbWUgOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgIGlucHV0OiBKU09OLnN0cmluZ2lmeSh7IGFjdGlvbjogcGFydC5hY3Rpb24gfSksXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogd2ViU2VhcmNoVG9vbE5hbWUgIT0gbnVsbCA/IHdlYlNlYXJjaFRvb2xOYW1lIDogXCJ3ZWJfc2VhcmNoXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHsgc3RhdHVzOiBwYXJ0LnN0YXR1cyB9LFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJjb21wdXRlcl9jYWxsXCI6IHtcbiAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogXCJjb21wdXRlcl91c2VcIixcbiAgICAgICAgICAgIGlucHV0OiBcIlwiLFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29tcHV0ZXJfdXNlXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJjb21wdXRlcl91c2VfdG9vbF9yZXN1bHRcIixcbiAgICAgICAgICAgICAgc3RhdHVzOiBwYXJ0LnN0YXR1cyB8fCBcImNvbXBsZXRlZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJmaWxlX3NlYXJjaF9jYWxsXCI6IHtcbiAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHBhcnQuaWQsXG4gICAgICAgICAgICB0b29sTmFtZTogXCJmaWxlX3NlYXJjaFwiLFxuICAgICAgICAgICAgaW5wdXQ6IFwie31cIixcbiAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250ZW50LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgdG9vbENhbGxJZDogcGFydC5pZCxcbiAgICAgICAgICAgIHRvb2xOYW1lOiBcImZpbGVfc2VhcmNoXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgcXVlcmllczogcGFydC5xdWVyaWVzLFxuICAgICAgICAgICAgICByZXN1bHRzOiAoX24gPSAoX20gPSBwYXJ0LnJlc3VsdHMpID09IG51bGwgPyB2b2lkIDAgOiBfbS5tYXAoKHJlc3VsdCkgPT4gKHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiByZXN1bHQuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICBmaWxlSWQ6IHJlc3VsdC5maWxlX2lkLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByZXN1bHQuZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgc2NvcmU6IHJlc3VsdC5zY29yZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiByZXN1bHQudGV4dFxuICAgICAgICAgICAgICB9KSkpICE9IG51bGwgPyBfbiA6IG51bGxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvZGVfaW50ZXJwcmV0ZXJfY2FsbFwiOiB7XG4gICAgICAgICAgY29udGVudC5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29kZV9pbnRlcnByZXRlclwiLFxuICAgICAgICAgICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgY29kZTogcGFydC5jb2RlLFxuICAgICAgICAgICAgICBjb250YWluZXJJZDogcGFydC5jb250YWluZXJfaWRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnRlbnQucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICB0b29sQ2FsbElkOiBwYXJ0LmlkLFxuICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29kZV9pbnRlcnByZXRlclwiLFxuICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgIG91dHB1dHM6IHBhcnQub3V0cHV0c1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwcm92aWRlck1ldGFkYXRhID0ge1xuICAgICAgb3BlbmFpOiB7IHJlc3BvbnNlSWQ6IHJlc3BvbnNlLmlkIH1cbiAgICB9O1xuICAgIGlmIChsb2dwcm9icy5sZW5ndGggPiAwKSB7XG4gICAgICBwcm92aWRlck1ldGFkYXRhLm9wZW5haS5sb2dwcm9icyA9IGxvZ3Byb2JzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLnNlcnZpY2VfdGllciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkuc2VydmljZVRpZXIgPSByZXNwb25zZS5zZXJ2aWNlX3RpZXI7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50LFxuICAgICAgZmluaXNoUmVhc29uOiBtYXBPcGVuQUlSZXNwb25zZUZpbmlzaFJlYXNvbih7XG4gICAgICAgIGZpbmlzaFJlYXNvbjogKF9vID0gcmVzcG9uc2UuaW5jb21wbGV0ZV9kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX28ucmVhc29uLFxuICAgICAgICBoYXNGdW5jdGlvbkNhbGxcbiAgICAgIH0pLFxuICAgICAgdXNhZ2U6IHtcbiAgICAgICAgaW5wdXRUb2tlbnM6IHJlc3BvbnNlLnVzYWdlLmlucHV0X3Rva2VucyxcbiAgICAgICAgb3V0cHV0VG9rZW5zOiByZXNwb25zZS51c2FnZS5vdXRwdXRfdG9rZW5zLFxuICAgICAgICB0b3RhbFRva2VuczogcmVzcG9uc2UudXNhZ2UuaW5wdXRfdG9rZW5zICsgcmVzcG9uc2UudXNhZ2Uub3V0cHV0X3Rva2VucyxcbiAgICAgICAgcmVhc29uaW5nVG9rZW5zOiAoX3EgPSAoX3AgPSByZXNwb25zZS51c2FnZS5vdXRwdXRfdG9rZW5zX2RldGFpbHMpID09IG51bGwgPyB2b2lkIDAgOiBfcC5yZWFzb25pbmdfdG9rZW5zKSAhPSBudWxsID8gX3EgOiB2b2lkIDAsXG4gICAgICAgIGNhY2hlZElucHV0VG9rZW5zOiAoX3MgPSAoX3IgPSByZXNwb25zZS51c2FnZS5pbnB1dF90b2tlbnNfZGV0YWlscykgPT0gbnVsbCA/IHZvaWQgMCA6IF9yLmNhY2hlZF90b2tlbnMpICE9IG51bGwgPyBfcyA6IHZvaWQgMFxuICAgICAgfSxcbiAgICAgIHJlcXVlc3Q6IHsgYm9keSB9LFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgaWQ6IHJlc3BvbnNlLmlkLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKHJlc3BvbnNlLmNyZWF0ZWRfYXQgKiAxZTMpLFxuICAgICAgICBtb2RlbElkOiByZXNwb25zZS5tb2RlbCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBib2R5OiByYXdSZXNwb25zZVxuICAgICAgfSxcbiAgICAgIHByb3ZpZGVyTWV0YWRhdGEsXG4gICAgICB3YXJuaW5nc1xuICAgIH07XG4gIH1cbiAgYXN5bmMgZG9TdHJlYW0ob3B0aW9ucykge1xuICAgIGNvbnN0IHtcbiAgICAgIGFyZ3M6IGJvZHksXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHdlYlNlYXJjaFRvb2xOYW1lXG4gICAgfSA9IGF3YWl0IHRoaXMuZ2V0QXJncyhvcHRpb25zKTtcbiAgICBjb25zdCB7IHJlc3BvbnNlSGVhZGVycywgdmFsdWU6IHJlc3BvbnNlIH0gPSBhd2FpdCBwb3N0SnNvblRvQXBpNSh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL3Jlc3BvbnNlc1wiLFxuICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWRcbiAgICAgIH0pLFxuICAgICAgaGVhZGVyczogY29tYmluZUhlYWRlcnM1KHRoaXMuY29uZmlnLmhlYWRlcnMoKSwgb3B0aW9ucy5oZWFkZXJzKSxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgLi4uYm9keSxcbiAgICAgICAgc3RyZWFtOiB0cnVlXG4gICAgICB9LFxuICAgICAgZmFpbGVkUmVzcG9uc2VIYW5kbGVyOiBvcGVuYWlGYWlsZWRSZXNwb25zZUhhbmRsZXIsXG4gICAgICBzdWNjZXNzZnVsUmVzcG9uc2VIYW5kbGVyOiBjcmVhdGVFdmVudFNvdXJjZVJlc3BvbnNlSGFuZGxlcjMoXG4gICAgICAgIG9wZW5haVJlc3BvbnNlc0NodW5rU2NoZW1hXG4gICAgICApLFxuICAgICAgYWJvcnRTaWduYWw6IG9wdGlvbnMuYWJvcnRTaWduYWwsXG4gICAgICBmZXRjaDogdGhpcy5jb25maWcuZmV0Y2hcbiAgICB9KTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZmluaXNoUmVhc29uID0gXCJ1bmtub3duXCI7XG4gICAgY29uc3QgdXNhZ2UgPSB7XG4gICAgICBpbnB1dFRva2Vuczogdm9pZCAwLFxuICAgICAgb3V0cHV0VG9rZW5zOiB2b2lkIDAsXG4gICAgICB0b3RhbFRva2Vuczogdm9pZCAwXG4gICAgfTtcbiAgICBjb25zdCBsb2dwcm9icyA9IFtdO1xuICAgIGxldCByZXNwb25zZUlkID0gbnVsbDtcbiAgICBjb25zdCBvbmdvaW5nVG9vbENhbGxzID0ge307XG4gICAgbGV0IGhhc0Z1bmN0aW9uQ2FsbCA9IGZhbHNlO1xuICAgIGNvbnN0IGFjdGl2ZVJlYXNvbmluZyA9IHt9O1xuICAgIGxldCBzZXJ2aWNlVGllcjtcbiAgICByZXR1cm4ge1xuICAgICAgc3RyZWFtOiByZXNwb25zZS5waXBlVGhyb3VnaChcbiAgICAgICAgbmV3IFRyYW5zZm9ybVN0cmVhbSh7XG4gICAgICAgICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHsgdHlwZTogXCJzdHJlYW0tc3RhcnRcIiwgd2FybmluZ3MgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cmFuc2Zvcm0oY2h1bmssIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9pLCBfaiwgX2ssIF9sLCBfbSwgX24sIF9vLCBfcCwgX3EsIF9yLCBfcywgX3QsIF91LCBfdiwgX3c7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlUmF3Q2h1bmtzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwicmF3XCIsIHJhd1ZhbHVlOiBjaHVuay5yYXdWYWx1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY2h1bmsuc3VjY2Vzcykge1xuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24gPSBcImVycm9yXCI7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IGNodW5rLmVycm9yIH0pO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGNodW5rLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJmdW5jdGlvbl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBvbmdvaW5nVG9vbENhbGxzW3ZhbHVlLm91dHB1dF9pbmRleF0gPSB7XG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogdmFsdWUuaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5jYWxsX2lkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5jYWxsX2lkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHZhbHVlLml0ZW0ubmFtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJ3ZWJfc2VhcmNoX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiB3ZWJTZWFyY2hUb29sTmFtZSAhPSBudWxsID8gd2ViU2VhcmNoVG9vbE5hbWUgOiBcIndlYl9zZWFyY2hcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IHdlYlNlYXJjaFRvb2xOYW1lICE9IG51bGwgPyB3ZWJTZWFyY2hUb29sTmFtZSA6IFwid2ViX3NlYXJjaFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImNvbXB1dGVyX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHtcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvbXB1dGVyX3VzZVwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1pbnB1dC1zdGFydFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb21wdXRlcl91c2VcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJmaWxlX3NlYXJjaF9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJmaWxlX3NlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwie31cIixcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJpbWFnZV9nZW5lcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgICBpbnB1dDogXCJ7fVwiLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LXN0YXJ0XCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiB2YWx1ZS5pdGVtLmlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlT3V0cHV0SXRlbUFkZGVkUmVhc29uaW5nQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlUmVhc29uaW5nW3ZhbHVlLml0ZW0uaWRdID0ge1xuICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkQ29udGVudDogdmFsdWUuaXRlbS5lbmNyeXB0ZWRfY29udGVudCxcbiAgICAgICAgICAgICAgICAgIHN1bW1hcnlQYXJ0czogWzBdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmctc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiBgJHt2YWx1ZS5pdGVtLmlkfTowYCxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQ6IChfYSA9IHZhbHVlLml0ZW0uZW5jcnlwdGVkX2NvbnRlbnQpICE9IG51bGwgPyBfYSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VPdXRwdXRJdGVtRG9uZUNodW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgICBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImZ1bmN0aW9uX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBoYXNGdW5jdGlvbkNhbGwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5jYWxsX2lkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmNhbGxfaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogdmFsdWUuaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IHZhbHVlLml0ZW0uYXJndW1lbnRzLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHZhbHVlLml0ZW0uaWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJ3ZWJfc2VhcmNoX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWVuZFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW0uaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWNhbGxcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJ3ZWJfc2VhcmNoXCIsXG4gICAgICAgICAgICAgICAgICBpbnB1dDogSlNPTi5zdHJpbmdpZnkoeyBhY3Rpb246IHZhbHVlLml0ZW0uYWN0aW9uIH0pLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IFwid2ViX3NlYXJjaFwiLFxuICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7IHN0YXR1czogdmFsdWUuaXRlbS5zdGF0dXMgfSxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiY29tcHV0ZXJfY2FsbFwiKSB7XG4gICAgICAgICAgICAgICAgb25nb2luZ1Rvb2xDYWxsc1t2YWx1ZS5vdXRwdXRfaW5kZXhdID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtaW5wdXQtZW5kXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdmFsdWUuaXRlbS5pZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtY2FsbFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImNvbXB1dGVyX3VzZVwiLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1yZXN1bHRcIixcbiAgICAgICAgICAgICAgICAgIHRvb2xDYWxsSWQ6IHZhbHVlLml0ZW0uaWQsXG4gICAgICAgICAgICAgICAgICB0b29sTmFtZTogXCJjb21wdXRlcl91c2VcIixcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNvbXB1dGVyX3VzZV90b29sX3Jlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHZhbHVlLml0ZW0uc3RhdHVzIHx8IFwiY29tcGxldGVkXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImZpbGVfc2VhcmNoX2NhbGxcIikge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImZpbGVfc2VhcmNoXCIsXG4gICAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgcXVlcmllczogdmFsdWUuaXRlbS5xdWVyaWVzLFxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiAoX2MgPSAoX2IgPSB2YWx1ZS5pdGVtLnJlc3VsdHMpID09IG51bGwgPyB2b2lkIDAgOiBfYi5tYXAoKHJlc3VsdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiByZXN1bHQuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlSWQ6IHJlc3VsdC5maWxlX2lkLFxuICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiByZXN1bHQuZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgc2NvcmU6IHJlc3VsdC5zY29yZSxcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiByZXN1bHQudGV4dFxuICAgICAgICAgICAgICAgICAgICB9KSkpICE9IG51bGwgPyBfYyA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBwcm92aWRlckV4ZWN1dGVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaXRlbS50eXBlID09PSBcImNvZGVfaW50ZXJwcmV0ZXJfY2FsbFwiKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwidG9vbC1jYWxsXCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29kZV9pbnRlcnByZXRlclwiLFxuICAgICAgICAgICAgICAgICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogdmFsdWUuaXRlbS5jb2RlLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJJZDogdmFsdWUuaXRlbS5jb250YWluZXJfaWRcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2wtcmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICB0b29sQ2FsbElkOiB2YWx1ZS5pdGVtLmlkLFxuICAgICAgICAgICAgICAgICAgdG9vbE5hbWU6IFwiY29kZV9pbnRlcnByZXRlclwiLFxuICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dHM6IHZhbHVlLml0ZW0ub3V0cHV0c1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyRXhlY3V0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5pdGVtLnR5cGUgPT09IFwiaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLXJlc3VsdFwiLFxuICAgICAgICAgICAgICAgICAgdG9vbENhbGxJZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgIHRvb2xOYW1lOiBcImltYWdlX2dlbmVyYXRpb25cIixcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHZhbHVlLml0ZW0ucmVzdWx0XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgcHJvdmlkZXJFeGVjdXRlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLml0ZW0udHlwZSA9PT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LWVuZFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW0uaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlT3V0cHV0SXRlbURvbmVSZWFzb25pbmdDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVSZWFzb25pbmdQYXJ0ID0gYWN0aXZlUmVhc29uaW5nW3ZhbHVlLml0ZW0uaWRdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3VtbWFyeUluZGV4IG9mIGFjdGl2ZVJlYXNvbmluZ1BhcnQuc3VtbWFyeVBhcnRzKSB7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlYXNvbmluZy1lbmRcIixcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGAke3ZhbHVlLml0ZW0uaWR9OiR7c3VtbWFyeUluZGV4fWAsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICBvcGVuYWk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1JZDogdmFsdWUuaXRlbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQ6IChfZCA9IHZhbHVlLml0ZW0uZW5jcnlwdGVkX2NvbnRlbnQpICE9IG51bGwgPyBfZCA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGUgYWN0aXZlUmVhc29uaW5nW3ZhbHVlLml0ZW0uaWRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YUNodW5rKHZhbHVlKSkge1xuICAgICAgICAgICAgICBjb25zdCB0b29sQ2FsbCA9IG9uZ29pbmdUb29sQ2FsbHNbdmFsdWUub3V0cHV0X2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKHRvb2xDYWxsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0b29sLWlucHV0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgICBpZDogdG9vbENhbGwudG9vbENhbGxJZCxcbiAgICAgICAgICAgICAgICAgIGRlbHRhOiB2YWx1ZS5kZWx0YVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VDcmVhdGVkQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlSWQgPSB2YWx1ZS5yZXNwb25zZS5pZDtcbiAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlc3BvbnNlLW1ldGFkYXRhXCIsXG4gICAgICAgICAgICAgICAgaWQ6IHZhbHVlLnJlc3BvbnNlLmlkLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUodmFsdWUucmVzcG9uc2UuY3JlYXRlZF9hdCAqIDFlMyksXG4gICAgICAgICAgICAgICAgbW9kZWxJZDogdmFsdWUucmVzcG9uc2UubW9kZWxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVGV4dERlbHRhQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0LWRlbHRhXCIsXG4gICAgICAgICAgICAgICAgaWQ6IHZhbHVlLml0ZW1faWQsXG4gICAgICAgICAgICAgICAgZGVsdGE6IHZhbHVlLmRlbHRhXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoKChfZiA9IChfZSA9IG9wdGlvbnMucHJvdmlkZXJPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2Uub3BlbmFpKSA9PSBudWxsID8gdm9pZCAwIDogX2YubG9ncHJvYnMpICYmIHZhbHVlLmxvZ3Byb2JzKSB7XG4gICAgICAgICAgICAgICAgbG9ncHJvYnMucHVzaCh2YWx1ZS5sb2dwcm9icyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlQYXJ0QWRkZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLnN1bW1hcnlfaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgKF9nID0gYWN0aXZlUmVhc29uaW5nW3ZhbHVlLml0ZW1faWRdKSA9PSBudWxsID8gdm9pZCAwIDogX2cuc3VtbWFyeVBhcnRzLnB1c2goXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5zdW1tYXJ5X2luZGV4XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmctc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgIGlkOiBgJHt2YWx1ZS5pdGVtX2lkfToke3ZhbHVlLnN1bW1hcnlfaW5kZXh9YCxcbiAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbUlkOiB2YWx1ZS5pdGVtX2lkLFxuICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZ0VuY3J5cHRlZENvbnRlbnQ6IChfaSA9IChfaCA9IGFjdGl2ZVJlYXNvbmluZ1t2YWx1ZS5pdGVtX2lkXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9oLmVuY3J5cHRlZENvbnRlbnQpICE9IG51bGwgPyBfaSA6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5VGV4dERlbHRhQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZWFzb25pbmctZGVsdGFcIixcbiAgICAgICAgICAgICAgICBpZDogYCR7dmFsdWUuaXRlbV9pZH06JHt2YWx1ZS5zdW1tYXJ5X2luZGV4fWAsXG4gICAgICAgICAgICAgICAgZGVsdGE6IHZhbHVlLmRlbHRhLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIG9wZW5haToge1xuICAgICAgICAgICAgICAgICAgICBpdGVtSWQ6IHZhbHVlLml0ZW1faWRcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1Jlc3BvbnNlRmluaXNoZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgZmluaXNoUmVhc29uID0gbWFwT3BlbkFJUmVzcG9uc2VGaW5pc2hSZWFzb24oe1xuICAgICAgICAgICAgICAgIGZpbmlzaFJlYXNvbjogKF9qID0gdmFsdWUucmVzcG9uc2UuaW5jb21wbGV0ZV9kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2oucmVhc29uLFxuICAgICAgICAgICAgICAgIGhhc0Z1bmN0aW9uQ2FsbFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdXNhZ2UuaW5wdXRUb2tlbnMgPSB2YWx1ZS5yZXNwb25zZS51c2FnZS5pbnB1dF90b2tlbnM7XG4gICAgICAgICAgICAgIHVzYWdlLm91dHB1dFRva2VucyA9IHZhbHVlLnJlc3BvbnNlLnVzYWdlLm91dHB1dF90b2tlbnM7XG4gICAgICAgICAgICAgIHVzYWdlLnRvdGFsVG9rZW5zID0gdmFsdWUucmVzcG9uc2UudXNhZ2UuaW5wdXRfdG9rZW5zICsgdmFsdWUucmVzcG9uc2UudXNhZ2Uub3V0cHV0X3Rva2VucztcbiAgICAgICAgICAgICAgdXNhZ2UucmVhc29uaW5nVG9rZW5zID0gKF9sID0gKF9rID0gdmFsdWUucmVzcG9uc2UudXNhZ2Uub3V0cHV0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX2sucmVhc29uaW5nX3Rva2VucykgIT0gbnVsbCA/IF9sIDogdm9pZCAwO1xuICAgICAgICAgICAgICB1c2FnZS5jYWNoZWRJbnB1dFRva2VucyA9IChfbiA9IChfbSA9IHZhbHVlLnJlc3BvbnNlLnVzYWdlLmlucHV0X3Rva2Vuc19kZXRhaWxzKSA9PSBudWxsID8gdm9pZCAwIDogX20uY2FjaGVkX3Rva2VucykgIT0gbnVsbCA/IF9uIDogdm9pZCAwO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlLnJlc3BvbnNlLnNlcnZpY2VfdGllciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNlcnZpY2VUaWVyID0gdmFsdWUucmVzcG9uc2Uuc2VydmljZV90aWVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVzcG9uc2VBbm5vdGF0aW9uQWRkZWRDaHVuayh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlLmFubm90YXRpb24udHlwZSA9PT0gXCJ1cmxfY2l0YXRpb25cIikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICAgICAgICAgICAgc291cmNlVHlwZTogXCJ1cmxcIixcbiAgICAgICAgICAgICAgICAgIGlkOiAoX3EgPSAoX3AgPSAoX28gPSBzZWxmLmNvbmZpZykuZ2VuZXJhdGVJZCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wLmNhbGwoX28pKSAhPSBudWxsID8gX3EgOiBnZW5lcmF0ZUlkMigpLFxuICAgICAgICAgICAgICAgICAgdXJsOiB2YWx1ZS5hbm5vdGF0aW9uLnVybCxcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiB2YWx1ZS5hbm5vdGF0aW9uLnRpdGxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuYW5ub3RhdGlvbi50eXBlID09PSBcImZpbGVfY2l0YXRpb25cIikge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiBcInNvdXJjZVwiLFxuICAgICAgICAgICAgICAgICAgc291cmNlVHlwZTogXCJkb2N1bWVudFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IChfdCA9IChfcyA9IChfciA9IHNlbGYuY29uZmlnKS5nZW5lcmF0ZUlkKSA9PSBudWxsID8gdm9pZCAwIDogX3MuY2FsbChfcikpICE9IG51bGwgPyBfdCA6IGdlbmVyYXRlSWQyKCksXG4gICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6IFwidGV4dC9wbGFpblwiLFxuICAgICAgICAgICAgICAgICAgdGl0bGU6IChfdiA9IChfdSA9IHZhbHVlLmFubm90YXRpb24ucXVvdGUpICE9IG51bGwgPyBfdSA6IHZhbHVlLmFubm90YXRpb24uZmlsZW5hbWUpICE9IG51bGwgPyBfdiA6IFwiRG9jdW1lbnRcIixcbiAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAoX3cgPSB2YWx1ZS5hbm5vdGF0aW9uLmZpbGVuYW1lKSAhPSBudWxsID8gX3cgOiB2YWx1ZS5hbm5vdGF0aW9uLmZpbGVfaWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Vycm9yQ2h1bmsodmFsdWUpKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7IHR5cGU6IFwiZXJyb3JcIiwgZXJyb3I6IHZhbHVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmx1c2goY29udHJvbGxlcikge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXJNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgb3BlbmFpOiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VJZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGxvZ3Byb2JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcHJvdmlkZXJNZXRhZGF0YS5vcGVuYWkubG9ncHJvYnMgPSBsb2dwcm9icztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXJ2aWNlVGllciAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgIHByb3ZpZGVyTWV0YWRhdGEub3BlbmFpLnNlcnZpY2VUaWVyID0gc2VydmljZVRpZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoe1xuICAgICAgICAgICAgICB0eXBlOiBcImZpbmlzaFwiLFxuICAgICAgICAgICAgICBmaW5pc2hSZWFzb24sXG4gICAgICAgICAgICAgIHVzYWdlLFxuICAgICAgICAgICAgICBwcm92aWRlck1ldGFkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgcmVxdWVzdDogeyBib2R5IH0sXG4gICAgICByZXNwb25zZTogeyBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMgfVxuICAgIH07XG4gIH1cbn07XG52YXIgdXNhZ2VTY2hlbWEyID0gejE1Lm9iamVjdCh7XG4gIGlucHV0X3Rva2VuczogejE1Lm51bWJlcigpLFxuICBpbnB1dF90b2tlbnNfZGV0YWlsczogejE1Lm9iamVjdCh7IGNhY2hlZF90b2tlbnM6IHoxNS5udW1iZXIoKS5udWxsaXNoKCkgfSkubnVsbGlzaCgpLFxuICBvdXRwdXRfdG9rZW5zOiB6MTUubnVtYmVyKCksXG4gIG91dHB1dF90b2tlbnNfZGV0YWlsczogejE1Lm9iamVjdCh7IHJlYXNvbmluZ190b2tlbnM6IHoxNS5udW1iZXIoKS5udWxsaXNoKCkgfSkubnVsbGlzaCgpXG59KTtcbnZhciB0ZXh0RGVsdGFDaHVua1NjaGVtYSA9IHoxNS5vYmplY3Qoe1xuICB0eXBlOiB6MTUubGl0ZXJhbChcInJlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhXCIpLFxuICBpdGVtX2lkOiB6MTUuc3RyaW5nKCksXG4gIGRlbHRhOiB6MTUuc3RyaW5nKCksXG4gIGxvZ3Byb2JzOiBMT0dQUk9CU19TQ0hFTUEubnVsbGlzaCgpXG59KTtcbnZhciBlcnJvckNodW5rU2NoZW1hID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwiZXJyb3JcIiksXG4gIGNvZGU6IHoxNS5zdHJpbmcoKSxcbiAgbWVzc2FnZTogejE1LnN0cmluZygpLFxuICBwYXJhbTogejE1LnN0cmluZygpLm51bGxpc2goKSxcbiAgc2VxdWVuY2VfbnVtYmVyOiB6MTUubnVtYmVyKClcbn0pO1xudmFyIHJlc3BvbnNlRmluaXNoZWRDaHVua1NjaGVtYSA9IHoxNS5vYmplY3Qoe1xuICB0eXBlOiB6MTUuZW51bShbXCJyZXNwb25zZS5jb21wbGV0ZWRcIiwgXCJyZXNwb25zZS5pbmNvbXBsZXRlXCJdKSxcbiAgcmVzcG9uc2U6IHoxNS5vYmplY3Qoe1xuICAgIGluY29tcGxldGVfZGV0YWlsczogejE1Lm9iamVjdCh7IHJlYXNvbjogejE1LnN0cmluZygpIH0pLm51bGxpc2goKSxcbiAgICB1c2FnZTogdXNhZ2VTY2hlbWEyLFxuICAgIHNlcnZpY2VfdGllcjogejE1LnN0cmluZygpLm51bGxpc2goKVxuICB9KVxufSk7XG52YXIgcmVzcG9uc2VDcmVhdGVkQ2h1bmtTY2hlbWEgPSB6MTUub2JqZWN0KHtcbiAgdHlwZTogejE1LmxpdGVyYWwoXCJyZXNwb25zZS5jcmVhdGVkXCIpLFxuICByZXNwb25zZTogejE1Lm9iamVjdCh7XG4gICAgaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICBjcmVhdGVkX2F0OiB6MTUubnVtYmVyKCksXG4gICAgbW9kZWw6IHoxNS5zdHJpbmcoKSxcbiAgICBzZXJ2aWNlX3RpZXI6IHoxNS5zdHJpbmcoKS5udWxsaXNoKClcbiAgfSlcbn0pO1xudmFyIHJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkU2NoZW1hID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwicmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWRcIiksXG4gIG91dHB1dF9pbmRleDogejE1Lm51bWJlcigpLFxuICBpdGVtOiB6MTUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcIm1lc3NhZ2VcIiksXG4gICAgICBpZDogejE1LnN0cmluZygpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcInJlYXNvbmluZ1wiKSxcbiAgICAgIGlkOiB6MTUuc3RyaW5nKCksXG4gICAgICBlbmNyeXB0ZWRfY29udGVudDogejE1LnN0cmluZygpLm51bGxpc2goKVxuICAgIH0pLFxuICAgIHoxNS5vYmplY3Qoe1xuICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJmdW5jdGlvbl9jYWxsXCIpLFxuICAgICAgaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgIGNhbGxfaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgIG5hbWU6IHoxNS5zdHJpbmcoKSxcbiAgICAgIGFyZ3VtZW50czogejE1LnN0cmluZygpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcIndlYl9zZWFyY2hfY2FsbFwiKSxcbiAgICAgIGlkOiB6MTUuc3RyaW5nKCksXG4gICAgICBzdGF0dXM6IHoxNS5zdHJpbmcoKSxcbiAgICAgIGFjdGlvbjogejE1Lm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwic2VhcmNoXCIpLFxuICAgICAgICBxdWVyeTogejE1LnN0cmluZygpLm9wdGlvbmFsKClcbiAgICAgIH0pLm51bGxpc2goKVxuICAgIH0pLFxuICAgIHoxNS5vYmplY3Qoe1xuICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJjb21wdXRlcl9jYWxsXCIpLFxuICAgICAgaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgIHN0YXR1czogejE1LnN0cmluZygpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcImZpbGVfc2VhcmNoX2NhbGxcIiksXG4gICAgICBpZDogejE1LnN0cmluZygpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcImltYWdlX2dlbmVyYXRpb25fY2FsbFwiKSxcbiAgICAgIGlkOiB6MTUuc3RyaW5nKClcbiAgICB9KVxuICBdKVxufSk7XG52YXIgcmVzcG9uc2VPdXRwdXRJdGVtRG9uZVNjaGVtYSA9IHoxNS5vYmplY3Qoe1xuICB0eXBlOiB6MTUubGl0ZXJhbChcInJlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmVcIiksXG4gIG91dHB1dF9pbmRleDogejE1Lm51bWJlcigpLFxuICBpdGVtOiB6MTUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcIm1lc3NhZ2VcIiksXG4gICAgICBpZDogejE1LnN0cmluZygpXG4gICAgfSksXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcInJlYXNvbmluZ1wiKSxcbiAgICAgIGlkOiB6MTUuc3RyaW5nKCksXG4gICAgICBlbmNyeXB0ZWRfY29udGVudDogejE1LnN0cmluZygpLm51bGxpc2goKVxuICAgIH0pLFxuICAgIHoxNS5vYmplY3Qoe1xuICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJmdW5jdGlvbl9jYWxsXCIpLFxuICAgICAgaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgIGNhbGxfaWQ6IHoxNS5zdHJpbmcoKSxcbiAgICAgIG5hbWU6IHoxNS5zdHJpbmcoKSxcbiAgICAgIGFyZ3VtZW50czogejE1LnN0cmluZygpLFxuICAgICAgc3RhdHVzOiB6MTUubGl0ZXJhbChcImNvbXBsZXRlZFwiKVxuICAgIH0pLFxuICAgIGNvZGVJbnRlcnByZXRlckNhbGxJdGVtLFxuICAgIGltYWdlR2VuZXJhdGlvbkNhbGxJdGVtLFxuICAgIHdlYlNlYXJjaENhbGxJdGVtLFxuICAgIGZpbGVTZWFyY2hDYWxsSXRlbSxcbiAgICB6MTUub2JqZWN0KHtcbiAgICAgIHR5cGU6IHoxNS5saXRlcmFsKFwiY29tcHV0ZXJfY2FsbFwiKSxcbiAgICAgIGlkOiB6MTUuc3RyaW5nKCksXG4gICAgICBzdGF0dXM6IHoxNS5saXRlcmFsKFwiY29tcGxldGVkXCIpXG4gICAgfSlcbiAgXSlcbn0pO1xudmFyIHJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFTY2hlbWEgPSB6MTUub2JqZWN0KHtcbiAgdHlwZTogejE1LmxpdGVyYWwoXCJyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YVwiKSxcbiAgaXRlbV9pZDogejE1LnN0cmluZygpLFxuICBvdXRwdXRfaW5kZXg6IHoxNS5udW1iZXIoKSxcbiAgZGVsdGE6IHoxNS5zdHJpbmcoKVxufSk7XG52YXIgcmVzcG9uc2VBbm5vdGF0aW9uQWRkZWRTY2hlbWEgPSB6MTUub2JqZWN0KHtcbiAgdHlwZTogejE1LmxpdGVyYWwoXCJyZXNwb25zZS5vdXRwdXRfdGV4dC5hbm5vdGF0aW9uLmFkZGVkXCIpLFxuICBhbm5vdGF0aW9uOiB6MTUuZGlzY3JpbWluYXRlZFVuaW9uKFwidHlwZVwiLCBbXG4gICAgejE1Lm9iamVjdCh7XG4gICAgICB0eXBlOiB6MTUubGl0ZXJhbChcInVybF9jaXRhdGlvblwiKSxcbiAgICAgIHVybDogejE1LnN0cmluZygpLFxuICAgICAgdGl0bGU6IHoxNS5zdHJpbmcoKVxuICAgIH0pLFxuICAgIHoxNS5vYmplY3Qoe1xuICAgICAgdHlwZTogejE1LmxpdGVyYWwoXCJmaWxlX2NpdGF0aW9uXCIpLFxuICAgICAgZmlsZV9pZDogejE1LnN0cmluZygpLFxuICAgICAgZmlsZW5hbWU6IHoxNS5zdHJpbmcoKS5udWxsaXNoKCksXG4gICAgICBpbmRleDogejE1Lm51bWJlcigpLm51bGxpc2goKSxcbiAgICAgIHN0YXJ0X2luZGV4OiB6MTUubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgZW5kX2luZGV4OiB6MTUubnVtYmVyKCkubnVsbGlzaCgpLFxuICAgICAgcXVvdGU6IHoxNS5zdHJpbmcoKS5udWxsaXNoKClcbiAgICB9KVxuICBdKVxufSk7XG52YXIgcmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5UGFydEFkZGVkU2NoZW1hID0gejE1Lm9iamVjdCh7XG4gIHR5cGU6IHoxNS5saXRlcmFsKFwicmVzcG9uc2UucmVhc29uaW5nX3N1bW1hcnlfcGFydC5hZGRlZFwiKSxcbiAgaXRlbV9pZDogejE1LnN0cmluZygpLFxuICBzdW1tYXJ5X2luZGV4OiB6MTUubnVtYmVyKClcbn0pO1xudmFyIHJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVRleHREZWx0YVNjaGVtYSA9IHoxNS5vYmplY3Qoe1xuICB0eXBlOiB6MTUubGl0ZXJhbChcInJlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3RleHQuZGVsdGFcIiksXG4gIGl0ZW1faWQ6IHoxNS5zdHJpbmcoKSxcbiAgc3VtbWFyeV9pbmRleDogejE1Lm51bWJlcigpLFxuICBkZWx0YTogejE1LnN0cmluZygpXG59KTtcbnZhciBvcGVuYWlSZXNwb25zZXNDaHVua1NjaGVtYSA9IHoxNS51bmlvbihbXG4gIHRleHREZWx0YUNodW5rU2NoZW1hLFxuICByZXNwb25zZUZpbmlzaGVkQ2h1bmtTY2hlbWEsXG4gIHJlc3BvbnNlQ3JlYXRlZENodW5rU2NoZW1hLFxuICByZXNwb25zZU91dHB1dEl0ZW1BZGRlZFNjaGVtYSxcbiAgcmVzcG9uc2VPdXRwdXRJdGVtRG9uZVNjaGVtYSxcbiAgcmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YVNjaGVtYSxcbiAgcmVzcG9uc2VBbm5vdGF0aW9uQWRkZWRTY2hlbWEsXG4gIHJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVBhcnRBZGRlZFNjaGVtYSxcbiAgcmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5VGV4dERlbHRhU2NoZW1hLFxuICBlcnJvckNodW5rU2NoZW1hLFxuICB6MTUub2JqZWN0KHsgdHlwZTogejE1LnN0cmluZygpIH0pLmxvb3NlKClcbiAgLy8gZmFsbGJhY2sgZm9yIHVua25vd24gY2h1bmtzXG5dKTtcbmZ1bmN0aW9uIGlzVGV4dERlbHRhQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGFcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VPdXRwdXRJdGVtRG9uZUNodW5rKGNodW5rKSB7XG4gIHJldHVybiBjaHVuay50eXBlID09PSBcInJlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmVcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VPdXRwdXRJdGVtRG9uZVJlYXNvbmluZ0NodW5rKGNodW5rKSB7XG4gIHJldHVybiBpc1Jlc3BvbnNlT3V0cHV0SXRlbURvbmVDaHVuayhjaHVuaykgJiYgY2h1bmsuaXRlbS50eXBlID09PSBcInJlYXNvbmluZ1wiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZUZpbmlzaGVkQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2UuY29tcGxldGVkXCIgfHwgY2h1bmsudHlwZSA9PT0gXCJyZXNwb25zZS5pbmNvbXBsZXRlXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlQ3JlYXRlZENodW5rKGNodW5rKSB7XG4gIHJldHVybiBjaHVuay50eXBlID09PSBcInJlc3BvbnNlLmNyZWF0ZWRcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YUNodW5rKGNodW5rKSB7XG4gIHJldHVybiBjaHVuay50eXBlID09PSBcInJlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlT3V0cHV0SXRlbUFkZGVkQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWRcIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRSZWFzb25pbmdDaHVuayhjaHVuaykge1xuICByZXR1cm4gaXNSZXNwb25zZU91dHB1dEl0ZW1BZGRlZENodW5rKGNodW5rKSAmJiBjaHVuay5pdGVtLnR5cGUgPT09IFwicmVhc29uaW5nXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlQW5ub3RhdGlvbkFkZGVkQ2h1bmsoY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rLnR5cGUgPT09IFwicmVzcG9uc2Uub3V0cHV0X3RleHQuYW5ub3RhdGlvbi5hZGRlZFwiO1xufVxuZnVuY3Rpb24gaXNSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlQYXJ0QWRkZWRDaHVuayhjaHVuaykge1xuICByZXR1cm4gY2h1bmsudHlwZSA9PT0gXCJyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV9wYXJ0LmFkZGVkXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVRleHREZWx0YUNodW5rKGNodW5rKSB7XG4gIHJldHVybiBjaHVuay50eXBlID09PSBcInJlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3RleHQuZGVsdGFcIjtcbn1cbmZ1bmN0aW9uIGlzRXJyb3JDaHVuayhjaHVuaykge1xuICByZXR1cm4gY2h1bmsudHlwZSA9PT0gXCJlcnJvclwiO1xufVxuZnVuY3Rpb24gZ2V0UmVzcG9uc2VzTW9kZWxDb25maWcobW9kZWxJZCkge1xuICBjb25zdCBzdXBwb3J0c0ZsZXhQcm9jZXNzaW5nMiA9IG1vZGVsSWQuc3RhcnRzV2l0aChcIm8zXCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcIm80LW1pbmlcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTVcIikgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIik7XG4gIGNvbnN0IHN1cHBvcnRzUHJpb3JpdHlQcm9jZXNzaW5nMiA9IG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC00XCIpIHx8IG1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LW1pbmlcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTVcIikgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LW5hbm9cIikgJiYgIW1vZGVsSWQuc3RhcnRzV2l0aChcImdwdC01LWNoYXRcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwibzNcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwibzQtbWluaVwiKTtcbiAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgcmVxdWlyZWRBdXRvVHJ1bmNhdGlvbjogZmFsc2UsXG4gICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwic3lzdGVtXCIsXG4gICAgc3VwcG9ydHNGbGV4UHJvY2Vzc2luZzogc3VwcG9ydHNGbGV4UHJvY2Vzc2luZzIsXG4gICAgc3VwcG9ydHNQcmlvcml0eVByb2Nlc3Npbmc6IHN1cHBvcnRzUHJpb3JpdHlQcm9jZXNzaW5nMlxuICB9O1xuICBpZiAobW9kZWxJZC5zdGFydHNXaXRoKFwiZ3B0LTUtY2hhdFwiKSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5kZWZhdWx0cyxcbiAgICAgIGlzUmVhc29uaW5nTW9kZWw6IGZhbHNlXG4gICAgfTtcbiAgfVxuICBpZiAobW9kZWxJZC5zdGFydHNXaXRoKFwib1wiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJncHQtNVwiKSB8fCBtb2RlbElkLnN0YXJ0c1dpdGgoXCJjb2RleC1cIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwiY29tcHV0ZXItdXNlXCIpKSB7XG4gICAgaWYgKG1vZGVsSWQuc3RhcnRzV2l0aChcIm8xLW1pbmlcIikgfHwgbW9kZWxJZC5zdGFydHNXaXRoKFwibzEtcHJldmlld1wiKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGVmYXVsdHMsXG4gICAgICAgIGlzUmVhc29uaW5nTW9kZWw6IHRydWUsXG4gICAgICAgIHN5c3RlbU1lc3NhZ2VNb2RlOiBcInJlbW92ZVwiXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgLi4uZGVmYXVsdHMsXG4gICAgICBpc1JlYXNvbmluZ01vZGVsOiB0cnVlLFxuICAgICAgc3lzdGVtTWVzc2FnZU1vZGU6IFwiZGV2ZWxvcGVyXCJcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgLi4uZGVmYXVsdHMsXG4gICAgaXNSZWFzb25pbmdNb2RlbDogZmFsc2VcbiAgfTtcbn1cbnZhciBvcGVuYWlSZXNwb25zZXNQcm92aWRlck9wdGlvbnNTY2hlbWEgPSB6MTUub2JqZWN0KHtcbiAgaW5jbHVkZTogejE1LmFycmF5KFxuICAgIHoxNS5lbnVtKFtcbiAgICAgIFwicmVhc29uaW5nLmVuY3J5cHRlZF9jb250ZW50XCIsXG4gICAgICBcImZpbGVfc2VhcmNoX2NhbGwucmVzdWx0c1wiLFxuICAgICAgXCJtZXNzYWdlLm91dHB1dF90ZXh0LmxvZ3Byb2JzXCJcbiAgICBdKVxuICApLm51bGxpc2goKSxcbiAgaW5zdHJ1Y3Rpb25zOiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICAvKipcbiAgICogUmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9rZW5zLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIHRydWUgd2lsbCByZXR1cm4gdGhlIGxvZyBwcm9iYWJpbGl0aWVzIG9mIHRoZSB0b2tlbnMgdGhhdFxuICAgKiB3ZXJlIGdlbmVyYXRlZC5cbiAgICpcbiAgICogU2V0dGluZyB0byBhIG51bWJlciB3aWxsIHJldHVybiB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRvcCBuXG4gICAqIHRva2VucyB0aGF0IHdlcmUgZ2VuZXJhdGVkLlxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcmVzcG9uc2VzL2NyZWF0ZVxuICAgKiBAc2VlIGh0dHBzOi8vY29va2Jvb2sub3BlbmFpLmNvbS9leGFtcGxlcy91c2luZ19sb2dwcm9ic1xuICAgKi9cbiAgbG9ncHJvYnM6IHoxNS51bmlvbihbejE1LmJvb2xlYW4oKSwgejE1Lm51bWJlcigpLm1pbigxKS5tYXgoVE9QX0xPR1BST0JTX01BWCldKS5vcHRpb25hbCgpLFxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRvdGFsIGNhbGxzIHRvIGJ1aWx0LWluIHRvb2xzIHRoYXQgY2FuIGJlIHByb2Nlc3NlZCBpbiBhIHJlc3BvbnNlLlxuICAgKiBUaGlzIG1heGltdW0gbnVtYmVyIGFwcGxpZXMgYWNyb3NzIGFsbCBidWlsdC1pbiB0b29sIGNhbGxzLCBub3QgcGVyIGluZGl2aWR1YWwgdG9vbC5cbiAgICogQW55IGZ1cnRoZXIgYXR0ZW1wdHMgdG8gY2FsbCBhIHRvb2wgYnkgdGhlIG1vZGVsIHdpbGwgYmUgaWdub3JlZC5cbiAgICovXG4gIG1heFRvb2xDYWxsczogejE1Lm51bWJlcigpLm51bGxpc2goKSxcbiAgbWV0YWRhdGE6IHoxNS5hbnkoKS5udWxsaXNoKCksXG4gIHBhcmFsbGVsVG9vbENhbGxzOiB6MTUuYm9vbGVhbigpLm51bGxpc2goKSxcbiAgcHJldmlvdXNSZXNwb25zZUlkOiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICBwcm9tcHRDYWNoZUtleTogejE1LnN0cmluZygpLm51bGxpc2goKSxcbiAgcmVhc29uaW5nRWZmb3J0OiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICByZWFzb25pbmdTdW1tYXJ5OiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICBzYWZldHlJZGVudGlmaWVyOiB6MTUuc3RyaW5nKCkubnVsbGlzaCgpLFxuICBzZXJ2aWNlVGllcjogejE1LmVudW0oW1wiYXV0b1wiLCBcImZsZXhcIiwgXCJwcmlvcml0eVwiXSkubnVsbGlzaCgpLFxuICBzdG9yZTogejE1LmJvb2xlYW4oKS5udWxsaXNoKCksXG4gIHN0cmljdEpzb25TY2hlbWE6IHoxNS5ib29sZWFuKCkubnVsbGlzaCgpLFxuICB0ZXh0VmVyYm9zaXR5OiB6MTUuZW51bShbXCJsb3dcIiwgXCJtZWRpdW1cIiwgXCJoaWdoXCJdKS5udWxsaXNoKCksXG4gIHVzZXI6IHoxNS5zdHJpbmcoKS5udWxsaXNoKClcbn0pO1xuXG4vLyBzcmMvc3BlZWNoL29wZW5haS1zcGVlY2gtbW9kZWwudHNcbmltcG9ydCB7XG4gIGNvbWJpbmVIZWFkZXJzIGFzIGNvbWJpbmVIZWFkZXJzNixcbiAgY3JlYXRlQmluYXJ5UmVzcG9uc2VIYW5kbGVyLFxuICBwYXJzZVByb3ZpZGVyT3B0aW9ucyBhcyBwYXJzZVByb3ZpZGVyT3B0aW9uczYsXG4gIHBvc3RKc29uVG9BcGkgYXMgcG9zdEpzb25Ub0FwaTZcbn0gZnJvbSBcIkBhaS1zZGsvcHJvdmlkZXItdXRpbHNcIjtcbmltcG9ydCB7IHogYXMgejE2IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIE9wZW5BSVByb3ZpZGVyT3B0aW9uc1NjaGVtYSA9IHoxNi5vYmplY3Qoe1xuICBpbnN0cnVjdGlvbnM6IHoxNi5zdHJpbmcoKS5udWxsaXNoKCksXG4gIHNwZWVkOiB6MTYubnVtYmVyKCkubWluKDAuMjUpLm1heCg0KS5kZWZhdWx0KDEpLm51bGxpc2goKVxufSk7XG52YXIgT3BlbkFJU3BlZWNoTW9kZWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKG1vZGVsSWQsIGNvbmZpZykge1xuICAgIHRoaXMubW9kZWxJZCA9IG1vZGVsSWQ7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5zcGVjaWZpY2F0aW9uVmVyc2lvbiA9IFwidjJcIjtcbiAgfVxuICBnZXQgcHJvdmlkZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnByb3ZpZGVyO1xuICB9XG4gIGFzeW5jIGdldEFyZ3Moe1xuICAgIHRleHQsXG4gICAgdm9pY2UgPSBcImFsbG95XCIsXG4gICAgb3V0cHV0Rm9ybWF0ID0gXCJtcDNcIixcbiAgICBzcGVlZCxcbiAgICBpbnN0cnVjdGlvbnMsXG4gICAgbGFuZ3VhZ2UsXG4gICAgcHJvdmlkZXJPcHRpb25zXG4gIH0pIHtcbiAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuICAgIGNvbnN0IG9wZW5BSU9wdGlvbnMgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczYoe1xuICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICBzY2hlbWE6IE9wZW5BSVByb3ZpZGVyT3B0aW9uc1NjaGVtYVxuICAgIH0pO1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0ge1xuICAgICAgbW9kZWw6IHRoaXMubW9kZWxJZCxcbiAgICAgIGlucHV0OiB0ZXh0LFxuICAgICAgdm9pY2UsXG4gICAgICByZXNwb25zZV9mb3JtYXQ6IFwibXAzXCIsXG4gICAgICBzcGVlZCxcbiAgICAgIGluc3RydWN0aW9uc1xuICAgIH07XG4gICAgaWYgKG91dHB1dEZvcm1hdCkge1xuICAgICAgaWYgKFtcIm1wM1wiLCBcIm9wdXNcIiwgXCJhYWNcIiwgXCJmbGFjXCIsIFwid2F2XCIsIFwicGNtXCJdLmluY2x1ZGVzKG91dHB1dEZvcm1hdCkpIHtcbiAgICAgICAgcmVxdWVzdEJvZHkucmVzcG9uc2VfZm9ybWF0ID0gb3V0cHV0Rm9ybWF0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZ3MucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgICAgc2V0dGluZzogXCJvdXRwdXRGb3JtYXRcIixcbiAgICAgICAgICBkZXRhaWxzOiBgVW5zdXBwb3J0ZWQgb3V0cHV0IGZvcm1hdDogJHtvdXRwdXRGb3JtYXR9LiBVc2luZyBtcDMgaW5zdGVhZC5gXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3BlbkFJT3B0aW9ucykge1xuICAgICAgY29uc3Qgc3BlZWNoTW9kZWxPcHRpb25zID0ge307XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBzcGVlY2hNb2RlbE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBzcGVlY2hNb2RlbE9wdGlvbnNba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICByZXF1ZXN0Qm9keVtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhbmd1YWdlKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ1bnN1cHBvcnRlZC1zZXR0aW5nXCIsXG4gICAgICAgIHNldHRpbmc6IFwibGFuZ3VhZ2VcIixcbiAgICAgICAgZGV0YWlsczogYE9wZW5BSSBzcGVlY2ggbW9kZWxzIGRvIG5vdCBzdXBwb3J0IGxhbmd1YWdlIHNlbGVjdGlvbi4gTGFuZ3VhZ2UgcGFyYW1ldGVyIFwiJHtsYW5ndWFnZX1cIiB3YXMgaWdub3JlZC5gXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlcXVlc3RCb2R5LFxuICAgICAgd2FybmluZ3NcbiAgICB9O1xuICB9XG4gIGFzeW5jIGRvR2VuZXJhdGUob3B0aW9ucykge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IGN1cnJlbnREYXRlID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5jb25maWcuX2ludGVybmFsKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY3VycmVudERhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKSkgIT0gbnVsbCA/IF9jIDogLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCk7XG4gICAgY29uc3QgeyByZXF1ZXN0Qm9keSwgd2FybmluZ3MgfSA9IGF3YWl0IHRoaXMuZ2V0QXJncyhvcHRpb25zKTtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZTogYXVkaW8sXG4gICAgICByZXNwb25zZUhlYWRlcnMsXG4gICAgICByYXdWYWx1ZTogcmF3UmVzcG9uc2VcbiAgICB9ID0gYXdhaXQgcG9zdEpzb25Ub0FwaTYoe1xuICAgICAgdXJsOiB0aGlzLmNvbmZpZy51cmwoe1xuICAgICAgICBwYXRoOiBcIi9hdWRpby9zcGVlY2hcIixcbiAgICAgICAgbW9kZWxJZDogdGhpcy5tb2RlbElkXG4gICAgICB9KSxcbiAgICAgIGhlYWRlcnM6IGNvbWJpbmVIZWFkZXJzNih0aGlzLmNvbmZpZy5oZWFkZXJzKCksIG9wdGlvbnMuaGVhZGVycyksXG4gICAgICBib2R5OiByZXF1ZXN0Qm9keSxcbiAgICAgIGZhaWxlZFJlc3BvbnNlSGFuZGxlcjogb3BlbmFpRmFpbGVkUmVzcG9uc2VIYW5kbGVyLFxuICAgICAgc3VjY2Vzc2Z1bFJlc3BvbnNlSGFuZGxlcjogY3JlYXRlQmluYXJ5UmVzcG9uc2VIYW5kbGVyKCksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBhdWRpbyxcbiAgICAgIHdhcm5pbmdzLFxuICAgICAgcmVxdWVzdDoge1xuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSlcbiAgICAgIH0sXG4gICAgICByZXNwb25zZToge1xuICAgICAgICB0aW1lc3RhbXA6IGN1cnJlbnREYXRlLFxuICAgICAgICBtb2RlbElkOiB0aGlzLm1vZGVsSWQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgYm9keTogcmF3UmVzcG9uc2VcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvdHJhbnNjcmlwdGlvbi9vcGVuYWktdHJhbnNjcmlwdGlvbi1tb2RlbC50c1xuaW1wb3J0IHtcbiAgY29tYmluZUhlYWRlcnMgYXMgY29tYmluZUhlYWRlcnM3LFxuICBjb252ZXJ0QmFzZTY0VG9VaW50OEFycmF5LFxuICBjcmVhdGVKc29uUmVzcG9uc2VIYW5kbGVyIGFzIGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXI2LFxuICBtZWRpYVR5cGVUb0V4dGVuc2lvbixcbiAgcGFyc2VQcm92aWRlck9wdGlvbnMgYXMgcGFyc2VQcm92aWRlck9wdGlvbnM3LFxuICBwb3N0Rm9ybURhdGFUb0FwaVxufSBmcm9tIFwiQGFpLXNkay9wcm92aWRlci11dGlsc1wiO1xuaW1wb3J0IHsgeiBhcyB6MTggfSBmcm9tIFwiem9kL3Y0XCI7XG5cbi8vIHNyYy90cmFuc2NyaXB0aW9uL29wZW5haS10cmFuc2NyaXB0aW9uLW9wdGlvbnMudHNcbmltcG9ydCB7IHogYXMgejE3IH0gZnJvbSBcInpvZC92NFwiO1xudmFyIG9wZW5BSVRyYW5zY3JpcHRpb25Qcm92aWRlck9wdGlvbnMgPSB6MTcub2JqZWN0KHtcbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gaW5jbHVkZSBpbiB0aGUgdHJhbnNjcmlwdGlvbiByZXNwb25zZS5cbiAgICovXG4gIGluY2x1ZGU6IHoxNy5hcnJheSh6MTcuc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvIGluIElTTy02MzktMSBmb3JtYXQuXG4gICAqL1xuICBsYW5ndWFnZTogejE3LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbCdzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC5cbiAgICovXG4gIHByb21wdDogejE3LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIC8qKlxuICAgKiBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUsIGJldHdlZW4gMCBhbmQgMS5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgdGVtcGVyYXR1cmU6IHoxNy5udW1iZXIoKS5taW4oMCkubWF4KDEpLmRlZmF1bHQoMCkub3B0aW9uYWwoKSxcbiAgLyoqXG4gICAqIFRoZSB0aW1lc3RhbXAgZ3JhbnVsYXJpdGllcyB0byBwb3B1bGF0ZSBmb3IgdGhpcyB0cmFuc2NyaXB0aW9uLlxuICAgKiBAZGVmYXVsdCBbJ3NlZ21lbnQnXVxuICAgKi9cbiAgdGltZXN0YW1wR3JhbnVsYXJpdGllczogejE3LmFycmF5KHoxNy5lbnVtKFtcIndvcmRcIiwgXCJzZWdtZW50XCJdKSkuZGVmYXVsdChbXCJzZWdtZW50XCJdKS5vcHRpb25hbCgpXG59KTtcblxuLy8gc3JjL3RyYW5zY3JpcHRpb24vb3BlbmFpLXRyYW5zY3JpcHRpb24tbW9kZWwudHNcbnZhciBsYW5ndWFnZU1hcCA9IHtcbiAgYWZyaWthYW5zOiBcImFmXCIsXG4gIGFyYWJpYzogXCJhclwiLFxuICBhcm1lbmlhbjogXCJoeVwiLFxuICBhemVyYmFpamFuaTogXCJhelwiLFxuICBiZWxhcnVzaWFuOiBcImJlXCIsXG4gIGJvc25pYW46IFwiYnNcIixcbiAgYnVsZ2FyaWFuOiBcImJnXCIsXG4gIGNhdGFsYW46IFwiY2FcIixcbiAgY2hpbmVzZTogXCJ6aFwiLFxuICBjcm9hdGlhbjogXCJoclwiLFxuICBjemVjaDogXCJjc1wiLFxuICBkYW5pc2g6IFwiZGFcIixcbiAgZHV0Y2g6IFwibmxcIixcbiAgZW5nbGlzaDogXCJlblwiLFxuICBlc3RvbmlhbjogXCJldFwiLFxuICBmaW5uaXNoOiBcImZpXCIsXG4gIGZyZW5jaDogXCJmclwiLFxuICBnYWxpY2lhbjogXCJnbFwiLFxuICBnZXJtYW46IFwiZGVcIixcbiAgZ3JlZWs6IFwiZWxcIixcbiAgaGVicmV3OiBcImhlXCIsXG4gIGhpbmRpOiBcImhpXCIsXG4gIGh1bmdhcmlhbjogXCJodVwiLFxuICBpY2VsYW5kaWM6IFwiaXNcIixcbiAgaW5kb25lc2lhbjogXCJpZFwiLFxuICBpdGFsaWFuOiBcIml0XCIsXG4gIGphcGFuZXNlOiBcImphXCIsXG4gIGthbm5hZGE6IFwia25cIixcbiAga2F6YWtoOiBcImtrXCIsXG4gIGtvcmVhbjogXCJrb1wiLFxuICBsYXR2aWFuOiBcImx2XCIsXG4gIGxpdGh1YW5pYW46IFwibHRcIixcbiAgbWFjZWRvbmlhbjogXCJta1wiLFxuICBtYWxheTogXCJtc1wiLFxuICBtYXJhdGhpOiBcIm1yXCIsXG4gIG1hb3JpOiBcIm1pXCIsXG4gIG5lcGFsaTogXCJuZVwiLFxuICBub3J3ZWdpYW46IFwibm9cIixcbiAgcGVyc2lhbjogXCJmYVwiLFxuICBwb2xpc2g6IFwicGxcIixcbiAgcG9ydHVndWVzZTogXCJwdFwiLFxuICByb21hbmlhbjogXCJyb1wiLFxuICBydXNzaWFuOiBcInJ1XCIsXG4gIHNlcmJpYW46IFwic3JcIixcbiAgc2xvdmFrOiBcInNrXCIsXG4gIHNsb3ZlbmlhbjogXCJzbFwiLFxuICBzcGFuaXNoOiBcImVzXCIsXG4gIHN3YWhpbGk6IFwic3dcIixcbiAgc3dlZGlzaDogXCJzdlwiLFxuICB0YWdhbG9nOiBcInRsXCIsXG4gIHRhbWlsOiBcInRhXCIsXG4gIHRoYWk6IFwidGhcIixcbiAgdHVya2lzaDogXCJ0clwiLFxuICB1a3JhaW5pYW46IFwidWtcIixcbiAgdXJkdTogXCJ1clwiLFxuICB2aWV0bmFtZXNlOiBcInZpXCIsXG4gIHdlbHNoOiBcImN5XCJcbn07XG52YXIgT3BlbkFJVHJhbnNjcmlwdGlvbk1vZGVsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihtb2RlbElkLCBjb25maWcpIHtcbiAgICB0aGlzLm1vZGVsSWQgPSBtb2RlbElkO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuc3BlY2lmaWNhdGlvblZlcnNpb24gPSBcInYyXCI7XG4gIH1cbiAgZ2V0IHByb3ZpZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5wcm92aWRlcjtcbiAgfVxuICBhc3luYyBnZXRBcmdzKHtcbiAgICBhdWRpbyxcbiAgICBtZWRpYVR5cGUsXG4gICAgcHJvdmlkZXJPcHRpb25zXG4gIH0pIHtcbiAgICBjb25zdCB3YXJuaW5ncyA9IFtdO1xuICAgIGNvbnN0IG9wZW5BSU9wdGlvbnMgPSBhd2FpdCBwYXJzZVByb3ZpZGVyT3B0aW9uczcoe1xuICAgICAgcHJvdmlkZXI6IFwib3BlbmFpXCIsXG4gICAgICBwcm92aWRlck9wdGlvbnMsXG4gICAgICBzY2hlbWE6IG9wZW5BSVRyYW5zY3JpcHRpb25Qcm92aWRlck9wdGlvbnNcbiAgICB9KTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGNvbnN0IGJsb2IgPSBhdWRpbyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBuZXcgQmxvYihbYXVkaW9dKSA6IG5ldyBCbG9iKFtjb252ZXJ0QmFzZTY0VG9VaW50OEFycmF5KGF1ZGlvKV0pO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcIm1vZGVsXCIsIHRoaXMubW9kZWxJZCk7XG4gICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IG1lZGlhVHlwZVRvRXh0ZW5zaW9uKG1lZGlhVHlwZSk7XG4gICAgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgXCJmaWxlXCIsXG4gICAgICBuZXcgRmlsZShbYmxvYl0sIFwiYXVkaW9cIiwgeyB0eXBlOiBtZWRpYVR5cGUgfSksXG4gICAgICBgYXVkaW8uJHtmaWxlRXh0ZW5zaW9ufWBcbiAgICApO1xuICAgIGlmIChvcGVuQUlPcHRpb25zKSB7XG4gICAgICBjb25zdCB0cmFuc2NyaXB0aW9uTW9kZWxPcHRpb25zID0ge1xuICAgICAgICBpbmNsdWRlOiBvcGVuQUlPcHRpb25zLmluY2x1ZGUsXG4gICAgICAgIGxhbmd1YWdlOiBvcGVuQUlPcHRpb25zLmxhbmd1YWdlLFxuICAgICAgICBwcm9tcHQ6IG9wZW5BSU9wdGlvbnMucHJvbXB0LFxuICAgICAgICAvLyBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2F1ZGlvL2NyZWF0ZVRyYW5zY3JpcHRpb24jYXVkaW9fY3JlYXRldHJhbnNjcmlwdGlvbi1yZXNwb25zZV9mb3JtYXRcbiAgICAgICAgLy8gcHJlZmVyIHZlcmJvc2VfanNvbiB0byBnZXQgc2VnbWVudHMgZm9yIG1vZGVscyB0aGF0IHN1cHBvcnQgaXRcbiAgICAgICAgcmVzcG9uc2VfZm9ybWF0OiBbXG4gICAgICAgICAgXCJncHQtNG8tdHJhbnNjcmliZVwiLFxuICAgICAgICAgIFwiZ3B0LTRvLW1pbmktdHJhbnNjcmliZVwiXG4gICAgICAgIF0uaW5jbHVkZXModGhpcy5tb2RlbElkKSA/IFwianNvblwiIDogXCJ2ZXJib3NlX2pzb25cIixcbiAgICAgICAgdGVtcGVyYXR1cmU6IG9wZW5BSU9wdGlvbnMudGVtcGVyYXR1cmUsXG4gICAgICAgIHRpbWVzdGFtcF9ncmFudWxhcml0aWVzOiBvcGVuQUlPcHRpb25zLnRpbWVzdGFtcEdyYW51bGFyaXRpZXNcbiAgICAgIH07XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh0cmFuc2NyaXB0aW9uTW9kZWxPcHRpb25zKSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChgJHtrZXl9W11gLCBTdHJpbmcoaXRlbSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgd2FybmluZ3NcbiAgICB9O1xuICB9XG4gIGFzeW5jIGRvR2VuZXJhdGUob3B0aW9ucykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2g7XG4gICAgY29uc3QgY3VycmVudERhdGUgPSAoX2MgPSAoX2IgPSAoX2EgPSB0aGlzLmNvbmZpZy5faW50ZXJuYWwpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jdXJyZW50RGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpKSAhPSBudWxsID8gX2MgOiAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgICBjb25zdCB7IGZvcm1EYXRhLCB3YXJuaW5ncyB9ID0gYXdhaXQgdGhpcy5nZXRBcmdzKG9wdGlvbnMpO1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlSGVhZGVycyxcbiAgICAgIHJhd1ZhbHVlOiByYXdSZXNwb25zZVxuICAgIH0gPSBhd2FpdCBwb3N0Rm9ybURhdGFUb0FwaSh7XG4gICAgICB1cmw6IHRoaXMuY29uZmlnLnVybCh7XG4gICAgICAgIHBhdGg6IFwiL2F1ZGlvL3RyYW5zY3JpcHRpb25zXCIsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZFxuICAgICAgfSksXG4gICAgICBoZWFkZXJzOiBjb21iaW5lSGVhZGVyczcodGhpcy5jb25maWcuaGVhZGVycygpLCBvcHRpb25zLmhlYWRlcnMpLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBmYWlsZWRSZXNwb25zZUhhbmRsZXI6IG9wZW5haUZhaWxlZFJlc3BvbnNlSGFuZGxlcixcbiAgICAgIHN1Y2Nlc3NmdWxSZXNwb25zZUhhbmRsZXI6IGNyZWF0ZUpzb25SZXNwb25zZUhhbmRsZXI2KFxuICAgICAgICBvcGVuYWlUcmFuc2NyaXB0aW9uUmVzcG9uc2VTY2hlbWFcbiAgICAgICksXG4gICAgICBhYm9ydFNpZ25hbDogb3B0aW9ucy5hYm9ydFNpZ25hbCxcbiAgICAgIGZldGNoOiB0aGlzLmNvbmZpZy5mZXRjaFxuICAgIH0pO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gcmVzcG9uc2UubGFuZ3VhZ2UgIT0gbnVsbCAmJiByZXNwb25zZS5sYW5ndWFnZSBpbiBsYW5ndWFnZU1hcCA/IGxhbmd1YWdlTWFwW3Jlc3BvbnNlLmxhbmd1YWdlXSA6IHZvaWQgMDtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogcmVzcG9uc2UudGV4dCxcbiAgICAgIHNlZ21lbnRzOiAoX2cgPSAoX2YgPSAoX2QgPSByZXNwb25zZS5zZWdtZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IF9kLm1hcCgoc2VnbWVudCkgPT4gKHtcbiAgICAgICAgdGV4dDogc2VnbWVudC50ZXh0LFxuICAgICAgICBzdGFydFNlY29uZDogc2VnbWVudC5zdGFydCxcbiAgICAgICAgZW5kU2Vjb25kOiBzZWdtZW50LmVuZFxuICAgICAgfSkpKSAhPSBudWxsID8gX2YgOiAoX2UgPSByZXNwb25zZS53b3JkcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9lLm1hcCgod29yZCkgPT4gKHtcbiAgICAgICAgdGV4dDogd29yZC53b3JkLFxuICAgICAgICBzdGFydFNlY29uZDogd29yZC5zdGFydCxcbiAgICAgICAgZW5kU2Vjb25kOiB3b3JkLmVuZFxuICAgICAgfSkpKSAhPSBudWxsID8gX2cgOiBbXSxcbiAgICAgIGxhbmd1YWdlLFxuICAgICAgZHVyYXRpb25JblNlY29uZHM6IChfaCA9IHJlc3BvbnNlLmR1cmF0aW9uKSAhPSBudWxsID8gX2ggOiB2b2lkIDAsXG4gICAgICB3YXJuaW5ncyxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIHRpbWVzdGFtcDogY3VycmVudERhdGUsXG4gICAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBib2R5OiByYXdSZXNwb25zZVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG52YXIgb3BlbmFpVHJhbnNjcmlwdGlvblJlc3BvbnNlU2NoZW1hID0gejE4Lm9iamVjdCh7XG4gIHRleHQ6IHoxOC5zdHJpbmcoKSxcbiAgbGFuZ3VhZ2U6IHoxOC5zdHJpbmcoKS5udWxsaXNoKCksXG4gIGR1cmF0aW9uOiB6MTgubnVtYmVyKCkubnVsbGlzaCgpLFxuICB3b3JkczogejE4LmFycmF5KFxuICAgIHoxOC5vYmplY3Qoe1xuICAgICAgd29yZDogejE4LnN0cmluZygpLFxuICAgICAgc3RhcnQ6IHoxOC5udW1iZXIoKSxcbiAgICAgIGVuZDogejE4Lm51bWJlcigpXG4gICAgfSlcbiAgKS5udWxsaXNoKCksXG4gIHNlZ21lbnRzOiB6MTguYXJyYXkoXG4gICAgejE4Lm9iamVjdCh7XG4gICAgICBpZDogejE4Lm51bWJlcigpLFxuICAgICAgc2VlazogejE4Lm51bWJlcigpLFxuICAgICAgc3RhcnQ6IHoxOC5udW1iZXIoKSxcbiAgICAgIGVuZDogejE4Lm51bWJlcigpLFxuICAgICAgdGV4dDogejE4LnN0cmluZygpLFxuICAgICAgdG9rZW5zOiB6MTguYXJyYXkoejE4Lm51bWJlcigpKSxcbiAgICAgIHRlbXBlcmF0dXJlOiB6MTgubnVtYmVyKCksXG4gICAgICBhdmdfbG9ncHJvYjogejE4Lm51bWJlcigpLFxuICAgICAgY29tcHJlc3Npb25fcmF0aW86IHoxOC5udW1iZXIoKSxcbiAgICAgIG5vX3NwZWVjaF9wcm9iOiB6MTgubnVtYmVyKClcbiAgICB9KVxuICApLm51bGxpc2goKVxufSk7XG5cbi8vIHNyYy9vcGVuYWktcHJvdmlkZXIudHNcbmZ1bmN0aW9uIGNyZWF0ZU9wZW5BSShvcHRpb25zID0ge30pIHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3QgYmFzZVVSTCA9IChfYSA9IHdpdGhvdXRUcmFpbGluZ1NsYXNoKG9wdGlvbnMuYmFzZVVSTCkpICE9IG51bGwgPyBfYSA6IFwiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MVwiO1xuICBjb25zdCBwcm92aWRlck5hbWUgPSAoX2IgPSBvcHRpb25zLm5hbWUpICE9IG51bGwgPyBfYiA6IFwib3BlbmFpXCI7XG4gIGNvbnN0IGdldEhlYWRlcnMgPSAoKSA9PiAoe1xuICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtsb2FkQXBpS2V5KHtcbiAgICAgIGFwaUtleTogb3B0aW9ucy5hcGlLZXksXG4gICAgICBlbnZpcm9ubWVudFZhcmlhYmxlTmFtZTogXCJPUEVOQUlfQVBJX0tFWVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiT3BlbkFJXCJcbiAgICB9KX1gLFxuICAgIFwiT3BlbkFJLU9yZ2FuaXphdGlvblwiOiBvcHRpb25zLm9yZ2FuaXphdGlvbixcbiAgICBcIk9wZW5BSS1Qcm9qZWN0XCI6IG9wdGlvbnMucHJvamVjdCxcbiAgICAuLi5vcHRpb25zLmhlYWRlcnNcbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZUNoYXRNb2RlbCA9IChtb2RlbElkKSA9PiBuZXcgT3BlbkFJQ2hhdExhbmd1YWdlTW9kZWwobW9kZWxJZCwge1xuICAgIHByb3ZpZGVyOiBgJHtwcm92aWRlck5hbWV9LmNoYXRgLFxuICAgIHVybDogKHsgcGF0aCB9KSA9PiBgJHtiYXNlVVJMfSR7cGF0aH1gLFxuICAgIGhlYWRlcnM6IGdldEhlYWRlcnMsXG4gICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2hcbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZUNvbXBsZXRpb25Nb2RlbCA9IChtb2RlbElkKSA9PiBuZXcgT3BlbkFJQ29tcGxldGlvbkxhbmd1YWdlTW9kZWwobW9kZWxJZCwge1xuICAgIHByb3ZpZGVyOiBgJHtwcm92aWRlck5hbWV9LmNvbXBsZXRpb25gLFxuICAgIHVybDogKHsgcGF0aCB9KSA9PiBgJHtiYXNlVVJMfSR7cGF0aH1gLFxuICAgIGhlYWRlcnM6IGdldEhlYWRlcnMsXG4gICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2hcbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZUVtYmVkZGluZ01vZGVsID0gKG1vZGVsSWQpID0+IG5ldyBPcGVuQUlFbWJlZGRpbmdNb2RlbChtb2RlbElkLCB7XG4gICAgcHJvdmlkZXI6IGAke3Byb3ZpZGVyTmFtZX0uZW1iZWRkaW5nYCxcbiAgICB1cmw6ICh7IHBhdGggfSkgPT4gYCR7YmFzZVVSTH0ke3BhdGh9YCxcbiAgICBoZWFkZXJzOiBnZXRIZWFkZXJzLFxuICAgIGZldGNoOiBvcHRpb25zLmZldGNoXG4gIH0pO1xuICBjb25zdCBjcmVhdGVJbWFnZU1vZGVsID0gKG1vZGVsSWQpID0+IG5ldyBPcGVuQUlJbWFnZU1vZGVsKG1vZGVsSWQsIHtcbiAgICBwcm92aWRlcjogYCR7cHJvdmlkZXJOYW1lfS5pbWFnZWAsXG4gICAgdXJsOiAoeyBwYXRoIH0pID0+IGAke2Jhc2VVUkx9JHtwYXRofWAsXG4gICAgaGVhZGVyczogZ2V0SGVhZGVycyxcbiAgICBmZXRjaDogb3B0aW9ucy5mZXRjaFxuICB9KTtcbiAgY29uc3QgY3JlYXRlVHJhbnNjcmlwdGlvbk1vZGVsID0gKG1vZGVsSWQpID0+IG5ldyBPcGVuQUlUcmFuc2NyaXB0aW9uTW9kZWwobW9kZWxJZCwge1xuICAgIHByb3ZpZGVyOiBgJHtwcm92aWRlck5hbWV9LnRyYW5zY3JpcHRpb25gLFxuICAgIHVybDogKHsgcGF0aCB9KSA9PiBgJHtiYXNlVVJMfSR7cGF0aH1gLFxuICAgIGhlYWRlcnM6IGdldEhlYWRlcnMsXG4gICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2hcbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZVNwZWVjaE1vZGVsID0gKG1vZGVsSWQpID0+IG5ldyBPcGVuQUlTcGVlY2hNb2RlbChtb2RlbElkLCB7XG4gICAgcHJvdmlkZXI6IGAke3Byb3ZpZGVyTmFtZX0uc3BlZWNoYCxcbiAgICB1cmw6ICh7IHBhdGggfSkgPT4gYCR7YmFzZVVSTH0ke3BhdGh9YCxcbiAgICBoZWFkZXJzOiBnZXRIZWFkZXJzLFxuICAgIGZldGNoOiBvcHRpb25zLmZldGNoXG4gIH0pO1xuICBjb25zdCBjcmVhdGVMYW5ndWFnZU1vZGVsID0gKG1vZGVsSWQpID0+IHtcbiAgICBpZiAobmV3LnRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIlRoZSBPcGVuQUkgbW9kZWwgZnVuY3Rpb24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIHRoZSBuZXcga2V5d29yZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJlc3BvbnNlc01vZGVsKG1vZGVsSWQpO1xuICB9O1xuICBjb25zdCBjcmVhdGVSZXNwb25zZXNNb2RlbCA9IChtb2RlbElkKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBPcGVuQUlSZXNwb25zZXNMYW5ndWFnZU1vZGVsKG1vZGVsSWQsIHtcbiAgICAgIHByb3ZpZGVyOiBgJHtwcm92aWRlck5hbWV9LnJlc3BvbnNlc2AsXG4gICAgICB1cmw6ICh7IHBhdGggfSkgPT4gYCR7YmFzZVVSTH0ke3BhdGh9YCxcbiAgICAgIGhlYWRlcnM6IGdldEhlYWRlcnMsXG4gICAgICBmZXRjaDogb3B0aW9ucy5mZXRjaCxcbiAgICAgIGZpbGVJZFByZWZpeGVzOiBbXCJmaWxlLVwiXVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBwcm92aWRlciA9IGZ1bmN0aW9uKG1vZGVsSWQpIHtcbiAgICByZXR1cm4gY3JlYXRlTGFuZ3VhZ2VNb2RlbChtb2RlbElkKTtcbiAgfTtcbiAgcHJvdmlkZXIubGFuZ3VhZ2VNb2RlbCA9IGNyZWF0ZUxhbmd1YWdlTW9kZWw7XG4gIHByb3ZpZGVyLmNoYXQgPSBjcmVhdGVDaGF0TW9kZWw7XG4gIHByb3ZpZGVyLmNvbXBsZXRpb24gPSBjcmVhdGVDb21wbGV0aW9uTW9kZWw7XG4gIHByb3ZpZGVyLnJlc3BvbnNlcyA9IGNyZWF0ZVJlc3BvbnNlc01vZGVsO1xuICBwcm92aWRlci5lbWJlZGRpbmcgPSBjcmVhdGVFbWJlZGRpbmdNb2RlbDtcbiAgcHJvdmlkZXIudGV4dEVtYmVkZGluZyA9IGNyZWF0ZUVtYmVkZGluZ01vZGVsO1xuICBwcm92aWRlci50ZXh0RW1iZWRkaW5nTW9kZWwgPSBjcmVhdGVFbWJlZGRpbmdNb2RlbDtcbiAgcHJvdmlkZXIuaW1hZ2UgPSBjcmVhdGVJbWFnZU1vZGVsO1xuICBwcm92aWRlci5pbWFnZU1vZGVsID0gY3JlYXRlSW1hZ2VNb2RlbDtcbiAgcHJvdmlkZXIudHJhbnNjcmlwdGlvbiA9IGNyZWF0ZVRyYW5zY3JpcHRpb25Nb2RlbDtcbiAgcHJvdmlkZXIudHJhbnNjcmlwdGlvbk1vZGVsID0gY3JlYXRlVHJhbnNjcmlwdGlvbk1vZGVsO1xuICBwcm92aWRlci5zcGVlY2ggPSBjcmVhdGVTcGVlY2hNb2RlbDtcbiAgcHJvdmlkZXIuc3BlZWNoTW9kZWwgPSBjcmVhdGVTcGVlY2hNb2RlbDtcbiAgcHJvdmlkZXIudG9vbHMgPSBvcGVuYWlUb29scztcbiAgcmV0dXJuIHByb3ZpZGVyO1xufVxudmFyIG9wZW5haSA9IGNyZWF0ZU9wZW5BSSgpO1xuZXhwb3J0IHtcbiAgY3JlYXRlT3BlbkFJLFxuICBvcGVuYWlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@ai-sdk+openai@2.0.32_zod@3.25.76/node_modules/@ai-sdk/openai/dist/index.mjs\n");

/***/ })

};
;